From 0b1636aa3dc2eceaf89b85539498b17940083793 Mon Sep 17 00:00:00 2001
From: Naveen S <naveens@ti.com>
Date: Tue, 29 Mar 2011 15:12:38 +0530
Subject: [PATCH 1/2] ti-syslink: Patch to fix tear down issues

---
 ti/syslink/family/hlos/knl/ti81xx/Platform.c       |   34 +-
 ti/syslink/ipc/hlos/knl/GateHWSpinlock.c           |   23 +-
 ti/syslink/ipc/rtos/syslinkMemMgr/SyslinkMemMgr.c  |   16 +-
 .../ipc/rtos/syslinkMemMgr/SyslinkMemMgr.xdc       |    3 +-
 4 files changed, 485 insertions(+), 419 deletions(-)

diff --git a/ti/syslink/family/hlos/knl/ti81xx/Platform.c b/ti/syslink/family/hlos/knl/ti81xx/Platform.c
index 1295ff7..a3ab6c2 100755
--- a/ti/syslink/family/hlos/knl/ti81xx/Platform.c
+++ b/ti/syslink/family/hlos/knl/ti81xx/Platform.c
@@ -4,7 +4,7 @@
  *  @brief      Implementation of Platform initialization logic.
  *
  *
- *  @ver        02.00.00.67_alpha2
+ *  @ver        02.00.00.67_p1_alpha2
  *  
  *  ============================================================================
  *  
@@ -816,25 +816,29 @@ Platform_setup (void)
 
 /* Intialize RINGIO Transport for DSP */
     if (status >= 0) {
-        for (i = 0; i < (MultiProc_getNumProcessors () - 1); i++) {
+        for (i = 0; 
+            (i < (MultiProc_getNumProcessors () - 1)) && (status >= 0); i++) {
             RingIOTransportShm_Params_init (NULL,
                           &config->ringIOTransportShmParams [i]);
             Platform_module->ringIOTransportShmHandle [i] =
             RingIOTransportShm_create  (i,
                                         &config->ringIOTransportShmParams [i]);
-        }
 #if !defined(SYSLINK_BUILD_OPTIMIZE)
-        if (status < 0) {
-            GT_setFailureReason (curTrace,
-                                 GT_4CLASS,
-                                 "Platform_setup",
-                                 status,
-                                 "RingIOTransportShm_create failed!");
-        }
-        else {
-            Platform_module->ringIOTransportShmInitSlaveFlag [i] = TRUE;
-        }
+            if (status < 0) {
+                GT_setFailureReason (curTrace,
+                                     GT_4CLASS,
+                                     "Platform_setup",
+                                     status,
+                                     "RingIOTransportShm_create failed!");
+            }
+            else {
 #endif /* if !defined(SYSLINK_BUILD_OPTIMIZE) */
+                Platform_module->ringIOTransportShmInitSlaveFlag [i] = TRUE;
+#if !defined(SYSLINK_BUILD_OPTIMIZE)
+            }
+#endif /* if !defined(SYSLINK_BUILD_OPTIMIZE) */
+
+        }
     }
 
 /* Intialize coff loader */
@@ -2655,7 +2659,7 @@ Platform_stopCallback (UInt16 procId, Ptr arg)
     }
 
     Platform_refCount--;
-    if (Platform_refCount == 0) {
+//    if (Platform_refCount == 0) {
         if (handle->bslaveAdditionalReg != NULL) {
             Memory_free (NULL,
                          handle->bslaveAdditionalReg,
@@ -2668,7 +2672,7 @@ Platform_stopCallback (UInt16 procId, Ptr arg)
                          handle->slaveCfg.numSRs * sizeof (Platform_SlaveSRConfig));
             handle->slaveSRCfg = NULL;
         }
-    }
+//    }
 
     if (entryBaseAddrs != NULL) {
         Memory_free (NULL,
diff --git a/ti/syslink/ipc/hlos/knl/GateHWSpinlock.c b/ti/syslink/ipc/hlos/knl/GateHWSpinlock.c
index 443857c..a32e237 100755
--- a/ti/syslink/ipc/hlos/knl/GateHWSpinlock.c
+++ b/ti/syslink/ipc/hlos/knl/GateHWSpinlock.c
@@ -4,7 +4,7 @@
  *  @brief      Gate based on Hardware SpinLock.
  *
  *
- *  @ver        02.00.00.67_alpha2
+ *  @ver        02.00.00.67_p1_alpha2
  *  
  *  ============================================================================
  *  
@@ -130,6 +130,7 @@ static
 #endif /* if !defined(SYSLINK_BUILD_DEBUG) */
 GateHWSpinlock_Module_State GateHWSpinlock_state =
 {
+    .refCount = 0,
     .defaultCfg.defaultProtection  = GateHWSpinlock_LocalProtect_INTERRUPT,
     .defaultCfg.numLocks           = 64,/* Max limit supported in netra platform*/
     .defInstParams.resourceId      = 0,
@@ -291,7 +292,9 @@ Int32
 GateHWSpinlock_destroy (void)
 {
     Int32 status = GateHWSpinlock_S_SUCCESS;
-        IArg  key;
+    IArg  key;
+    UInt32 reservedSize;
+
 
     GT_0trace (curTrace, GT_ENTER, "GateHWSpinlock_destroy");
 
@@ -310,8 +313,22 @@ GateHWSpinlock_destroy (void)
     }
     else {
 #endif /* if !defined(SYSLINK_BUILD_OPTIMIZE) */
-        if (--GateHWSpinlock_module->refCount == 1) {
+        GateHWSpinlock_module->refCount --;
+
+        if (GateHWSpinlock_module->refCount == 0) {
+
             Gate_leaveSystem (key);
+
+            reservedSize = (GateHWSpinlock_module->numLocks/32);
+            if (GateHWSpinlock_module->numLocks % 32) {
+                reservedSize += 1;
+            }
+
+            Memory_free (NULL,
+                         GateHWSpinlock_module->reservedMaskArr,
+                         reservedSize * sizeof(UInt32));
+            GateHWSpinlock_module->reservedMaskArr = NULL;
+
             /* Clear cfg area */
             Memory_set ((Ptr) &GateHWSpinlock_module->cfg,
                         0,
diff --git a/ti/syslink/ipc/rtos/syslinkMemMgr/SyslinkMemMgr.c b/ti/syslink/ipc/rtos/syslinkMemMgr/SyslinkMemMgr.c
index abb7b0f..e91d2ff 100755
--- a/ti/syslink/ipc/rtos/syslinkMemMgr/SyslinkMemMgr.c
+++ b/ti/syslink/ipc/rtos/syslinkMemMgr/SyslinkMemMgr.c
@@ -4,7 +4,7 @@
  *  @brief   Implements front end for the SyslinkMemMgr implementations.
  *
  *
- *  @ver        02.00.00.67_alpha2
+ *  @ver        02.00.00.67_p1_alpha2
  *  
  *  ============================================================================
  *  
@@ -82,11 +82,13 @@ Int SyslinkMemMgr_Instance_init(SyslinkMemMgr_Object       *obj,
             SyslinkMemMgr_RemoteProxyShMem_Params_init(&custom1Params);
             custom1Params.heapHandle = params->heapHandle;
             obj->memMgrHandle = SyslinkMemMgr_RemoteProxyShMem_create(&custom1Params, eb);
+            obj->memMgrType = params->memMgrType;
         break;
         case SyslinkMemMgr_TYPE_TILERMEM:
             SyslinkMemMgr_RemoteProxyTilerMem_Params_init(&custom2Params);
             custom2Params.heapHandle = params->heapHandle;
             obj->memMgrHandle = SyslinkMemMgr_RemoteProxyTilerMem_create(&custom2Params, eb);
+            obj->memMgrType = params->memMgrType;
         break;
         default:
         break;
@@ -99,6 +101,18 @@ Void SyslinkMemMgr_Instance_finalize(SyslinkMemMgr_Object *obj,
                                      Int                   status)
 {
 
+    switch(obj->memMgrType) {
+
+        case SyslinkMemMgr_TYPE_SHAREDMEM:
+             SyslinkMemMgr_RemoteProxyShMem_delete(&obj->memMgrHandle);
+        break;
+        case SyslinkMemMgr_TYPE_TILERMEM:
+             SyslinkMemMgr_RemoteProxyTilerMem_delete(&obj->memMgrHandle);
+        break;
+        default:
+        break;
+
+    }
 
 }
 
diff --git a/ti/syslink/ipc/rtos/syslinkMemMgr/SyslinkMemMgr.xdc b/ti/syslink/ipc/rtos/syslinkMemMgr/SyslinkMemMgr.xdc
index bf1049c..3e35026 100755
--- a/ti/syslink/ipc/rtos/syslinkMemMgr/SyslinkMemMgr.xdc
+++ b/ti/syslink/ipc/rtos/syslinkMemMgr/SyslinkMemMgr.xdc
@@ -4,7 +4,7 @@
  *  @brief      XDC file
  *
  *
- *  @ver        02.00.00.67_alpha2
+ *  @ver        02.00.00.67_p1_alpha2
  *  
  *  ============================================================================
  *  
@@ -88,6 +88,7 @@ module SyslinkMemMgr inherits ti.syslink.ipc.rtos.interfaces.ISyslinkMemMgr {
     internal:
     struct Instance_State {
         ISyslinkMemMgr.Handle memMgrHandle;
+        UInt32                memMgrType;
     }
 
 }
-- 
1.7.0.4

