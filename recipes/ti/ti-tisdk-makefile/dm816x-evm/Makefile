include Rules.make

DEFAULT_LINUXKERNEL_CONFIG=ti8168_evm_defconfig
DEFAULT_UBOOT_CONFIG=ti8168_evm_config
MIN_UBOOT_CONFIG=ti8168_evm_min_sd
# export cross compiler location in PATH
PATH := ${PATH}:${CSTOOL_PATH}

.PHONY:	components components_clean all clean help cmem cmem_clean cmem_install linux linux_clean linux_install install u-boot u-boot_clean u-boot_install c6accel c6accel_clean c6accel_install syslink syslink_clean syslink_install sademo sademo_clean sademo_install matrix matrix_clean matrix_install c6run c6run_clean c6run_examples c6run_install imglib imglib_clean dsplib dsplib_clean mathlib mathlib_clean osal osal_clean

#==============================================================================
# Build components to enable all other build targets. 
#==============================================================================
components: linux cmem syslink c6accel c6run imglib dsplib mathlib osal omx

#==============================================================================
# Clean up the targets built by 'make all'.
#==============================================================================
components_clean: linux_clean syslink_clean cmem_clean c6accel_clean c6run_clean imglib_clean dsplib_clean mathlib_clean osal_clean omx_clean

#==============================================================================
# Build everything rebuildable.
#==============================================================================
all: components u-boot sademo matrix c6run_examples omtb psp-examples

#==============================================================================
# Install everything
#==============================================================================
install: linux_install cmem_install syslink_install u-boot_install c6accel_install sademo_install matrix_install c6run_install omx_install omtb_install psp-examples_install

#==============================================================================
# Clean up all targets.
#==============================================================================
clean: components_clean u-boot_clean sademo_clean matrix_clean c6run_clean omtb_clean psp-examples_clean

#==============================================================================
# A help message target.
#==============================================================================
help:
	@echo
	@echo "Available build targets are:"
	@echo
	@echo "    components                   : Build the components for which a rebuild is necessary to enable all other build targets listed below. You must do this at least once upon installation prior to attempting the other targets."
	@echo "    components_clean             : Remove files generated by the 'components' target"
	@echo 
	@echo "    cmem                         : Build the CMEM kernel module"
	@echo "    cmem_clean                   : Remove generated cmem files."
	@echo "    cmem_install                 : Install cmemk module"
	@echo
	@echo "    syslink                      : Configure and build SYS Link for HLOS and HLOS without sample examples"
	@echo "    syslink_clean                : Remove generated SysLink files"
	@echo "    syslink_install              : Install HLOS and RTOS link files"
	@echo
	@echo "    syslink_hlos                 : Configure and build DSP Link for ARM"
	@echo "    syslink_hlos_clean           : Clean DSP Link for ARM"
	@echo 
	@echo "    syslink_rtos                 : Configure and build SysLink for RTOS"
	@echo "    syslink_rtos_clean           : Clean SysLink for RTOS"
	@echo
	@echo "    linux                        : Build Linux kernel uImage and module"
	@echo "    linux_clean                  : Remove generated Linux kernel files"
	@echo "    linux_install                : Install kernel binary and  modules"
	@echo
	@echo "    u-boot                       : Build the u-boot boot loader"
	@echo "    u-boot_clean                 : Remove generated u-boot files"
	@echo "    u-boot_install               : Install the u-boot image"
	@echo
	@echo "    psp-examples                 : Build the driver examples"
	@echo "    psp-examples_clean		: Remove generated driver example files"
	@echo "    psp-examples_install         : Install the psp examples"
	@echo
	@echo "    imglib                       : Build the DSP image library"
	@echo "    imglib_clean                 : Remove generated imglib files"
	@echo
	@echo "    dsplib                       : Build the DSP library"
	@echo "    dsplib_clean                 : Remove generated dsplib files"
	@echo
	@echo "    mathlib                      : Build the DSP math library"
	@echo "    mathlib_clean                : Remove generated mathlib files"
	@echo
	@echo "    osal                         : Build the OSAL"
	@echo "    osal_clean                   : Remove generated OSAL files"
	@echo
	@echo "    c6accel                      : Build c6accel package"
	@echo "    c6accel_clean                : Remove generated c6accel files"
	@echo "    c6accel_install              : Install c6accel examples"
	@echo
	@echo "    c6run                        : Build c6run backend libraries"
	@echo "    c6run_clean                  : Remove c6run backend libraries"
	@echo "    c6run_examples               : Build c6run examples & tests"
	@echo "    c6run_install                : Install c6run examples & tests"
	@echo 
	@echo "    sademo                       : Build the Signal Analyzer demo for $(PLATFORM)"
	@echo "    sademo_clean                 : Remove Signal Analyzer demo files."
	@echo "    sademo_install               : install Signal Analyzer demo executables."
	@echo
	@echo "    matrix                       : Build matrix application launcher"
	@echo "    matrix_clean                 : Remove all matrix files"
	@echo "    matrix_install               : Install matrix"
	@echo
	@echo "    omx                          : Build OMX and OMX IL Clients"
	@echo "    omx_clean                    : Remove OMX generated files"
	@echo "    omx_install                  : Install OMX IL Clients"
	@echo
	@echo "    omtb                         : Build OMTB IL Clients"
	@echo "    omtb_clean                   : Remove OMTB generated files"
	@echo "    omtb_install                 : Install OMTB IL Clients"
	@echo
	@echo "    all                          : Rebuild everything"
	@echo "    clean                        : Remove all generated files"
	@echo
	@echo "    install                      : Install all the targets in "
	@echo "                            $(EXEC_DIR)"
	@echo

#==============================================================================
# Build the Linux kernel. Also, an explicit cleanup target is defined.
#==============================================================================
linux:
	$(MAKE) -C $(LINUXKERNEL_INSTALL_DIR) ARCH=arm CROSS_COMPILE=$(CSTOOL_PREFIX) $(DEFAULT_LINUXKERNEL_CONFIG)
	$(MAKE) -C $(LINUXKERNEL_INSTALL_DIR) ARCH=arm CROSS_COMPILE=$(CSTOOL_PREFIX) uImage
	$(MAKE) -C $(LINUXKERNEL_INSTALL_DIR) ARCH=arm CROSS_COMPILE=$(CSTOOL_PREFIX) modules
linux_clean:
	$(MAKE) -C $(LINUXKERNEL_INSTALL_DIR) mrproper
	$(MAKE) -C $(LINUXKERNEL_INSTALL_DIR) ARCH=arm CROSS_COMPILE=$(CSTOOL_PREFIX) clean

linux_install:
	install -d $(EXEC_DIR)/boot
	install  $(LINUXKERNEL_INSTALL_DIR)/arch/arm/boot/uImage $(EXEC_DIR)/boot
	install  $(LINUXKERNEL_INSTALL_DIR)/vmlinux $(EXEC_DIR)/boot
	install  $(LINUXKERNEL_INSTALL_DIR)/System.map $(EXEC_DIR)/boot
	$(MAKE) -C $(LINUXKERNEL_INSTALL_DIR) ARCH=arm CROSS_COMPILE=$(CSTOOL_PREFIX) INSTALL_MOD_PATH=$(EXEC_DIR)/ modules_install

#==============================================================================
# Build u-boot. Also, an explicit cleanup target is defined.
#==============================================================================
u-boot-min:
	$(MAKE) -C $(PSP_INSTALL_DIR)/u-boot-* CROSS_COMPILE=$(CSTOOL_PREFIX) $(MIN_UBOOT_CONFIG)
	$(MAKE) -C $(PSP_INSTALL_DIR)/u-boot-* CROSS_COMPILE=$(CSTOOL_PREFIX) u-boot.ti
	cd $(PSP_INSTALL_DIR)/u-boot-*; mv u-boot.min.sd MLO; cd -
	$(MAKE) -C $(PSP_INSTALL_DIR)/u-boot-* CROSS_COMPILE=$(CSTOOL_PREFIX) distclean

u-boot-min_clean:
	rm -f $(PSP_INSTALL_DIR)/u-boot-*/MLO

u-boot: u-boot-min
	$(MAKE) -C $(PSP_INSTALL_DIR)/u-boot-* CROSS_COMPILE=$(CSTOOL_PREFIX) $(DEFAULT_UBOOT_CONFIG)
	$(MAKE) -C $(PSP_INSTALL_DIR)/u-boot-* CROSS_COMPILE=$(CSTOOL_PREFIX) u-boot.ti

u-boot_clean: u-boot-min_clean
	$(MAKE) -C $(PSP_INSTALL_DIR)/u-boot-* CROSS_COMPILE=$(CSTOOL_PREFIX) distclean

u-boot_install:
	install -d $(EXEC_DIR)/boot
	install $(PSP_INSTALL_DIR)/u-boot-*/MLO $(EXEC_DIR)/boot
	install $(PSP_INSTALL_DIR)/u-boot-*/u-boot.bin $(EXEC_DIR)/boot
	install $(PSP_INSTALL_DIR)/u-boot-*/u-boot.map $(EXEC_DIR)/boot

###############################################################################
# Build the Linux device driver examples
###############################################################################
psp-examples:
	mkdir -p $(PSP_EXAMPLES_INSTALL_DIR)/audio/bin
	$(MAKE) -C $(PSP_EXAMPLES_INSTALL_DIR)/audio \
		KERNEL_DIR=$(LINUXKERNEL_INSTALL_DIR) \
		INSTALL_DIR=$(PSP_EXAMPLES_INSTALL_DIR)/audio \
		EXE_DIR=$(PSP_EXAMPLES_INSTALL_DIR)/audio/bin \
		LIB_DIR=$(DVSDK_INSTALL_DIR)/linux-devkit/arm-none-linux-gnueabi/usr/lib \
		LIB_INC=$(DVSDK_INSTALL_DIR)/linux-devkit/arm-none-linux-gnueabi/usr/include \
		CROSS_COMPILE=$(CSTOOL_PREFIX)
	$(MAKE) -C $(PSP_EXAMPLES_INSTALL_DIR)/edma \
		KDIR=$(LINUXKERNEL_INSTALL_DIR) \
		PWD=$(PSP_EXAMPLES_INSTALL_DIR)/edma \
		ARCH=arm \
		CROSS_COMPILE=$(CSTOOL_PREFIX)
	$(MAKE) -C $(PSP_EXAMPLES_INSTALL_DIR)/pcie \
		CC=$(CSTOOL_PREFIX)gcc \
		KERNEL_DIR=$(LINUXKERNEL_INSTALL_DIR)
	mkdir -p $(PSP_EXAMPLES_INSTALL_DIR)/video/bin
#	$(MAKE) -C $(DVSDK_INSTALL_DIR)/example-applications/linux-driver-examples*/video \
#		KERNEL_DIR=$(LINUXKERNEL_INSTALL_DIR) \
#		INSTALL_DIR=$(DVSDK_INSTALL_DIR)/example-applications/linux-driver-examples*/video \
#		EXE_DIR=$(DVSDK_INSTALL_DIR)/example-applications/linux-driver-examples*/video/bin \
#		CROSS_COMPILE=$(CSTOOL_PREFIX)
	$(MAKE) -C $(PSP_EXAMPLES_INSTALL_DIR)/watchdog \
		CC=$(CSTOOL_PREFIX)gcc \
		KERNEL_DIR=$(LINUXKERNEL_INSTALL_DIR)

psp-examples_clean:
	$(MAKE) -C $(PSP_EXAMPLES_INSTALL_DIR)/audio \
		KERNEL_DIR=$(LINUXKERNEL_INSTALL_DIR) \
		INSTALL_DIR=$(PSP_EXAMPLES_INSTALL_DIR)/audio \
		EXE_DIR=$(EXEC_DIR)/psp-audio \
		LIB_DIR=${DVSDK_INSTALL_DIR}/linux-devkit/arm-none-linux-gnueabi/usr/lib \
		LIB_INC=${DVSDK_INSTALL_DIR}/linux-devkit/arm-none-linux-gnueabi/usr/include \
		CROSS_COMPILE=$(CSTOOL_PREFIX) \
		clean
	$(MAKE) -C $(PSP_EXAMPLES_INSTALL_DIR)/edma \
		KDIR=$(LINUXKERNEL_INSTALL_DIR) \
		PWD=$(PSP_EXAMPLES_INSTALL_DIR)/edma \
		ARCH=arm \
		CROSS_COMPILE=$(CSTOOL_PREFIX) \
		clean
	$(MAKE) -C $(PSP_EXAMPLES_INSTALL_DIR)/pcie \
		KERNEL_DIR=$(LINUXKERNEL_INSTALL_DIR) \
		CC=$(CSTOOL_PREFIX)gcc \
		clean
#	$(MAKE) -C $(PSP_EXAMPLES_INSTALL_DIR)/video \
#		KERNEL_DIR=$(LINUXKERNEL_INSTALL_DIR) \
#		INSTALL_DIR=$(PSP_EXAMPLES_INSTALL_DIR)/video \
#		EXE_DIR=$(PSP_EXAMPLES_INSTALL_DIR)/video \
#		CROSS_COMPILE=$(CSTOOL_PREFIX) \
#		clean
	$(MAKE) -C $(PSP_EXAMPLES_INSTALL_DIR)/watchdog \
		CC=$(CSTOOL_PREFIX)gcc \
		KERNEL_DIR=$(LINUXKERNEL_INSTALL_DIR) \
		clean

psp-examples_install:
	mkdir -p $(EXEC_DIR)/psp-examples
	-cp $(PSP_EXAMPLES_INSTALL_DIR)/audio/bin/minimal_capture $(EXEC_DIR)/psp-examples
	-cp $(PSP_EXAMPLES_INSTALL_DIR)/audio/bin/minimal_playback $(EXEC_DIR)/psp-examples
	-cp $(PSP_EXAMPLES_INSTALL_DIR)/edma/edma_test.ko $(EXEC_DIR)/psp-examples
	-cp $(PSP_EXAMPLES_INSTALL_DIR)/pcie/saBootApp $(EXEC_DIR)/psp-examples
	-cp $(PSP_EXAMPLES_INSTALL_DIR)/watchdog/saWatchdog $(EXEC_DIR)/psp-examples

#==============================================================================
# Build the CMEM kernel module for the configured platform, and make sure the
# kernel_binaries directory is kept in sync. Also, an explicit cleanup target
# is defined.
#==============================================================================
cmem:
	$(MAKE) -C $(CMEM_INSTALL_DIR)/packages/ti/sdo/linuxutils/cmem/src/interface ../../lib/cmem.a470MV RULES_MAKE=../../../../../../../../../Rules.make
	$(MAKE) -C $(CMEM_INSTALL_DIR)/packages/ti/sdo/linuxutils/cmem/src/module RULES_MAKE=../../../../../../../../../Rules.make

cmem_clean:
	$(MAKE) -C $(CMEM_INSTALL_DIR)/packages/ti/sdo/linuxutils/cmem/src/module clean
	$(MAKE) -C $(CMEM_INSTALL_DIR)/packages/ti/sdo/linuxutils/cmem/src/interface clean

cmem_install:
	install -d $(EXEC_DIR)/cmem
	install $(CMEM_INSTALL_DIR)/packages/ti/sdo/linuxutils/cmem/src/module/cmemk.ko $(EXEC_DIR)/cmem

###############################################################################
# Build the OSAL
###############################################################################
osal:
	$(MAKE) -C $(OSAL_INSTALL_DIR)/packages/linuxdist/build \
		CROSS_COMPILE=$(CSTOOL_PREFIX) \
		OSAL_INSTALL_DIR=$(OSAL_INSTALL_DIR)
	$(MAKE) -C $(OSAL_INSTALL_DIR)/packages/linuxdist/cstubs \
		CROSS_COMPILE=$(CSTOOL_PREFIX) \
		OSAL_INSTALL_DIR=$(OSAL_INSTALL_DIR)

osal_clean:
	$(MAKE) -C $(OSAL_INSTALL_DIR)/packages/linuxdist/build \
		CROSS_COMPILE=$(CSTOOL_PREFIX) \
		OSAL_INSTALL_DIR=$(OSAL_INSTALL_DIR) \
		clean
	$(MAKE) -C $(OSAL_INSTALL_DIR)/packages/linuxdist/cstubs \
		CROSS_COMPILE=$(CSTOOL_PREFIX) \
		OSAL_INSTALL_DIR=$(OSAL_INSTALL_DIR) \
		clean

###############################################################################
# Build SYSLINK
###############################################################################
syslink: 
	${MAKE} -C ${SYSLINK_INSTALL_DIR} \
	DEVICE="TI816X" \
	GPPOS=Linux \
	LOADER=ELF \
	SDK=EZSDK \
	IPC_INSTALL_DIR="${IPC_INSTALL_DIR}" \
	BIOS_INSTALL_DIR="${SYSBIOS_INSTALL_DIR}" \
	XDC_INSTALL_DIR="${XDC_INSTALL_DIR}" \
	LINUXKERNEL="${KERNEL_INSTALL_DIR}" \
	CGT_ARM_INSTALL_DIR="${CSTOOL_DIR}" \
	CGT_ARM_PREFIX="${CSTOOL_PREFIX}" \
	CGT_C674_ELF_INSTALL_DIR="${CODEGEN_INSTALL_DIR}" \
	USE_SYSLINK_NOTIFY=0 \
	syslink

syslink_clean: 
	${MAKE} -C ${SYSLINK_INSTALL_DIR} \
	DEVICE="TI816X" \
	GPPOS=Linux \
	LOADER=ELF \
	SDK=EZSDK \
	IPC_INSTALL_DIR="${IPC_INSTALL_DIR}" \
	BIOS_INSTALL_DIR="${SYSBIOS_INSTALL_DIR}" \
	XDC_INSTALL_DIR="${XDC_INSTALL_DIR}" \
	LINUXKERNEL="${KERNEL_INSTALL_DIR}" \
	CGT_ARM_INSTALL_DIR="${CSTOOL_DIR}" \
	CGT_ARM_PREFIX="${CSTOOL_PREFIX}" \
	CGT_C674_ELF_INSTALL_DIR="${CODEGEN_INSTALL_DIR}" \
	USE_SYSLINK_NOTIFY=0 \
	clean

syslink_install:
	install -d $(EXEC_DIR)/syslink
	install ${SYSLINK_INSTALL_DIR}/packages/ti/syslink/bin/TI816X/syslink.ko $(EXEC_DIR)/syslink
	cp ${SYSLINK_INSTALL_DIR}/packages/ti/syslink/lib/syslink.a* $(EXEC_DIR)/syslink

##############################################################################
#  Build c6accel
##############################################################################
c6accel:
	XDCPATH=${C6ACCEL_XDCPATH} \
	$(MAKE) -C $(C6ACCEL_INSTALL_DIR) \
	PLATFORM="TI816X" \
	PLATFORM_XDC="ti.platforms.evmTI816X" \
	ARM_ISA=armv7-a \
	DSP_ISA=674 \
	CE_INSTALL_DIR="$(CE_INSTALL_DIR)" \
	XDAIS_INSTALL_DIR="$(XDAIS_INSTALL_DIR)" \
	LINK_INSTALL_DIR="$(SYSLINK_INSTALL_DIR)" \
	IPC_INSTALL_DIR="${IPC_INSTALL_DIR}" \
	OSAL_INSTALL_DIR="${OSAL_INSTALL_DIR}" \
	CMEM_INSTALL_DIR="$(CMEM_INSTALL_DIR)" \
	EDMA3_LLD_INSTALL_DIR="$(EDMA3_LLD_INSTALL_DIR)" \
	CODEGEN_INSTALL_DIR="$(CODEGEN_INSTALL_DIR)" \
	XDC_INSTALL_DIR="$(XDC_INSTALL_DIR)" \
	FC_INSTALL_DIR="$(FC_INSTALL_DIR)" \
	BIOS_INSTALL_DIR="$(SYSBIOS_INSTALL_DIR)" \
	C6ACCEL_INSTALL_DIR="$(C6ACCEL_INSTALL_DIR)" \
	CSTOOL_DIR="$(CSTOOL_DIR)" \
	CSTOOL_PREFIX="$(CSTOOL_PREFIX)" \
	all

c6accel_clean:
	$(MAKE) -C $(C6ACCEL_INSTALL_DIR) \
	PLATFORM="TI816X" \
	CE_INSTALL_DIR="$(CE_INSTALL_DIR)" \
	XDAIS_INSTALL_DIR="$(XDAIS_INSTALL_DIR)" \
	LINK_INSTALL_DIR="$(LINK_INSTALL_DIR)" \
	IPC_INSTALL_DIR="${IPC_INSTALL_DIR}" \
	OSAL_INSTALL_DIR="${OSAL_INSTALL_DIR}" \
	CMEM_INSTALL_DIR="$(CMEM_INSTALL_DIR)" \
	EDMA3_LLD_INSTALL_DIR="$(EDMA3_LLD_INSTALL_DIR)" \
	CODEGEN_INSTALL_DIR="$(CODEGEN_INSTALL_DIR)" \
	XDC_INSTALL_DIR="$(XDC_INSTALL_DIR)" \
	FC_INSTALL_DIR="$(FC_INSTALL_DIR)" \
	BIOS_INSTALL_DIR="$(BIOS_INSTALL_DIR)" \
	SERVER_INSTALL_DIR="$(CODEC_INSTALL_DIR)" \
	C6ACCEL_INSTALL_DIR="$(C6ACCEL_INSTALL_DIR)" \
	CSTOOL_DIR="$(CSTOOL_DIR)" \
	CSTOOL_PREFIX="$(CSTOOL_PREFIX)" \
	clean

c6accel_install:
	$(MAKE) -C $(C6ACCEL_INSTALL_DIR) \
	PLATFORM="TI816X" \
	CMEM_INSTALL_DIR="$(CMEM_INSTALL_DIR)" \
	LINK_INSTALL_DIR="$(SYSLINK_INSTALL_DIR)" \
	C6ACCEL_INSTALL_DIR="$(C6ACCEL_INSTALL_DIR)" \
	EXEC_DIR_C6ACCEL="$(EXEC_DIR)/c6accel" \
	install

################################################################################
# Build C6run
################################################################################
c6run:
	$(MAKE) -C $(C6RUN_INSTALL_DIR) \
	CODEGEN_INSTALL_DIR="$(CODEGEN_INSTALL_DIR)" \
	SYSBIOS_INSTALL_DIR="$(SYSBIOS_INSTALL_DIR)" \
	XDC_INSTALL_DIR="$(XDC_INSTALL_DIR)" \
	SYSLINK_INSTALL_DIR="$(SYSLINK_INSTALL_DIR)" \
	IPC_INSTALL_DIR="$(IPC_INSTALL_DIR)" \
	CMEM_INSTALL_DIR="$(CMEM_INSTALL_DIR)" \
	ARM_TOOLCHAIN_PATH="$(CSTOOL_DIR)" \
	ARM_TOOLCHAIN_PREFIX="arm-none-linux-gnueabi-" \
	TI816x_config

	$(MAKE) -C $(C6RUN_INSTALL_DIR) \
	CODEGEN_INSTALL_DIR="$(CODEGEN_INSTALL_DIR)" \
	SYSBIOS_INSTALL_DIR="$(SYSBIOS_INSTALL_DIR)" \
	XDC_INSTALL_DIR="$(XDC_INSTALL_DIR)" \
	SYSLINK_INSTALL_DIR="$(SYSLINK_INSTALL_DIR)" \
	IPC_INSTALL_DIR="$(IPC_INSTALL_DIR)" \
	CMEM_INSTALL_DIR="$(CMEM_INSTALL_DIR)" \
	ARM_TOOLCHAIN_PATH="$(CSTOOL_DIR)" \
	ARM_TOOLCHAIN_PREFIX="arm-none-linux-gnueabi-" \
	clean

	$(MAKE) -C $(C6RUN_INSTALL_DIR) \
	CODEGEN_INSTALL_DIR="$(CODEGEN_INSTALL_DIR)" \
	SYSBIOS_INSTALL_DIR="$(SYSBIOS_INSTALL_DIR)" \
	XDC_INSTALL_DIR="$(XDC_INSTALL_DIR)" \
	SYSLINK_INSTALL_DIR="$(SYSLINK_INSTALL_DIR)" \
	IPC_INSTALL_DIR="$(IPC_INSTALL_DIR)" \
	CMEM_INSTALL_DIR="$(CMEM_INSTALL_DIR)" \
	ARM_TOOLCHAIN_PATH="$(CSTOOL_DIR)" \
	ARM_TOOLCHAIN_PREFIX="arm-none-linux-gnueabi-" \
	all

c6run_clean:
	$(MAKE) -C $(C6RUN_INSTALL_DIR) \
	CODEGEN_INSTALL_DIR="$(CODEGEN_INSTALL_DIR)" \
	SYSBIOS_INSTALL_DIR="$(SYSBIOS_INSTALL_DIR)" \
	XDC_INSTALL_DIR="$(XDC_INSTALL_DIR)" \
	SYSLINK_INSTALL_DIR="$(SYSLINK_INSTALL_DIR)" \
	IPC_INSTALL_DIR="$(IPC_INSTALL_DIR)" \
	CMEM_INSTALL_DIR="$(CMEM_INSTALL_DIR)" \
	ARM_TOOLCHAIN_PATH="$(CSTOOL_DIR)" \
	ARM_TOOLCHAIN_PREFIX="arm-none-linux-gnueabi-" \
	distclean

c6run_examples:
	source $(C6RUN_INSTALL_DIR)/environment.sh; \
	$(MAKE) -C $(C6RUN_INSTALL_DIR) \
	CODEGEN_INSTALL_DIR="$(CODEGEN_INSTALL_DIR)" \
	SYSBIOS_INSTALL_DIR="$(SYSBIOS_INSTALL_DIR)" \
	XDC_INSTALL_DIR="$(XDC_INSTALL_DIR)" \
	SYSLINK_INSTALL_DIR="$(SYSLINK_INSTALL_DIR)" \
	IPC_INSTALL_DIR="$(IPC_INSTALL_DIR)" \
	CMEM_INSTALL_DIR="$(CMEM_INSTALL_DIR)" \
	ARM_TOOLCHAIN_PATH="$(CSTOOL_DIR)" \
	ARM_TOOLCHAIN_PREFIX="arm-none-linux-gnueabi-" \
	C6RUN_TOOLCHAIN_PATH="$(C6RUN_INSTALL_DIR)" \
	examples

	source $(C6RUN_INSTALL_DIR)/environment.sh; \
	$(MAKE) -C $(C6RUN_INSTALL_DIR) \
	CODEGEN_INSTALL_DIR="$(CODEGEN_INSTALL_DIR)" \
	SYSBIOS_INSTALL_DIR="$(SYSBIOS_INSTALL_DIR)" \
	XDC_INSTALL_DIR="$(XDC_INSTALL_DIR)" \
	SYSLINK_INSTALL_DIR="$(SYSLINK_INSTALL_DIR)" \
	IPC_INSTALL_DIR="$(IPC_INSTALL_DIR)" \
	CMEM_INSTALL_DIR="$(CMEM_INSTALL_DIR)" \
	ARM_TOOLCHAIN_PATH="$(CSTOOL_DIR)" \
	ARM_TOOLCHAIN_PREFIX="arm-none-linux-gnueabi-" \
	C6RUN_TOOLCHAIN_PATH="$(C6RUN_INSTALL_DIR)" \
	tests

c6run_install:
	install -d $(EXEC_DIR)/usr/share/ti/c6run-apps

	$(MAKE) -C $(C6RUN_INSTALL_DIR) \
	INSTALL_DIR="$(EXEC_DIR)/usr/share/ti/c6run-apps" \
	CODEGEN_INSTALL_DIR="$(CODEGEN_INSTALL_DIR)" \
	SYSBIOS_INSTALL_DIR="$(SYSBIOS_INSTALL_DIR)" \
	XDC_INSTALL_DIR="$(XDC_INSTALL_DIR)" \
	SYSLINK_INSTALL_DIR="$(SYSLINK_INSTALL_DIR)" \
	IPC_INSTALL_DIR="$(IPC_INSTALL_DIR)" \
	CMEM_INSTALL_DIR="$(CMEM_INSTALL_DIR)" \
	ARM_TOOLCHAIN_PATH="$(CSTOOL_DIR)" \
	ARM_TOOLCHAIN_PREFIX="arm-none-linux-gnueabi-" \
	install_programs

################################################################################
# Build Signal Analyzer demo
################################################################################

sademo:
	. $(LINUX_DEVKIT_DIR)/environment-setup; cd $(SADEMO_INSTALL_DIR); qmake; cd -
	$(MAKE) -C $(SADEMO_INSTALL_DIR)/app \
		ROOTDIR=$(DVSDK_INSTALL_DIR) \
	        PLATFORM="TI816X" \
		PLATFORM_XDC=ti.platforms.evmDM8168 \
		FFT_QT_GUI_INSTALL_DIR=$(SADEMO_INSTALL_DIR)
	. $(LINUX_DEVKIT_DIR)/environment-setup; $(MAKE) -C $(SADEMO_INSTALL_DIR) PLATFORM="TI816X" C6ACCEL_ROOT=$(C6ACCEL_INSTALL_DIR)

sademo_clean:
	$(MAKE) -C $(SADEMO_INSTALL_DIR)/app PLATFORM="TI816X" clean
	if [ -e $(SADEMO_INSTALL_DIR)/Makefile ]; then $(MAKE) -C $(SADEMO_INSTALL_DIR) PLATFORM="TI816X" distclean; fi

sademo_install: c6accel_install
	install -d $(EXEC_DIR)/signal-analyzer
	install $(SADEMO_INSTALL_DIR)/sigan_demo_app $(EXEC_DIR)/signal-analyzer
	install $(SADEMO_INSTALL_DIR)/app/scripts/bin/fft_demo_8khz.pcm $(EXEC_DIR)/signal-analyzer
	cd $(EXEC_DIR)/signal-analyzer; ln -s ../c6accel/test_files; cd -
	cd $(EXEC_DIR)/signal-analyzer; ln -s ../c6accel/ti816x.xe674; cd -

################################################################################
# Build Martix GUI Application Launcher
################################################################################
matrix:
	. $(DVSDK_INSTALL_DIR)/linux-devkit/environment-setup ; cd example-applications/matrix-gui-e* ; qmake ; $(MAKE) PLATFORM=ti816x

matrix_clean:
	. $(DVSDK_INSTALL_DIR)/linux-devkit/environment-setup;  cd example-applications/matrix-gui-e* ; qmake ; $(MAKE) distclean

matrix_install:
	install -d $(EXEC_DIR)/matrix
	install -m 0755 $(DVSDK_INSTALL_DIR)/example-applications/matrix-gui-e*/matrix_gui $(EXEC_DIR)/matrix
	cp  $(DVSDK_INSTALL_DIR)/example-applications/matrix-gui-e*/ti816x/bin/* \
        $(EXEC_DIR)/matrix/
	cp  $(DVSDK_INSTALL_DIR)/example-applications/matrix-gui-e*/ti816x/html/* \
        $(EXEC_DIR)/matrix/
	cp  $(DVSDK_INSTALL_DIR)/example-applications/matrix-gui-e*/images/* \
        $(EXEC_DIR)/matrix/


################################################################################
# Build OMX and IL Client Applications 
################################################################################

omx:
	make -C $(OMX_INSTALL_DIR)/packages libs \
		ROOTDIR=$(OMX_INSTALL_DIR)/packages \
		EXTERNAL_SW_ROOT=$(DVSDK_INSTALL_DIR)/component-sources \
		INTERNAL_SW_ROOT=$(OMX_INSTALL_DIR)/packages \
        kernel_PATH=${KERNEL_INSTALL_DIR} \
        bios_PATH=${SYSBIOS_INSTALL_DIR} \
		fc_PATH=$(FC_INSTALL_DIR) \
		osal_PATH=$(OSAL_INSTALL_DIR) \
        xdais_PATH=${XDAIS_INSTALL_DIR} \
		linuxutils_PATH=$(LINUXUTILS_INSTALL_DIR) \
        ce_PATH=${CE_INSTALL_DIR} \
		ipc_PATH=$(IPC_INSTALL_DIR) \
		syslink_PATH=$(SYSLINK_INSTALL_DIR) \
		xdc_PATH=$(XDC_INSTALL_DIR) \
		uia_PATH=$(UIA_INSTALL_DIR) \
        slog_PATH=${SLOG_INSTALL_DIR} \
        lindevkit_PATH=${LINUX_DEVKIT_DIR}/arm-none-linux-gnueabi/usr \
		PLATFORM=ti816x-evm \
		CODEGEN_PATH_A8=$(CSTOOL_DIR) \
        CODEGEN_PATH_DSPELF=${CODEGEN_INSTALL_DIR}
	make -C $(OMX_INSTALL_DIR)/packages examples \
		ROOTDIR=$(OMX_INSTALL_DIR)/packages \
		EXTERNAL_SW_ROOT=$(DVSDK_INSTALL_DIR)/component-sources \
		INTERNAL_SW_ROOT=$(OMX_INSTALL_DIR)/packages \
        kernel_PATH=${KERNEL_INSTALL_DIR} \
        bios_PATH=${SYSBIOS_INSTALL_DIR} \
		fc_PATH=$(FC_INSTALL_DIR) \
		osal_PATH=$(OSAL_INSTALL_DIR) \
        xdais_PATH=${XDAIS_INSTALL_DIR} \
		linuxutils_PATH=$(LINUXUTILS_INSTALL_DIR) \
        ce_PATH=${CE_INSTALL_DIR} \
		ipc_PATH=$(IPC_INSTALL_DIR) \
		syslink_PATH=$(SYSLINK_INSTALL_DIR) \
		xdc_PATH=$(XDC_INSTALL_DIR) \
		uia_PATH=$(UIA_INSTALL_DIR) \
        slog_PATH=${SLOG_INSTALL_DIR} \
        lindevkit_PATH=${LINUX_DEVKIT_DIR}/arm-none-linux-gnueabi/usr \
		PLATFORM=ti816x-evm \
		CODEGEN_PATH_A8=$(CSTOOL_DIR) \
        CODEGEN_PATH_DSPELF=${CODEGEN_INSTALL_DIR} \
        EXAMPLES_ROOT=${OMX_INSTALL_DIR}/packages \
		DEST_ROOT=$(OMX_INSTALL_DIR)/bin

omx_clean:
	rm -rf $(OMX_INSTALL_DIR)/bin ${OMX_INSTALL_DIR}/lib
	make -C $(OMX_INSTALL_DIR)/packages clean \
		ROOTDIR=$(OMX_INSTALL_DIR)/packages \
		EXTERNAL_SW_ROOT=$(DVSDK_INSTALL_DIR)/component-sources \
		INTERNAL_SW_ROOT=$(OMX_INSTALL_DIR)/packages \
        kernel_PATH=${KERNEL_INSTALL_DIR} \
        bios_PATH=${SYSBIOS_INSTALL_DIR} \
		fc_PATH=$(FC_INSTALL_DIR) \
		osal_PATH=$(OSAL_INSTALL_DIR) \
        xdais_PATH=${XDAIS_INSTALL_DIR} \
		linuxutils_PATH=$(LINUXUTILS_INSTALL_DIR) \
        ce_PATH=${CE_INSTALL_DIR} \
		ipc_PATH=$(IPC_INSTALL_DIR) \
		syslink_PATH=$(SYSLINK_INSTALL_DIR) \
		xdc_PATH=$(XDC_INSTALL_DIR) \
		uia_PATH=$(UIA_INSTALL_DIR) \
        slog_PATH=${SLOG_INSTALL_DIR} \
        lindevkit_PATH=${LINUX_DEVKIT_DIR}/arm-none-linux-gnueabi/usr \
		PLATFORM=ti816x-evm \
		CODEGEN_PATH_A8=$(CSTOOL_DIR) \
        CODEGEN_PATH_DSPELF=${CODEGEN_INSTALL_DIR} \
        EXAMPLES_ROOT=${OMX_INSTALL_DIR}/packages \

omx_install:
	install -d $(EXEC_DIR)/omx
	for i in `find ${OMX_INSTALL_DIR}/bin -name "*.xv5T"`; do \
		install $$i ${EXEC_DIR}/omx; \
	done

################################################################################
# Build OMTB IL Client Applications 
################################################################################

omtb:
	make -C $(OMTB_INSTALL_DIR) dm816xbm \
		ROOTDIR=$(OMTB_INSTALL_DIR) \
		OMTB_ROOT=$(OMTB_INSTALL_DIR) \
		EZSDK_INSTALL_DIR=$(DVSDK_INSTALL_DIR) \
		DEST_ROOT=$(OMTB_INSTALL_DIR)/bin \
		OMX_INSTALL_DIR=$(OMX_INSTALL_DIR)/packages \
		fc_PATH=$(FC_INSTALL_DIR) \
		uia_PATH=$(UIA_INSTALL_DIR) \
		ce_PATH=$(CE_INSTALL_DIR) \
		osal_PATH=$(OSAL_INSTALL_DIR) \
		linuxutils_PATH=$(LINUXUTILS_INSTALL_DIR) \
		ipc_PATH=$(IPC_INSTALL_DIR) \
		syslink_PATH=$(SYSLINK_INSTALL_DIR) \
		xdc_PATH=$(XDC_INSTALL_DIR) \
		lindevkit_PATH=$(LINUX_DEVKIT_DIR)/arm-none-linux-gnueabi/usr \
		CODEGEN_PATH_A8=$(CSTOOL_DIR)

omtb_clean:
	make -C $(OMTB_INSTALL_DIR) clean_dm816xbm \
		ROOTDIR=$(OMTB_INSTALL_DIR) \
		OMTB_ROOT=$(OMTB_INSTALL_DIR) \
		EZSDK_INSTALL_DIR=$(DVSDK_INSTALL_DIR) \
		DEST_ROOT=$(OMTB_INSTALL_DIR)/bin \
		OMX_INSTALL_DIR=$(OMX_INSTALL_DIR)/packages \
		fc_PATH=$(FC_INSTALL_DIR) \
		ce_PATH=$(CE_INSTALL_DIR) \
		uia_PATH=$(UIA_INSTALL_DIR) \
		osal_PATH=$(OSAL_INSTALL_DIR) \
		linuxutils_PATH=$(LINUXUTILS_INSTALL_DIR) \
		ipc_PATH=$(IPC_INSTALL_DIR) \
		syslink_PATH=$(SYSLINK_INSTALL_DIR) \
		xdc_PATH=$(XDC_INSTALL_DIR) \
		lindevkit_PATH==$(LINUX_DEVKIT_DIR)/arm-none-linux-gnueabi/usr \
		CODEGEN_PATH_A8=$(TOOLCHAIN_PATH)

omtb_install:
	install -d $(EXEC_DIR)/omtb
	install $(OMTB_INSTALL_DIR)/bin/dm816xbm/bin/ti816x-evm/omtb_dm816xbm_a8host.xv5T $(EXEC_DIR)/omtb

################################################################################
# Build the DSP image library
################################################################################
imglib:
	make -C $(IMGLIB_INSTALL_DIR) \
		IMGLIB_INSTALL_DIR=$(IMGLIB_INSTALL_DIR) \
		CODEGEN_INSTALL_DIR=$(CODEGEN_INSTALL_DIR) \
		BUILD_TYPE=Release_elf

imglib_clean:
	make -C $(IMGLIB_INSTALL_DIR) \
		IMGLIB_INSTALL_DIR=$(IMGLIB_INSTALL_DIR) \
		CODEGEN_INSTALL_DIR=$(CODEGEN_INSTALL_DIR) \
		BUILD_TYPE=Release_elf \
		clean

################################################################################
# Build the DSP library
################################################################################
dsplib:
	make -C $(DSPLIB_INSTALL_DIR) \
		DSPLIBC674x_INSTALL_DIR=$(DSPLIB_INSTALL_DIR) \
		CODEGEN_INSTALL_DIR=$(CODEGEN_INSTALL_DIR) \
		BUILD_TYPE=Release_elf

dsplib_clean:
	make -C $(DSPLIB_INSTALL_DIR) \
		DSPLIBC674x_INSTALL_DIR=$(DSPLIB_INSTALL_DIR) \
		CODEGEN_INSTALL_DIR=$(CODEGEN_INSTALL_DIR) \
		BUILD_TYPE=Release_elf \
		clean

################################################################################
# Build the DSP math library
################################################################################
mathlib:
	make -C $(MATHLIB_INSTALL_DIR) \
		MATHLIB_INSTALL_DIR=$(MATHLIB_INSTALL_DIR) \
		CODEGEN_INSTALL_DIR=$(CODEGEN_INSTALL_DIR) \
		BUILD_TYPE=C674x_elf

mathlib_clean:
	make -C $(MATHLIB_INSTALL_DIR) \
		MATHLIB_INSTALL_DIR=$(MATHLIB_INSTALL_DIR) \
		CODEGEN_INSTALL_DIR=$(CODEGEN_INSTALL_DIR) \
		BUILD_TYPE=C674x_elf \
		clean
