include Rules.make

COMPONENTS:=$(DMAI_INSTALL_DIR) $(LPM_INSTALL_DIR) $(LINK_INSTALL_DIR) $(XDAIS_INSTALL_DIR) $(CMEM_INSTALL_DIR) $(FC_INSTALL_DIR) $(CE_INSTALL_DIR) $(XDC_INSTALL_DIR) $(BIOSUTILS_INSTALL_DIR) $(BIOS_INSTALL_DIR) $(CODEC_INSTALL_DIR)

REPOSITORIES:=$(addsuffix /packages, $(COMPONENTS))

CHECKLIST:=$(REPOSITORIES) $(CODEGEN_INSTALL_DIR)/bin/cl6x $(MVTOOL_PREFIX)gcc $(LINUXKERNEL_INSTALL_DIR)/Documentation $(DEMO_INSTALL_DIR)/$(PLATFORM) $(UBOOT_INSTALL_DIR)/doc

.PHONY:	all clean everything clobber help cmem cmem_clean dmai dmai_clean demos demos_clean examples examples_clean dvtb dvtb_clean dm355mm dm355mm_clean dsplink dsplink_arm dsplink_dsp dsplink_samples dsplink_clean codecs codecs_clean linux linux_clean psp_examples psp_clean info check install

#==============================================================================
# Set up platform dependent variables.
#==============================================================================
ifeq ($(PLATFORM),dm6446)
LINUXKERNEL_CONFIG=davinci_dm644x_defconfig
LINUXSAMPLES_PLATFORM=dm644x
DSPLINK_CONFIG=--platform=DAVINCI --nodsp=1 --dspcfg_0=DM6446GEMSHMEM --dspos_0=DSPBIOS5XX --gppos=MVL5G --comps=ponslrm
DSPLINK_MODULE=$(LINK_INSTALL_DIR)/packages/dsplink/gpp/export/BIN/Linux/DAVINCI/RELEASE/dsplinkk.ko
else
ifeq ($(PLATFORM),dm6467)
LINUXKERNEL_CONFIG=davinci_dm6467_defconfig
LINUXSAMPLES_PLATFORM=dm646x
DSPLINK_CONFIG=--platform=DAVINCIHD --nodsp=1 --dspcfg_0=DM6467GEMSHMEM --dspos_0=DSPBIOS5XX --gppos=MVL5G --comps=ponslrm
DSPLINK_MODULE=$(LINK_INSTALL_DIR)/packages/dsplink/gpp/export/BIN/Linux/DAVINCIHD/RELEASE/dsplinkk.ko
else
ifeq ($(PLATFORM),omap3530)
LINUXKERNEL_CONFIG=omap3_evm_defconfig
UBOOT_CONFIG=omap3_evm_config
LINUXSAMPLES_PLATFORM=omap3530
DSPLINK_CONFIG=--platform=OMAP3530 --nodsp=1 --dspcfg_0=OMAP3530SHMEM --dspos_0=DSPBIOS5XX --gppos=OMAPLSP --comps=ponslrmc
DSPLINK_MODULE=$(LINK_INSTALL_DIR)/packages/dsplink/gpp/export/BIN/Linux/OMAP3530/RELEASE/dsplinkk.ko
else
ifeq ($(PLATFORM),dm355)
LINUXKERNEL_CONFIG=davinci_dm355_defconfig
LINUXSAMPLES_PLATFORM=dm355
else
	$(error PLATFORM not set correctly: $(PLATFORM))
endif
endif
endif
endif

#==============================================================================
# The default build target.
#==============================================================================
all:	check cmem lpm codecs dmai demos examples dvtb

#==============================================================================
# Clean up the targets built by 'make all'.
#==============================================================================
clean:	cmem_clean codecs_clean dmai_clean demos_clean examples_clean dvtb_clean

#==============================================================================
# Build everything rebuildable.
#==============================================================================
everything: check linux dsplink psp_examples all

#==============================================================================
# Clean up all targets.
#==============================================================================
clobber:	clean uboot_clean dsplink_clean linux_clean codecs_clean psp_clean

#==============================================================================
# A help message target.
#==============================================================================
help:
	@echo
	@echo "Available build targets are:"
	@echo
	@echo "    check		   : Make sure Rules.make is set up properly"
	@echo "    info			   : List versions of DVSDK components"
	@echo
	@echo "    all			   : Build the components below"
	@echo "    clean		   : Remove files generated by the 'all' target"
	@echo
	@echo "    cmem			   : Build the CMEM kernel module for $(PLATFORM)"
	@echo "    cmem_clean	   : Remove generated cmem files."
	@echo
	@echo "    dmai			   : Build DMAI for $(PLATFORM)_al"
	@echo "    dmai_clean	   : Remove generated DMAI files."
	@echo
	@echo "    lpm			   : Build LPM for $(PLATFORM)"
	@echo "    lpm_clean	   : Remove generated lpm files."
	@echo
	@echo "    demos		   : Build the DVSDK demos for $(PLATFORM)"
	@echo "    demos_clean	   : Remove generated DVSDK demo files."
	@echo
	@echo "    examples		   : Build examples for $(PLATFORM)"
	@echo "    examples_clean  : Build examples for $(PLATFORM)"
	@echo
	@echo "    dvtb			   : Build DVTB for $(PLATFORM)"
	@echo "    dvtb_clean	   : Remove generated DVTB files"
	@echo
	@echo "The following targets have to be explicitly built and cleaned:"
	@echo
	@echo "    dsplink		   : Configure and build DSP Link for $(PLATFORM) ARM and DSP"
	@echo "    dsplink_arm	   : Configure and build DSP Link for $(PLATFORM) ARM"
	@echo "    dsplink_dsp	   : Configure and build DSP Link for $(PLATFORM) DSP"
	@echo "    dsplink_samples : Build DSP Link ARM and DSP sample applications for $(PLATFORM)"
	@echo "    dsplink_clean   : Remove generated DSP Link files"@echo
	@echo
	@echo "    everything	   : Rebuild everything including below targets"
	@echo "    clobber		   : Remove all generated files"
	@echo
	@echo "    codecs		   : Build codec servers for $(PLATFORM)"
	@echo "    codecs_clean    : Remove generated codec server files"
	@echo
	@echo "    uboot		   : Build uboot for $(PLATFORM)"
	@echo "    uboot_clean	   : Remove generated uboot files"
	@echo
	@echo "    linux		   : Build Linux kernel uImage for $(PLATFORM)"
	@echo "    linux_clean	   : Remove generated Linux kernel files"
	@echo
	@echo "    psp_examples    : Build Linux examples for $(PLATFORM)"
	@echo "    psp_clean	   : Build Linux examples for $(PLATFORM)"
	@echo
	@echo "    install		   : Install binaries to $(EXEC_DIR)"
	@echo

#==============================================================================
# Target for listing information about the DVSDK components.
#==============================================================================
info:	check
	@LINUXKERNEL_INSTALL_DIR="$(LINUXKERNEL_INSTALL_DIR)" CODEGEN_INSTALL_DIR="$(CODEGEN_INSTALL_DIR)" GCC_PREFIX="$(MVTOOL_PREFIX)" XDC_INSTALL_DIR="$(XDC_INSTALL_DIR)" REPOSITORIES="$(REPOSITORIES)" $(DVSDK_INSTALL_DIR)/bin/info.sh 

#==============================================================================
# Target for checking that the Rules.make file is set up properly.
#==============================================================================
check:
	@CHECKLIST="$(CHECKLIST)" $(DVSDK_INSTALL_DIR)/bin/check.sh

#==============================================================================
# Build the dvsdk demos for the configured platform. Also, an explicit cleanup
# target is defined.
#==============================================================================
demos: 
	$(MAKE) -C $(DEMO_INSTALL_DIR)

demos_clean:
	$(MAKE) -C $(DEMO_INSTALL_DIR) clean

#==============================================================================
# Build LPM for the configured platform. Also, an explicit cleanup
# target is defined.
#==============================================================================
lpm:
	$(MAKE) -C $(LPM_INSTALL_DIR)/packages/ti/bios/power/modules/omap3530/lpm \
		LINUXKERNEL_INSTALL_DIR=$(LINUXKERNEL_INSTALL_DIR) \
		MVTOOL_PREFIX=$(CSTOOL_PREFIX) \
		DSPLINK_REPO=$(LINK_INSTALL_DIR)/packages

lpm_clean:
	$(MAKE)  -C $(LPM_INSTALL_DIR)/packages/ti/bios/power/modules/omap3530/lpm \
	LINUXKERNEL_INSTALL_DIR=$(LINUXKERNEL_INSTALL_DIR) MVTOOL_PREFIX=$(CSTOOL_PREFIX) \
	DSPLINK_REPO=$(LINK_INSTALL_DIR)/packages clean

#==============================================================================
# Build the Digital Video Test Bench for the configured platform. Also, an
# explicit cleanup target is defined.
#==============================================================================
dvtb:
	$(MAKE) -C $(DVTB_INSTALL_DIR) CONFIGPKG=$(PLATFORM)
	@echo
	@echo "dvtb can be found under $(DVTB_INSTALL_DIR)"

dvtb_clean:
	$(MAKE) -C $(DVTB_INSTALL_DIR) clean CONFIGPKG=$(PLATFORM)

#==============================================================================
# Build the uboot. Also, an explicit cleanup target is defined.
#==============================================================================
uboot:
	$(MAKE) -C $(UBOOT_INSTALL_DIR) CROSS_COMPILE=$(MVTOOL_PREFIX) $(UBOOT_CONFIG)
	$(MAKE) -C $(UBOOT_INSTALL_DIR) CROSS_COMPILE=$(MVTOOL_PREFIX)

uboot_clean:
	$(MAKE) -C $(UBOOT_INSTALL_DIR) CROSS_COMPILE=$(MVTOOL_PREFIX) distclean

#==============================================================================
#==============================================================================
# Build the Linux kernel. Also, an explicit cleanup target is defined.
#==============================================================================
linux: uboot
	$(MAKE) -C $(LINUXKERNEL_INSTALL_DIR) CROSS_COMPILE=$(MVTOOL_PREFIX) $(LINUXKERNEL_CONFIG)
	$(MAKE) -C $(LINUXKERNEL_INSTALL_DIR) CROSS_COMPILE=$(MVTOOL_PREFIX) PATH=$(UBOOT_INSTALL_DIR)/tools:$(PATH) uImage
	@echo
	@echo "Your kernel image can be found at $(LINUXKERNEL_INSTALL_DIR)/arch/arm/boot/uImage"

linux_clean:
	$(MAKE) -C $(LINUXKERNEL_INSTALL_DIR) CROSS_COMPILE=$(MVTOOL_PREFIX) clean

#==============================================================================
# Build the PSP Linux examples. Also, an explicit cleanup target is defined.
#==============================================================================
psp_examples:
	$(MAKE) -C $(OMAP3503_SDK_INSTALL_DIR)/src/examples/video  KERNEL_DIR=$(LINUXKERNEL_INSTALL_DIR) CROSS_COMPILE=$(MVTOOL_PREFIX)
	$(MAKE) -C $(OMAP3503_SDK_INSTALL_DIR)/src/examples/audio  KERNEL_DIR=$(LINUXKERNEL_INSTALL_DIR) CROSS_COMPILE=$(MVTOOL_PREFIX) LIB_INC=$(LINUXLIBS_INSTALL_DIR)/include LIB_DIR=$(LINUXLIBS_INSTALL_DIR)/lib

	@echo
	@echo "PSP examples can be found under $(OMAP3503_SDK_INSTALL_DIR)/src/examples/"

psp_clean:
	$(MAKE) -C $(OMAP3503_SDK_INSTALL_DIR)/src/examples/video  KERNEL_DIR=$(LINUXKERNEL_INSTALL_DIR) clean
	$(MAKE) -C $(OMAP3503_SDK_INSTALL_DIR)/src/examples/audio  KERNEL_DIR=$(LINUXKERNEL_INSTALL_DIR) clean

#==============================================================================
# Build the CMEM kernel module for the configured platform, and make sure the
# kernel_binaries directory is kept in sync. Also, an explicit cleanup target
# is defined.
#==============================================================================
cmem:
	$(MAKE) -C $(CMEM_INSTALL_DIR)/packages/ti/sdo/linuxutils/cmem/src/interface ../../lib/cmem.a470MV
	$(MAKE) -C $(CMEM_INSTALL_DIR)/packages/ti/sdo/linuxutils/cmem/src/module
	$(MAKE) -C $(CMEM_INSTALL_DIR)/packages/ti/sdo/linuxutils/sdma/src/module

cmem_clean:
	$(MAKE) -C $(CMEM_INSTALL_DIR)/packages/ti/sdo/linuxutils/cmem/src/module clean
	$(MAKE) -C $(CMEM_INSTALL_DIR)/packages/ti/sdo/linuxutils/cmem/src/interface clean
	$(MAKE) -C $(CMEM_INSTALL_DIR)/packages/ti/sdo/linuxutils/sdma/src/module clean

#==============================================================================
# Build the codec servers for the configured platform. Also, an
# explicit cleanup target is defined.
#==============================================================================
codecs:
ifneq ($(PLATFORM),dm355)
	$(MAKE) -C $(CODEC_INSTALL_DIR) DVSDK_INSTALL_DIR=$(DVSDK_INSTALL_DIR) BIOS_INSTALL_DIR=$(BIOS_INSTALL_DIR) XDC_INSTALL_DIR=$(XDC_INSTALL_DIR) CE_INSTALL_DIR=$(CE_INSTALL_DIR) FC_INSTALL_DIR=$(FC_INSTALL_DIR) CMEM_INSTALL_DIR=$(CMEM_INSTALL_DIR) CODEC_INSTALL_DIR=$(CODEC_INSTALL_DIR) BIOSUTILS_INSTALL_DIR=$(BIOSUTILS_INSTALL_DIR) XDAIS_INSTALL_DIR=$(XDAIS_INSTALL_DIR) LINK_INSTALL_DIR=$(LINK_INSTALL_DIR) XDCARGS=\"prod\"
endif

codecs_clean:
ifneq ($(PLATFORM),dm355)
	$(MAKE) -C $(CODEC_INSTALL_DIR) DVSDK_INSTALL_DIR=$(DVSDK_INSTALL_DIR) BIOS_INSTALL_DIR=$(BIOS_INSTALL_DIR) XDC_INSTALL_DIR=$(XDC_INSTALL_DIR) CE_INSTALL_DIR=$(CE_INSTALL_DIR) FC_INSTALL_DIR=$(FC_INSTALL_DIR) CMEM_INSTALL_DIR=$(CMEM_INSTALL_DIR) CODEC_INSTALL_DIR=$(CODEC_INSTALL_DIR) BIOSUTILS_INSTALL_DIR=$(BIOSUTILS_INSTALL_DIR) XDAIS_INSTALL_DIR=$(XDAIS_INSTALL_DIR) LINK_INSTALL_DIR=$(LINK_INSTALL_DIR) XDCARGS=\"prod\" clean
endif

#==============================================================================
# Build the DVSDK examples for the configured platform. Also, an explicit
# cleanup target is defined.
#==============================================================================
examples:
	$(MAKE) -C examples/$(PLATFORM)

examples_clean:
	$(MAKE) -C examples/$(PLATFORM) clean

#==============================================================================
# Build the Davinci Multimedia Application Interface for the configured
# platform. Also, an explicit cleanup target is defined.
#==============================================================================
dmai:  
	$(MAKE) -C $(DMAI_INSTALL_DIR)	PLATFORM=o3530_al \
	CE_INSTALL_DIR_o3530_al=$(CE_INSTALL_DIR) \
	CODEC_INSTALL_DIR_o3530_al=$(CODEC_INSTALL_DIR) \
	LINK_INSTALL_DIR_o3530_al=$(LINK_INSTALL_DIR) \
	CMEM_INSTALL_DIR_o3530_al=$(CMEM_INSTALL_DIR) \
	FC_INSTALL_DIR_o3530_al=$(FC_INSTALL_DIR) \
	LPM_INSTALL_DIR_o3530_al=$(LPM_INSTALL_DIR) \
	XDAIS_INSTALL_DIR_o3530_al=$(XDAIS_INSTALL_DIR) \
	BIOS_INSTALL_DIR_o3530_al=$(BIOS_INSTALL_DIR) \
	LINUXLIBS_INSTALL_DIR_o3530_al=$(LINUXLIBS_INSTALL_DIR) \
	LINUXKERNEL_INSTALL_DIR_o3530_al=$(LINUXKERNEL_INSTALL_DIR) \
	CROSS_COMPILE_o3530_al=$(CSTOOL_PREFIX) \
	XDC_INSTALL_DIR_o3530_al=$(XDC_INSTALL_DIR) \
	EXEC_DIR_o3530_al=$(EXEC_DIR) all
	

dmai_clean:
	@$(MAKE) -C $(DMAI_INSTALL_DIR) PLATFORM=o3530_al \
	CE_INSTALL_DIR_o3530_al=$(CE_INSTALL_DIR) \
	CODEC_INSTALL_DIR_o3530_al=$(CODEC_INSTALL_DIR)  \
	LINK_INSTALL_DIR_o3530_al=$(LINK_INSTALL_DIR) \
	CMEM_INSTALL_DIR_o3530_al=$(CMEM_INSTALL_DIR) \
	FC_INSTALL_DIR_o3530_al=$(FC_INSTALL_DIR) \
	LPM_INSTALL_DIR_o3530_al=$(LPM_INSTALL_DIR) \
	XDAIS_INSTALL_DIR_o3530_al=$(XDAIS_INSTALL_DIR) \
	BIOS_INSTALL_DIR_o3530_al=$(BIOS_INSTALL_DIR) \
	LINUXLIBS_INSTALL_DIR_o3530_al=$(LINUXLIBS_INSTALL_DIR) \
	LINUXKERNEL_INSTALL_DIR_o3530_al=$(LINUXKERNEL_INSTALL_DIR) \
	CROSS_COMPILE_o3530_al=$(CSTOOL_PREFIX) \
	XDC_INSTALL_DIR_o3530_al=$(XDC_INSTALL_DIR) \
	EXEC_DIR_o3530_al=$(EXEC_DIR) clean


#==============================================================================
# Build DSP Link for the configured platform. Also, an explicit cleanup target
# is defined.
#==============================================================================
dsplink:	dsplink_arm dsplink_dsp dsplink_samples

dsplink_cfg:
ifneq ($(PLATFORM),dm355)
	DSPLINK=$(LINK_INSTALL_DIR)/packages/dsplink perl $(LINK_INSTALL_DIR)/packages/dsplink/config/bin/dsplinkcfg.pl $(DSPLINK_CONFIG)
else
	$(error DSP Link build is not supported for $(PLATFORM))
endif

dsplink_arm:	dsplink_cfg
	DSPLINK=$(LINK_INSTALL_DIR)/packages/dsplink $(XDC_INSTALL_DIR)/gmake -C $(LINK_INSTALL_DIR)/packages/dsplink/gpp/src/api BASE_TOOLCHAIN=$(CSTOOL_DIR) BASE_BUILDOS=$(LINUXKERNEL_INSTALL_DIR) KERNEL_DIR=$(LINUXKERNEL_INSTALL_DIR) TOOL_PATH=$(CSTOOL_DIR)/bin debug
	DSPLINK=$(LINK_INSTALL_DIR)/packages/dsplink $(XDC_INSTALL_DIR)/gmake -C $(LINK_INSTALL_DIR)/packages/dsplink/gpp/src/api BASE_TOOLCHAIN=$(CSTOOL_DIR) BASE_BUILDOS=$(LINUXKERNEL_INSTALL_DIR) KERNEL_DIR=$(LINUXKERNEL_INSTALL_DIR) TOOL_PATH=$(CSTOOL_DIR)/bin release
	DSPLINK=$(LINK_INSTALL_DIR)/packages/dsplink $(XDC_INSTALL_DIR)/gmake -C $(LINK_INSTALL_DIR)/packages/dsplink/gpp/src BASE_TOOLCHAIN=$(CSTOOL_DIR) BASE_BUILDOS=$(LINUXKERNEL_INSTALL_DIR) KERNEL_DIR=$(LINUXKERNEL_INSTALL_DIR) TOOL_PATH=$(CSTOOL_DIR)/bin debug
	DSPLINK=$(LINK_INSTALL_DIR)/packages/dsplink $(XDC_INSTALL_DIR)/gmake -C $(LINK_INSTALL_DIR)/packages/dsplink/gpp/src BASE_TOOLCHAIN=$(CSTOOL_DIR) BASE_BUILDOS=$(LINUXKERNEL_INSTALL_DIR) KERNEL_DIR=$(LINUXKERNEL_INSTALL_DIR) TOOL_PATH=$(CSTOOL_DIR)/bin release
	@echo

dsplink_dsp:	dsplink_cfg
	DSPLINK=$(LINK_INSTALL_DIR)/packages/dsplink $(XDC_INSTALL_DIR)/gmake -C $(LINK_INSTALL_DIR)/packages/dsplink/dsp/src BASE_SABIOS=$(BIOS_INSTALL_DIR) XDCTOOLS_DIR=$(XDC_INSTALL_DIR) BASE_CGTOOLS=$(CODEGEN_INSTALL_DIR) debug
	DSPLINK=$(LINK_INSTALL_DIR)/packages/dsplink $(XDC_INSTALL_DIR)/gmake -C $(LINK_INSTALL_DIR)/packages/dsplink/dsp/src BASE_SABIOS=$(BIOS_INSTALL_DIR) XDCTOOLS_DIR=$(XDC_INSTALL_DIR) BASE_CGTOOLS=$(CODEGEN_INSTALL_DIR) release

dsplink_samples:
	DSPLINK=$(LINK_INSTALL_DIR)/packages/dsplink $(XDC_INSTALL_DIR)/gmake -C $(LINK_INSTALL_DIR)/packages/dsplink/gpp/src/samples BASE_TOOLCHAIN=$(CSTOOL_DIR) BASE_BUILDOS=$(LINUXKERNEL_INSTALL_DIR)
	DSPLINK=$(LINK_INSTALL_DIR)/packages/dsplink $(XDC_INSTALL_DIR)/gmake -C $(LINK_INSTALL_DIR)/packages/dsplink/dsp/src/samples BASE_SABIOS=$(BIOS_INSTALL_DIR) XDCTOOLS_DIR=$(XDC_INSTALL_DIR) BASE_CGTOOLS=$(CODEGEN_INSTALL_DIR)

dsplink_clean:
	DSPLINK=$(LINK_INSTALL_DIR)/packages/dsplink $(XDC_INSTALL_DIR)/gmake -C $(LINK_INSTALL_DIR)/packages/dsplink/gpp/src/api BASE_TOOLCHAIN=$(CSTOOL_DIR) BASE_BUILDOS=$(LINUXKERNEL_INSTALL_DIR) clean
	DSPLINK=$(LINK_INSTALL_DIR)/packages/dsplink $(XDC_INSTALL_DIR)/gmake -C $(LINK_INSTALL_DIR)/packages/dsplink/gpp/src BASE_TOOLCHAIN=$(CSTOOL_DIR) BASE_BUILDOS=$(LINUXKERNEL_INSTALL_DIR) clean
	DSPLINK=$(LINK_INSTALL_DIR)/packages/dsplink $(XDC_INSTALL_DIR)/gmake -C $(LINK_INSTALL_DIR)/packages/dsplink/dsp/src BASE_SABIOS=$(BIOS_INSTALL_DIR) XDCTOOLS_DIR=$(XDC_INSTALL_DIR) BASE_CGTOOLS=$(CODEGEN_INSTALL_DIR) clean
	DSPLINK=$(LINK_INSTALL_DIR)/packages/dsplink $(XDC_INSTALL_DIR)/gmake -C $(LINK_INSTALL_DIR)/packages/dsplink/gpp/src/samples BASE_TOOLCHAIN=$(CSTOOL_DIR) BASE_BUILDOS=$(LINUXKERNEL_INSTALL_DIR) clean
	DSPLINK=$(LINK_INSTALL_DIR)/packages/dsplink $(XDC_INSTALL_DIR)/gmake -C $(LINK_INSTALL_DIR)/packages/dsplink/dsp/src/samples BASE_SABIOS=$(BIOS_INSTALL_DIR) XDCTOOLS_DIR=$(XDC_INSTALL_DIR) BASE_CGTOOLS=$(CODEGEN_INSTALL_DIR) clean

#==============================================================================
# Install the built binaries to the target file system.
#==============================================================================
install:
	@echo
	@echo Creating $(EXEC_DIR)
	@mkdir -p $(EXEC_DIR)


	@echo Installing DVSDK demos..
	$(MAKE) -C $(DEMO_INSTALL_DIR)/$(PLATFORM) install


	@echo Installing clips..
	$(MAKE) -C clips install

ifeq ($(PLATFORM),dm6446)
	@echo Copying codec servers..
	@install -m 666 $(CODEC_INSTALL_DIR)/packages/ti/sdo/servers/encode/encodeCombo.x64P $(EXEC_DIR)/
	@install -m 666 $(CODEC_INSTALL_DIR)/packages/ti/sdo/servers/decode/decodeCombo.x64P $(EXEC_DIR)/
	@install -m 666 $(CODEC_INSTALL_DIR)/packages/ti/sdo/servers/loopback/loopbackCombo.x64P $(EXEC_DIR)/
	@echo Copying dsplinkk.ko
	@install -m 666 $(LINK_INSTALL_DIR)/packages/dsplink/gpp/export/BIN/Linux/DAVINCI/RELEASE/dsplinkk.ko $(EXEC_DIR)/
endif

ifeq ($(PLATFORM),dm6467)
	@echo Copying codec servers..
	@install -m 666 $(CODEC_INSTALL_DIR)/packages/ti/sdo/servers/encode/encodeCombo.x64P $(EXEC_DIR)/
	@install -m 666 $(CODEC_INSTALL_DIR)/packages/ti/sdo/servers/decode/decodeCombo.x64P $(EXEC_DIR)/
	@install -m 666 $(CODEC_INSTALL_DIR)/packages/ti/sdo/servers/loopback/loopbackCombo.x64P $(EXEC_DIR)/
	@echo Copying dsplinkk.ko
	@install -m 666 $(LINK_INSTALL_DIR)/packages/dsplink/gpp/export/BIN/Linux/DAVINCIHD/RELEASE/dsplinkk.ko $(EXEC_DIR)/
	@echo Copying mapdmaqhd..
	@install -m 777 $(DVSDK_INSTALL_DIR)/mapdmaq-hd/mapdmaq-hd $(EXEC_DIR)/
endif

ifeq ($(PLATFORM),dm355)
	@echo Copying mapdmaq..
	@install -m 777 $(DVSDK_INSTALL_DIR)/mapdmaq/mapdmaq $(EXEC_DIR)/
endif

ifeq ($(PLATFORM),omap3530)
	@echo
	@echo Copying kernel modules to target file system: $(EXEC_DIR)/
	@echo Copying cmemk.ko
	@install -m 755 $(CMEM_INSTALL_DIR)/packages/ti/sdo/linuxutils/cmem/src/module/cmemk.ko $(EXEC_DIR)/
	@echo Copying dsplinkk.ko
	@install -m 755 $(LINK_INSTALL_DIR)/packages/dsplink/gpp/export/BIN/Linux/OMAP3530/RELEASE/dsplinkk.ko $(EXEC_DIR)/
	@echo Copying lpm_omap3530.ko
	@install -m 755 $(LPM_INSTALL_DIR)/packages/ti/bios/power/modules/omap3530/lpm/lpm_omap3530.ko $(EXEC_DIR)/
	@echo Copying sdmak.ko
	@install -m 755 $(CMEM_INSTALL_DIR)/packages/ti/sdo/linuxutils/sdma/src/module/sdmak.ko $(EXEC_DIR)/
	@echo Copying codec servers from $(CODEC_INSTALL_DIR)
	@install -m 755 $(CODEC_INSTALL_DIR)/packages/ti/sdo/server/cs/bin/cs.x64P $(EXEC_DIR)/
	@chmod -x $(EXEC_DIR)/*.x64P $(EXEC_DIR)/*.ko

endif
