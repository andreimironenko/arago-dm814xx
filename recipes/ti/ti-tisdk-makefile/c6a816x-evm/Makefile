<<<<<<< HEAD
include Rules.make

DEFAULT_LINUXKERNEL_CONFIG=ti8168_evm_defconfig
DEFAULT_UBOOT_CONFIG=ti8168_evm_config
DMAI_PLATFORM=o3530_al
# export cross compiler location in PATH
PATH := ${PATH}:${CSTOOL_PATH}

# .PHONY:	all clean everything clobber help cmem cmem_clean cmem_install linux linux_clean linux_install psp_examples psp_examples_clean psp_examples_install install u-boot u-boot_clean u-boot_install c6accel c6accel_clean c6accel_install opengldemos opengldemos_clean opengldemos_install syslink syslink_clean syslink_install 
.PHONY:	all clean everything clobber help cmem cmem_clean cmem_install linux linux_clean linux_install install u-boot u-boot_clean u-boot_install c6accel c6accel_clean c6accel_install syslink syslink_clean syslink_install 

#==============================================================================
# The default build target builds components to enable all other build targets.
#==============================================================================
all: linux cmem syslink c6accel 

#==============================================================================
# Clean up the targets built by 'make all'.
#==============================================================================
clean:	linux_clean syslink_clean cmem_clean c6accel_clean

#==============================================================================
# Build everything rebuildable.
#==============================================================================
# everything: all u-boot syslink_examples ceexamples psp_examples opengldemos c6run_examples
everything: all u-boot syslink_examples ceexamples

#==============================================================================
# Install everything
#==============================================================================
# install: linux_install cmem_install ceexamples_install syslink_install u-boot_install psp_examples_install c6accel_install opengldemos_install 
install: linux_install cmem_install ceexamples_install syslink_install u-boot_install c6accel_install 

#==============================================================================
# Clean up all targets.
#==============================================================================
# clobber: clean ceexamples_clean u-boot_clean psp_examples_clean opengldemos_clean 
clobber: clean ceexamples_clean u-boot_clean 

#==============================================================================
# A help message target.
#==============================================================================
help:
	@echo
	@echo "Available build targets are:"
	@echo
	@echo "    all                          : Build the components for which a rebuild is necessary to enable all other build targets listed below. You must do this at least once upon installation prior to attempting the other targets."
	@echo "    clean                        : Remove files generated by the 'all' target"
	@echo 
	@echo "    cmem                         : Build the CMEM kernel module"
	@echo "    cmem_clean                   : Remove generated cmem files."
	@echo "    cmem_install                 : Install cmemk module"
	@echo
	@echo "    syslink                      : Configure and build SYS Link for HLOS and HLOS without sample examples"
	@echo "    syslink_clean                : Remove generated SysLink files"
	@echo "    syslink_install              : Install HLOS and RTOS link files"
	@echo
	@echo "    syslink_hlos                 : Configure and build DSP Link for ARM"
	@echo "    syslink_hlos_clean           : Clean DSP Link for ARM"
	@echo 
	@echo "    syslink_rtos                 : Configure and build SysLink for RTOS"
	@echo "    syslink_rtos_clean           : Clean SysLink for RTOS"
	@echo 
	@echo "    syslink_samples              : Build SysLink HLOS and RTOS sample applications"
	@echo "    syslink_samples_clean        : Build SysLink HLOS and RTOS sample applications"
	@echo
	@echo "    ceexamples                   : Build CE codecs, extensions, servers and apps"
	@echo "    ceexamples_clean             : Remove generated CE example files."
	@echo
	@echo "    linux                        : Build Linux kernel uImage and module"
	@echo "    linux_clean                  : Remove generated Linux kernel files"
	@echo "    linux_install                : Install kernel binary and  modules"
	@echo
	@echo "    u-boot                       : Build the u-boot boot loader"
	@echo "    u-boot_clean                 : Remove generated u-boot files"
	@echo "    u-boot_install               : Install the u-boot image"
	@echo
#	@echo "    psp_examples                 : Build Linux examples"
#	@echo "    psp_examples_clean           : Remove all generated PSP examples"
#	@echo "    psp_examples_install         : Install psp examples"
#	@echo
	@echo "    c6accel                      : Build c6accel package"
	@echo "    c6accel_clean                : Remove generated c6accel files"
	@echo "    c6accel_install              : Install c6accel examples"
	@echo
#	@echo "    opengldemos                  : Build the OPENGL graphics SDK demos for $(PLATFORM)"
#	@echo "    opengldemos_clean            : Remove OPENGL graphics SDK demo files."
#	@echo "    opengldemos_install          : install OPENGL graphics SDK demo executables."
#	@echo
	@echo "    everything                   : Rebuild everything"
	@echo "    clobber                      : Remove all generated files"
	@echo
	@echo "    install                      : Install all the targets in "
	@echo "                            $(EXEC_DIR)"
	@echo

#==============================================================================
# Build the Linux kernel. Also, an explicit cleanup target is defined.
#==============================================================================
linux:
	$(MAKE) -C $(LINUXKERNEL_INSTALL_DIR) ARCH=arm CROSS_COMPILE=$(CSTOOL_PREFIX) $(DEFAULT_LINUXKERNEL_CONFIG)
	$(MAKE) -C $(LINUXKERNEL_INSTALL_DIR) ARCH=arm CROSS_COMPILE=$(CSTOOL_PREFIX) uImage
	$(MAKE) -C $(LINUXKERNEL_INSTALL_DIR) ARCH=arm CROSS_COMPILE=$(CSTOOL_PREFIX) modules
linux_clean:
	$(MAKE) -C $(LINUXKERNEL_INSTALL_DIR) mrproper
	$(MAKE) -C $(LINUXKERNEL_INSTALL_DIR) ARCH=arm CROSS_COMPILE=$(CSTOOL_PREFIX) clean

linux_install:
	install -d $(EXEC_DIR)/boot
	install  $(LINUXKERNEL_INSTALL_DIR)/arch/arm/boot/uImage $(EXEC_DIR)/boot
	install  $(LINUXKERNEL_INSTALL_DIR)/vmlinux $(EXEC_DIR)/boot
	install  $(LINUXKERNEL_INSTALL_DIR)/System.map $(EXEC_DIR)/boot
	$(MAKE) -C $(LINUXKERNEL_INSTALL_DIR) ARCH=arm CROSS_COMPILE=$(CSTOOL_PREFIX) INSTALL_MOD_PATH=$(EXEC_DIR)/ modules_install

#==============================================================================
# Build u-boot. Also, an explicit cleanup target is defined.
#==============================================================================
u-boot:
	$(MAKE) -C $(PSP_INSTALL_DIR)/u-boot-* CROSS_COMPILE=$(CSTOOL_PREFIX) $(DEFAULT_UBOOT_CONFIG)
	$(MAKE) -C $(PSP_INSTALL_DIR)/u-boot-* CROSS_COMPILE=$(CSTOOL_PREFIX)

u-boot_clean: 
	$(MAKE) -C $(PSP_INSTALL_DIR)/u-boot-* CROSS_COMPILE=$(CSTOOL_PREFIX) distclean

u-boot_install:
	install -d $(EXEC_DIR)/boot
	install $(PSP_INSTALL_DIR)/u-boot-*/u-boot.bin $(EXEC_DIR)/boot
	install $(PSP_INSTALL_DIR)/u-boot-*/u-boot.map $(EXEC_DIR)/boot

#==============================================================================
# Build the PSP Linux examples. Also, an explicit cleanup target is defined.
#==============================================================================
# psp_examples:
#	$(MAKE) -C $(PSP_INSTALL_DIR)/linux-driver-examples-*/audio PLAT=omap3530 KERNEL_DIR=$(LINUXKERNEL_INSTALL_DIR)/include LIB_INC=$(LINUXLIBS_INSTALL_DIR)/include LIB_DIR=$(LINUXLIBS_INSTALL_DIR)/lib all
#	$(MAKE) -C $(PSP_INSTALL_DIR)/linux-driver-examples-*/video PLAT=omap3530 KERNEL_DIR=$(LINUXKERNEL_INSTALL_DIR) LIB_INC=$(LINUXLIBS_INSTALL_DIR)/include LIB_DIR=$(LINUXLIBS_INSTALL_DIR)/lib all
#
#psp_examples_clean:
#	$(MAKE) -C $(PSP_INSTALL_DIR)/linux-driver-examples-*/audio PLAT=omap3530 KERNEL_DIR=$(LINUXKERNEL_INSTALL_DIR)/include LIB_INC=$(LINUXLIBS_INSTALL_DIR)/include LIB_DIR=$(LINUXLIBS_INSTALL_DIR)/lib clean
#	$(MAKE) -C $(PSP_INSTALL_DIR)/linux-driver-examples-*/video PLAT=omap3530 KERNEL_DIR=$(LINUXKERNEL_INSTALL_DIR)/include LIB_INC=$(LINUXLIBS_INSTALL_DIR)/include LIB_DIR=$(LINUXLIBS_INSTALL_DIR)/lib clean
#
#psp_examples_install:
#	mkdir -p $(EXEC_DIR)/psp-examples/audio
#	cp  $(PSP_INSTALL_DIR)/linux-driver-examples-*/audio/bin/* $(EXEC_DIR)/psp-examples/audio
#	mkdir -p $(EXEC_DIR)/psp-examples/video
#	cp  $(PSP_INSTALL_DIR)/linux-driver-examples-*/video/bin/* $(EXEC_DIR)/psp-examples/video
#	
#==============================================================================
# Build the CMEM kernel module for the configured platform, and make sure the
# kernel_binaries directory is kept in sync. Also, an explicit cleanup target
# is defined.
#==============================================================================
cmem:
	$(MAKE) -C $(CMEM_INSTALL_DIR)/packages/ti/sdo/linuxutils/cmem/src/interface ../../lib/cmem.a470MV
	$(MAKE) -C $(CMEM_INSTALL_DIR)/packages/ti/sdo/linuxutils/cmem/src/module

cmem_clean:
	$(MAKE) -C $(CMEM_INSTALL_DIR)/packages/ti/sdo/linuxutils/cmem/src/module clean
	$(MAKE) -C $(CMEM_INSTALL_DIR)/packages/ti/sdo/linuxutils/cmem/src/interface clean

cmem_install:
	install -d $(EXEC_DIR)/cmem
	install $(CMEM_INSTALL_DIR)/packages/ti/sdo/linuxutils/cmem/src/module/cmemk.ko $(EXEC_DIR)/cmem

###############################################################################
# Build codec engine examples
###############################################################################
ceexamples_apps:
	make -C $(CE_INSTALL_DIR)/examples/ti/sdo/ce/examples/apps \
	DEVICES="DM8168" \
	GPPOS=LINUX_GCC \
	PROGRAMS="APP_CLIENT DSP_SERVER" \
	CE_INSTALL_DIR=$(CE_INSTALL_DIR) \
	FC_INSTALL_DIR=$(FC_INSTALL_DIR) \
	SYSLINK_INSTALL_DIR=$(SYSLINK_INSTALL_DIR) \
	CMEM_INSTALL_DIR=$(CMEM_INSTALL_DIR) \
	XDAIS_INSTALL_DIR=$(XDAIS_INSTALL_DIR) \
	XDC_INSTALL_DIR=$(XDC_INSTALL_DIR) \
	BIOS_INSTALL_DIR=$(SYSBIOS_INSTALL_DIR) \
	CGTOOLS_C64P=$(CODEGEN_INSTALL_DIR) \
	CGTOOLS_C674=$(CODEGEN_INSTALL_DIR) \
	CGTOOLS_C674ELF=$(CODEGEN_INSTALL_DIR) \
	CGTOOLS_M3ELF=$(TMS470_CODEGEN_INSTALL_DIR) \
	EDMA3_LLD_INSTALL_DIR=$(EDMA3_LLD_INSTALL_DIR) \
	CGTOOLS_V5T=$(CSTOOL_DIR) \
	all 

ceexamples_apps_clean:
	make -C $(CE_INSTALL_DIR)/examples/ti/sdo/ce/examples/apps \
	DEVICES="DM8168" \
	GPPOS=LINUX_GCC \
	PROGRAMS="APP_CLIENT DSP_SERVER" \
	CE_INSTALL_DIR=$(CE_INSTALL_DIR) \
	FC_INSTALL_DIR=$(FC_INSTALL_DIR) \
	SYSLINK_INSTALL_DIR=$(SYSLINK_INSTALL_DIR) \
	CMEM_INSTALL_DIR=$(CMEM_INSTALL_DIR) \
	XDAIS_INSTALL_DIR=$(XDAIS_INSTALL_DIR) \
	XDC_INSTALL_DIR=$(XDC_INSTALL_DIR) \
	BIOS_INSTALL_DIR=$(SYSBIOS_INSTALL_DIR) \
	EDMA3_LLD_INSTALL_DIR=$(EDMA3_LLD_INSTALL_DIR) \
	CGTOOLS_C64P=$(CODEGEN_INSTALL_DIR) \
	CGTOOLS_C674=$(CODEGEN_INSTALL_DIR) \
	CGTOOLS_C674ELF=$(CODEGEN_INSTALL_DIR) \
	CGTOOLS_M3ELF=$(TMS470_CODEGEN_INSTALL_DIR) \
	CGTOOLS_V5T=$(CSTOOL_DIR) \
	clean 

ceexamples_apps_install:
	@echo 
	@echo "**** Don't have working install target ****"
	@echo "Copy the required application binaries and data files from $(CE_INSTALL_DIR)/examples/ti/sdo/ce/examples/apps to target filesystem. "
	@echo 

ceexamples_extensions:
	make -C $(CE_INSTALL_DIR)/examples/ti/sdo/ce/examples/extensions \
	DEVICES="DM8168" \
	GPPOS=LINUX_GCC \
	PROGRAMS="APP_CLIENT DSP_SERVER" \
	CE_INSTALL_DIR=$(CE_INSTALL_DIR) \
	FC_INSTALL_DIR=$(FC_INSTALL_DIR) \
	SYSLINK_INSTALL_DIR=$(SYSLINK_INSTALL_DIR) \
	CMEM_INSTALL_DIR=$(CMEM_INSTALL_DIR) \
	XDAIS_INSTALL_DIR=$(XDAIS_INSTALL_DIR) \
	XDC_INSTALL_DIR=$(XDC_INSTALL_DIR) \
	BIOS_INSTALL_DIR=$(SYSBIOS_INSTALL_DIR) \
	EDMA3_LLD_INSTALL_DIR=$(EDMA3_LLD_INSTALL_DIR) \
	CGTOOLS_C64P=$(CODEGEN_INSTALL_DIR) \
	CGTOOLS_C674=$(CODEGEN_INSTALL_DIR) \
	CGTOOLS_C674ELF=$(CODEGEN_INSTALL_DIR) \
	CGTOOLS_M3ELF=$(TMS470_CODEGEN_INSTALL_DIR) \
	CGTOOLS_V5T=$(CSTOOL_DIR) \
	all 

ceexamples_extensions_clean:
	make -C $(CE_INSTALL_DIR)/examples/ti/sdo/ce/examples/apps \
	DEVICES="DM8168" \
	GPPOS=LINUX_GCC \
	PROGRAMS="APP_CLIENT DSP_SERVER" \
	CE_INSTALL_DIR=$(CE_INSTALL_DIR) \
	FC_INSTALL_DIR=$(FC_INSTALL_DIR) \
	SYSLINK_INSTALL_DIR=$(SYSLINK_INSTALL_DIR) \
	CMEM_INSTALL_DIR=$(CMEM_INSTALL_DIR) \
	XDAIS_INSTALL_DIR=$(XDAIS_INSTALL_DIR) \
	XDC_INSTALL_DIR=$(XDC_INSTALL_DIR) \
	BIOS_INSTALL_DIR=$(SYSBIOS_INSTALL_DIR) \
	EDMA3_LLD_INSTALL_DIR=$(EDMA3_LLD_INSTALL_DIR) \
	CGTOOLS_C64P=$(CODEGEN_INSTALL_DIR) \
	CGTOOLS_C674=$(CODEGEN_INSTALL_DIR) \
	CGTOOLS_C674ELF=$(CODEGEN_INSTALL_DIR) \
	CGTOOLS_M3ELF=$(TMS470_CODEGEN_INSTALL_DIR) \
	CGTOOLS_V5T=$(CSTOOL_DIR) \
	clean 

ceexamples_extensions_install:
	@echo 
	@echo "**** Don't have working install target ****"
	@echo "Copy the required application binaries and data files from $(CE_INSTALL_DIR)/examples/ti/sdo/ce/examples/extensions to target filesystem. "
	@echo 


ceexamples_servers:
	make -C $(CE_INSTALL_DIR)/examples/ti/sdo/ce/examples/servers  \
	DEVICES="DM8168" \
	GPPOS="LINUX_GCC" \
	PROGRAMS="APP_CLIENT DSP_SERVER" \
	CE_INSTALL_DIR=$(CE_INSTALL_DIR) \
	FC_INSTALL_DIR=$(FC_INSTALL_DIR) \
	SYSLINK_INSTALL_DIR=$(SYSLINK_INSTALL_DIR) \
	CMEM_INSTALL_DIR=$(CMEM_INSTALL_DIR) \
	XDAIS_INSTALL_DIR=$(XDAIS_INSTALL_DIR) \
	XDC_INSTALL_DIR=$(XDC_INSTALL_DIR) \
	BIOS_INSTALL_DIR=$(SYSBIOS_INSTALL_DIR) \
	EDMA3_LLD_INSTALL_DIR=$(EDMA3_LLD_INSTALL_DIR) \
	CGTOOLS_C64P=$(CODEGEN_INSTALL_DIR) \
	CGTOOLS_C674=$(CODEGEN_INSTALL_DIR) \
	CGTOOLS_C674ELF=$(CODEGEN_INSTALL_DIR) \
	CGTOOLS_M3ELF=$(TMS470_CODEGEN_INSTALL_DIR) \
	CGTOOLS_V5T=$(CSTOOL_DIR) \
	all 

ceexamples_servers_clean:
	make -C $(CE_INSTALL_DIR)/examples/ti/sdo/ce/examples/servers \
	DEVICES="DM8168" \
	GPPOS=LINUX_GCC \
	PROGRAMS="APP_CLIENT DSP_SERVER" \
	CE_INSTALL_DIR=$(CE_INSTALL_DIR) \
	FC_INSTALL_DIR=$(FC_INSTALL_DIR) \
	SYSLINK_INSTALL_DIR=$(SYSLINK_INSTALL_DIR) \
	CMEM_INSTALL_DIR=$(CMEM_INSTALL_DIR) \
	XDAIS_INSTALL_DIR=$(XDAIS_INSTALL_DIR) \
	XDC_INSTALL_DIR=$(XDC_INSTALL_DIR) \
	BIOS_INSTALL_DIR=$(SYSBIOS_INSTALL_DIR) \
	EDMA3_LLD_INSTALL_DIR=$(EDMA3_LLD_INSTALL_DIR) \
	CGTOOLS_C64P=$(CODEGEN_INSTALL_DIR) \
	CGTOOLS_C674=$(CODEGEN_INSTALL_DIR) \
	CGTOOLS_C674ELF=$(CODEGEN_INSTALL_DIR) \
	CGTOOLS_M3ELF=$(TMS470_CODEGEN_INSTALL_DIR) \
	CGTOOLS_V5T=$(CSTOOL_DIR) \
	clean 

ceexamples_servers_install:
	@echo 
	@echo "**** Don't have working install target ****"
	@echo "Copy the required application binaries and data files from $(CE_INSTALL_DIR)/examples/ti/sdo/ce/examples/servers to target filesystem. "
	@echo 


ceexamples_codecs:
	make -C $(CE_INSTALL_DIR)/examples/ti/sdo/ce/examples/codecs \
	DEVICES="DM8168" \
	GPPOS=LINUX_GCC \
	PROGRAMS="APP_CLIENT DSP_SERVER" \
	CE_INSTALL_DIR=$(CE_INSTALL_DIR) \
	FC_INSTALL_DIR=$(FC_INSTALL_DIR) \
	DSPLINK_INSTALL_DIR=$(SYSLINK_INSTALL_DIR) \
	CMEM_INSTALL_DIR=$(CMEM_INSTALL_DIR) \
	XDAIS_INSTALL_DIR=$(XDAIS_INSTALL_DIR) \
	XDC_INSTALL_DIR=$(XDC_INSTALL_DIR) \
	BIOS_INSTALL_DIR=$(SYSBIOS_INSTALL_DIR) \
	EDMA3_LLD_INSTALL_DIR=$(EDMA3_LLD_INSTALL_DIR) \
	CGTOOLS_C64P=$(CODEGEN_INSTALL_DIR) \
	CGTOOLS_C674=$(CODEGEN_INSTALL_DIR) \
	CGTOOLS_C674ELF=$(CODEGEN_INSTALL_DIR) \
	CGTOOLS_M3ELF=$(TMS470_CODEGEN_INSTALL_DIR) \
	CGTOOLS_V5T=$(CSTOOL_DIR) \
	all 

ceexamples_codecs_clean:
	make -C $(CE_INSTALL_DIR)/examples/ti/sdo/ce/examples/codecs \
	DEVICES="DM8168" \
	GPPOS=LINUX_GCC \
	PROGRAMS="APP_CLIENT DSP_SERVER" \
	CE_INSTALL_DIR=$(CE_INSTALL_DIR) \
	FC_INSTALL_DIR=$(FC_INSTALL_DIR) \
	SYSLINK_INSTALL_DIR=$(SYSLINK_INSTALL_DIR) \
	CMEM_INSTALL_DIR=$(CMEM_INSTALL_DIR) \
	XDAIS_INSTALL_DIR=$(XDAIS_INSTALL_DIR) \
	XDC_INSTALL_DIR=$(XDC_INSTALL_DIR) \
	BIOS_INSTALL_DIR=$(SYSBIOS_INSTALL_DIR) \
	EDMA3_LLD_INSTALL_DIR=$(EDMA3_LLD_INSTALL_DIR) \
	CGTOOLS_C64P=$(CODEGEN_INSTALL_DIR) \
	CGTOOLS_C674=$(CODEGEN_INSTALL_DIR) \
	CGTOOLS_C674ELF=$(CODEGEN_INSTALL_DIR) \
	CGTOOLS_M3ELF=$(TMS470_CODEGEN_INSTALL_DIR) \
	CGTOOLS_V5T=$(CSTOOL_DIR) \
	clean 

ceexamples_codecs_install:
	@echo 
	@echo "**** Don't have working install target ****"
	@echo "Copy the required application binaries and data files from $(CE_INSTALL_DIR)/examples/ti/sdo/ce/examples/codecs to target filesystem. "
	@echo 

ceexamples: ceexamples_codecs ceexamples_extensions ceexamples_servers ceexamples_apps
 
ceexamples_clean: ceexamples_codecs_clean ceexamples_extensions_clean ceexamples_servers_clean ceexamples_apps_clean

ceexamples_install: ceexamples_codecs_install ceexamples_extensions_install ceexamples_servers_install ceexamples_apps_install


###############################################################################
# Build codec engine examples
###############################################################################
SYSLINK_ROOT=${SYSLINK_INSTALL_DIR}
SYSLINK_XDCPATH="${IPC_INSTALL_DIR}/packages;${SYSBIOS_INSTALL_DIR}/packages"

syslink_cfg:
	sed -i \
        -e s:^C64.rootDir.*:C64.rootDir\ =\ \"${CODEGEN_INSTALL_DIR}\":g \
        -e s:^C64P_COFF.rootDir.*:C64P_COFF.rootDir\ =\ \"${CODEGEN_INSTALL_DIR}\":g \
        -e s:^C64P_ELF.rootDir.*:C64P_ELF.rootDir\ =\ \"${CODEGEN_INSTALL_DIR}\":g \
        -e s:^C67P_ELF.rootDir.*:C67P_ELF.rootDir\ =\ \"${CODEGEN_INSTALL_DIR}\":g \
        -e s:^C674_ELF.rootDir.*:C674_ELF.rootDir\ =\ \"${CODEGEN_INSTALL_DIR}\":g \
        -e s:^C674_COFF.rootDir.*:C674_COFF.rootDir\ =\ \"${CODEGEN_INSTALL_DIR}\":g \
        -e s:^Arm9.rootDir.*:Arm9.rootDir\ =\ \"${TMS470_CODEGEN_INSTALL_DIR}\":g \
        -e s:^M3_ELF.rootDir.*:M3_ELF.rootDir\ =\ \"${TMS470_CODEGEN_INSTALL_DIR}\":g \
        -e s:C64P_COFF,://C64P_COFF:g \
        -e s:C64P_ELF,://C64P_ELF:g \
        ${SYSLINK_INSTALL_DIR}/config.bld
	mkdir -p ${SYSLINK_INSTALL_DIR}/packages
	ln -s ${SYSLINK_INSTALL_DIR}/ti  ${SYSLINK_INSTALL_DIR}/packages/ti

syslink_hlos: 
	${MAKE} -C ${SYSLINK_INSTALL_DIR}/ti/syslink/utils/hlos/knl/Linux/ \
		SYSLINK_ROOT=${SYSLINK_INSTALL_DIR} \
		SYSLINK_PKGPATH="${IPC_INSTALL_DIR}/packages;${SYSLINK_INSTALL_DIR}" \
		ARCH=arm \
		CROSS_COMPILE=${CSTOOL_PREFIX} \
		TOOLCHAIN_PREFIX=${CSTOOL_PREFIX} \
		SYSLINK_PLATFORM=DM8168 \
		KDIR=$(LINUXKERNEL_INSTALL_DIR)
	${MAKE} -C ${SYSLINK_INSTALL_DIR}/ti/syslink/utils/hlos/usr/Linux/ \
		SYSLINK_ROOT=${SYSLINK_INSTALL_DIR} \
		SYSLINK_PKGPATH="${IPC_INSTALL_DIR}/packages;${SYSLINK_INSTALL_DIR}" \
		ARCH=arm \
		CROSS_COMPILE=${CSTOOL_PREFIX} \
		TOOLCHAIN_PREFIX=${CSTOOL_PREFIX} \
		SYSLINK_PLATFORM=DM8168 \
		KDIR=$(LINUXKERNEL_INSTALL_DIR)

syslink_hlos_clean: 
	${MAKE} -C ${SYSLINK_INSTALL_DIR}/ti/syslink/utils/hlos/knl/Linux/ \
		SYSLINK_ROOT=${SYSLINK_INSTALL_DIR} \
		SYSLINK_PKGPATH="${IPC_INSTALL_DIR}/packages;${SYSLINK_INSTALL_DIR}" \
		ARCH=arm \
		CROSS_COMPILE=${CSTOOL_PREFIX} \
		TOOLCHAIN_PREFIX=${CSTOOL_PREFIX} \
		SYSLINK_PLATFORM=DM8168 \
		KDIR=$(LINUXKERNEL_INSTALL_DIR) clean
	${MAKE} -C ${SYSLINK_INSTALL_DIR}/ti/syslink/utils/hlos/usr/Linux/ \
		SYSLINK_ROOT=${SYSLINK_INSTALL_DIR} \
		SYSLINK_PKGPATH="${IPC_INSTALL_DIR}/packages;${SYSLINK_INSTALL_DIR}" \
		ARCH=arm \
		CROSS_COMPILE=${CSTOOL_PREFIX} \
		TOOLCHAIN_PREFIX=${CSTOOL_PREFIX} \
		SYSLINK_PLATFORM=DM8168 \
		KDIR=$(LINUXKERNEL_INSTALL_DIR) clean

syslink_rtos: syslink_cfg
	XDCPATH=${SYSLINK_XDCPATH} \
		SYSLINK_ROOT=${SYSLINK_INSTALL_DIR} \
		${XDC_INSTALL_DIR}/xdc -P \
		`${XDC_INSTALL_DIR}/bin/xdcpkg ${SYSLINK_INSTALL_DIR}/ti/syslink | grep -v samples`

syslink_rtos_clean: syslink_cfg
	XDCPATH=${SYSLINK_XDCPATH} ${XDC_INSTALL_DIR}/xdc .make -PR ${SYSLINK_INSTALL_DIR}/ti/syslink/.
	XDCPATH=${SYSLINK_XDCPATH} ${XDC_INSTALL_DIR}/xdc clean -PR ${SYSLINK_INSTALL_DIR}/ti/syslink/.
	XDCPATH=${SYSLINK_XDCPATH} ${XDC_INSTALL_DIR}/xdc .interfaces -PR ${SYSLINK_INSTALL_DIR}/ti/syslink/.

# syslink_clean: syslink_hlos_clean syslink_rtos_clean syslink_samples_clean
syslink_clean: syslink_hlos_clean syslink_rtos_clean

syslink: syslink_hlos syslink_rtos

syslink_install:
	install -d $(EXEC_DIR)/syslink
	install ${SYSLINK_INSTALL_DIR}/ti/syslink/lib/modules/DM8168/syslink.ko $(EXEC_DIR)/syslink
	cp ${SYSLINK_INSTALL_DIR}/ti/syslink/lib/syslink.a $(EXEC_DIR)/syslink
	@for file in $(shell find $(LINK_INSTALL_DIR)/dsplink/dsp/BUILD -name *.out); do \
	cp $$file $(EXEC_DIR)/dsplink ; \
	done

##############################################################################
#  Build c6accel
##############################################################################
c6accel:
	XDCPATH=${C6ACCEL_XDCPATH} \
	$(MAKE) -C $(C6ACCEL_INSTALL_DIR) \
	PLATFORM="DM8168" \
	CE_INSTALL_DIR="$(CE_INSTALL_DIR)" \
	XDAIS_INSTALL_DIR="$(XDAIS_INSTALL_DIR)" \
	LINK_INSTALL_DIR="$(SYSLINK_INSTALL_DIR)" \
	IPC_INSTALL_DIR="${IPC_INSTALL_DIR}" \
	OSAL_INSTALL_DIR="${OSAL_INSTALL_DIR}" \
	CMEM_INSTALL_DIR="$(CMEM_INSTALL_DIR)" \
	EDMA3_LLD_INSTALL_DIR="$(EDMA3_LLD_INSTALL_DIR)" \
	CODEGEN_INSTALL_DIR="$(CODEGEN_INSTALL_DIR)" \
	XDC_INSTALL_DIR="$(XDC_INSTALL_DIR)" \
	FC_INSTALL_DIR="$(FC_INSTALL_DIR)" \
	BIOS_INSTALL_DIR="$(SYSBIOS_INSTALL_DIR)" \
	C6ACCEL_INSTALL_DIR="$(C6ACCEL_INSTALL_DIR)" \
	CSTOOL_DIR="$(CSTOOL_DIR)" \
	CSTOOL_PREFIX="$(CSTOOL_PREFIX)" \
	BUILD_TYPE=debug \
	all

c6accel_clean:
	$(MAKE) -C $(C6ACCEL_INSTALL_DIR) \
	PLATFORM="$(PLATFORM)" \
	CE_INSTALL_DIR="$(CE_INSTALL_DIR)" \
	XDAIS_INSTALL_DIR="$(XDAIS_INSTALL_DIR)" \
	LINK_INSTALL_DIR="$(LINK_INSTALL_DIR)" \
	IPC_INSTALL_DIR="${IPC_INSTALL_DIR}" \
	OSAL_INSTALL_DIR="${OSAL_INSTALL_DIR}" \
	CMEM_INSTALL_DIR="$(CMEM_INSTALL_DIR)" \
	EDMA3_LLD_INSTALL_DIR="$(EDMA3_LLD_INSTALL_DIR)" \
	CODEGEN_INSTALL_DIR="$(CODEGEN_INSTALL_DIR)" \
	XDC_INSTALL_DIR="$(XDC_INSTALL_DIR)" \
	FC_INSTALL_DIR="$(FC_INSTALL_DIR)" \
	BIOS_INSTALL_DIR="$(BIOS_INSTALL_DIR)" \
	SERVER_INSTALL_DIR="$(CODEC_INSTALL_DIR)" \
	C6ACCEL_INSTALL_DIR="$(C6ACCEL_INSTALL_DIR)/soc" \
	CSTOOL_DIR="$(CSTOOL_DIR)" \
	CSTOOL_PREFIX="$(CSTOOL_PREFIX)" \
	clean

c6accel_install:
	$(MAKE) -C $(C6ACCEL_INSTALL_DIR) \
	PLATFORM="$(PLATFORM)" \
	CMEM_INSTALL_DIR="$(CMEM_INSTALL_DIR)" \
	LINK_INSTALL_DIR="$(LINK_INSTALL_DIR)" \
	C6ACCEL_INSTALL_DIR="$(C6ACCEL_INSTALL_DIR)/soc" \
	EXEC_DIR_C6ACCEL="$(EXEC_DIR)/c6accel" \
	install

################################################################################
# Build openGL demos
################################################################################
# opengldemos:
# 	$(MAKE) -C $(GRAPHICS_INSTALL_DIR) BUILD=release OMAPES=3.x all
# 
# opengldemos_clean:
# 	$(MAKE) -C $(GRAPHICS_INSTALL_DIR) BUILD=release OMAPES=3.x clean
# 
# opengldemos_install:
# 	$(MAKE) -C $(GRAPHICS_INSTALL_DIR) BUILD=release OMAPES=3.x install EXEC_DIR=$(EXEC_DIR)/opengl-demos
# 	for file in `find $(GRAPHICS_INSTALL_DIR)/gfx_rel_es3.x -name "*.ko"`; do \
# 	    install $${file} $(EXEC_DIR)/opengl-demos; \
# 	done
# 
=======
-include Rules.make

all: matrix_gui matrix_tui am_benchmarks


matrix_gui:
	@echo =============================
	@echo      Building Matrix GUI
	@echo =============================
	@cd demos/matrix_gui; make -f Makefile.build

matrix_tui:
	@echo =============================
	@echo      Building Matrix TUI
	@echo =============================
	@cd demos/matrix_tui; make all

am_benchmarks:
	@echo =============================
	@echo    Building AM Benchmarks
	@echo =============================
	@cd demos/am_benchmarks; make

matrix_gui_clean:
	@echo =============================
	@echo      Cleaning Matrix GUI
	@echo =============================
	@cd demos/matrix_gui; \
	 make -f Makefile.build clean; \
	 rm -f Makefile Makefile.Debug Makefile.Release

matrix_tui_clean:
	@echo =============================
	@echo      Cleaning Matrix TUI
	@echo =============================
	@cd demos/matrix_tui; make clean

am_benchmarks_clean:
	@echo =============================
	@echo    Cleaning AM Benchmarks
	@echo =============================
	@cd demos/am_benchmarks; make clean

clean: matrix_gui_clean matrix_tui_clean am_benchmarks_clean

matrix_gui_install:
	@echo =============================
	@echo     Installing Matrix GUI
	@echo =============================
	@cd demos/matrix_gui; make -f Makefile.build install;

matrix_tui_install:
	@echo =============================
	@echo     Installing Matrix TUI
	@echo =============================
	@cd demos/matrix_tui; make install

am_benchmarks_install:
	@echo =============================
	@echo   Installing AM Benchmarks
	@echo =============================
	@cd demos/am_benchmarks; make install

2D_accel_install:
	@echo =============================
	@echo   Installing 2D accel demo
	@echo =============================
	@cd demos/2D_accel; make install
install: matrix_gui_install matrix_tui_install am_benchmarks_install 2D_accel_install
>>>>>>> 58bdc3464fb20861820435506a170b5a5ad96209
