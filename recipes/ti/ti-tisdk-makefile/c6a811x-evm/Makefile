include Rules.make

# export cross compiler location in PATH
PATH := ${PATH}:${CSTOOL_PATH}

.PHONY:	components components_clean components_linux components_dsp all clean help linux linux_clean linux_install install u-boot u-boot_clean u-boot_install syslink syslink_clean syslink_install matrix matrix_clean matrix_install dsp-devkit linux-devkit media-controller-utils_clean media-controller-utils_install edma3lld edma3lld_clean sgx-driver sgx-driver_clean sgx-driver_install

#==============================================================================
# Build everything rebuildable.
#==============================================================================
all: components apps

#==============================================================================
# Build components to enable all other build targets. 
#==============================================================================
components: components_linux components_dsp
components_linux: linux syslink_hlos syslink_driver sgx-driver media-controller-utils rpe_linux
components_dsp: syslink_rtos edma3lld rpe_dsp

#==============================================================================
# Install components
#==============================================================================
components_install: linux_install syslink_install sgx-driver_install media-controller-utils_install rpe_install

#==============================================================================
# Clean up the targets built by 'make all'.
#==============================================================================
components_clean: linux_clean syslink_clean sgx-driver_clean edma3lld_clean media-controller-utils_clean rpe_clean

#==============================================================================
# Build all Demos, Examples and Applications
#==============================================================================
apps: u-boot matrix psp-examples rpe

#==============================================================================
# Install everything
#==============================================================================
apps_install: u-boot_install matrix_install psp-examples_install

#==============================================================================
# Clean all Demos, Examples and Applications
#==============================================================================
apps_clean: u-boot_clean matrix_clean psp-examples_clean

#==============================================================================
# Install everything
#==============================================================================
install: components_install apps_install

#==============================================================================
# Clean up all targets.
#==============================================================================
clean: components_clean apps_clean

#==============================================================================
# A help message target.
#==============================================================================
help:
	@echo
	@echo "Available build targets are  :"
	@echo
	@echo "    components_linux               : Build the Linux components"
	@echo "    components_dsp                 : Build the DSP components"
	@echo "    components                     : Build the components for which a rebuild is necessary to enable all other build targets listed below. You must do this at least once upon installation prior to attempting the other targets."
	@echo "    components_clean               : Remove files generated by the 'components' target"
	@echo 
	@echo "    apps                           : Build all Examples, Demos and Applications"
	@echo "    apps_clean                     : Remove all files generated by 'apps' target"
	@echo "    install                        : Install all Examples, Demos and Applications the targets in $(EXEC_DIR)"
	@echo
	@echo "    linux-devkit                   : Populate the linux devkit"
	@echo "    dsp-devkit                     : Populate the dsp devkit"
	@echo
	@echo "    syslink                        : Configure and build SYS Link for HLOS and HLOS without sample examples"
	@echo "    syslink_clean                  : Remove generated SysLink files"
	@echo "    syslink_install                : Install HLOS and RTOS link files"
	@echo
	@echo "    linux                          : Build Linux kernel uImage and module"
	@echo "    linux_clean                    : Remove generated Linux kernel files"
	@echo "    linux_install                  : Install kernel binary and  modules"
	@echo
	@echo "    u-boot                         : Build the u-boot boot loader"
	@echo "    u-boot_clean                   : Remove generated u-boot files"
	@echo "    u-boot_install                 : Install the u-boot image"
	@echo
	@echo "    psp-examples                   : Build the driver examples"
	@echo "    psp-examples_clean             : Remove generated driver example files"
	@echo "    psp-examples_install           : Install the psp examples"
	@echo
	@echo "    matrix                         : Build matrix application launcher"
	@echo "    matrix_clean                   : Remove all matrix files"
	@echo "    matrix_install                 : Install matrix"
	@echo
	@echo "    media-controller-utils         : Build media controller utils"
	@echo "    media-controller-utils_clean   : Remove media controller utils generated files"
	@echo "    media-controller-utils_install : Install media controller utils"
	@echo
	@echo "    edma3lld                       : Build the EDMA3LLD Libraries"
	@echo "    edma3lld_clean                 : Remove generated EDMA3LLD files"
	@echo
	@echo "    sgx-driver                     : Build SGX kernel module"
	@echo "    sgx-driver_clean               : Remove SGX generated files"
	@echo "    sgx-driver_install             : Install SGX kernel module"
	@echo
	@echo "    rpe                            : Build Remote Processor Execute"
	@echo "    rpe_clean                      : Remove Remote Processor Execute generated files"
	@echo "    rpe_install                    : Install Remote Processor Execute"
	@echo
	@echo "    all                            : Rebuild everything"
	@echo "    clean                          : Remove all generated files"
	@echo
	@echo "    install                        : Install all the targets in "
	@echo "                            $(EXEC_DIR)"
	@echo

#==============================================================================
# Build the Linux kernel. Also, an explicit cleanup target is defined.
#==============================================================================
linux:
	$(MAKE) -C $(LINUXKERNEL_INSTALL_DIR) $(LINUXKERNEL_BUILD_VARS) $(DEFAULT_LINUXKERNEL_CONFIG)
	$(MAKE) -C $(LINUXKERNEL_INSTALL_DIR) $(LINUXKERNEL_BUILD_VARS) uImage
	$(MAKE) -C $(LINUXKERNEL_INSTALL_DIR) $(LINUXKERNEL_BUILD_VARS) modules
linux_clean:
	$(MAKE) -C $(LINUXKERNEL_INSTALL_DIR) mrproper
	$(MAKE) -C $(LINUXKERNEL_INSTALL_DIR) $(LINUXKERNEL_BUILD_VARS) clean

linux_install:
	install -d $(EXEC_DIR)/boot
	install  $(LINUXKERNEL_INSTALL_DIR)/arch/arm/boot/uImage $(EXEC_DIR)/boot
	install  $(LINUXKERNEL_INSTALL_DIR)/vmlinux $(EXEC_DIR)/boot
	install  $(LINUXKERNEL_INSTALL_DIR)/System.map $(EXEC_DIR)/boot
	$(MAKE) -C $(LINUXKERNEL_INSTALL_DIR) $(LINUXKERNEL_BUILD_VARS) INSTALL_MOD_PATH=$(EXEC_DIR)/ modules_install

#==============================================================================
# Build u-boot. Also, an explicit cleanup target is defined.
#==============================================================================
u-boot-min:
	$(MAKE) -C $(PSP_INSTALL_DIR)/u-boot-* $(UBOOT_BUILD_VARS) $(MIN_UBOOT_CONFIG)
	$(MAKE) -C $(PSP_INSTALL_DIR)/u-boot-* $(UBOOT_BUILD_VARS) u-boot.ti
	cd $(PSP_INSTALL_DIR)/u-boot-*; mv u-boot.min.sd MLO; cd -
	$(MAKE) -C $(PSP_INSTALL_DIR)/u-boot-* $(UBOOT_BUILD_VARS) distclean

u-boot-min_clean:
	rm -f $(PSP_INSTALL_DIR)/u-boot-*/MLO

u-boot: u-boot-min
	$(MAKE) -C $(PSP_INSTALL_DIR)/u-boot-* $(UBOOT_BUILD_VARS) $(DEFAULT_UBOOT_CONFIG)
	$(MAKE) -C $(PSP_INSTALL_DIR)/u-boot-* $(UBOOT_BUILD_VARS) u-boot.ti

u-boot_clean: u-boot-min_clean
	$(MAKE) -C $(PSP_INSTALL_DIR)/u-boot-* $(UBOOT_BUILD_VARS) distclean

u-boot_install:
	install -d $(EXEC_DIR)/boot
	install $(PSP_INSTALL_DIR)/u-boot-*/MLO $(EXEC_DIR)/boot
	install $(PSP_INSTALL_DIR)/u-boot-*/u-boot.bin $(EXEC_DIR)/boot
	install $(PSP_INSTALL_DIR)/u-boot-*/u-boot.map $(EXEC_DIR)/boot

###############################################################################
# Build the Linux device driver examples
###############################################################################
PSP_EXAMPLES_INSTALL_DIR=$(wildcard $(DVSDK_INSTALL_DIR)/example-applications/linux-driver-examples*)

psp-examples:
	mkdir -p $(PSP_EXAMPLES_INSTALL_DIR)/audio/bin
	$(MAKE) -C $(PSP_EXAMPLES_INSTALL_DIR)/audio \
		KERNEL_DIR=$(LINUXKERNEL_INSTALL_DIR) \
		INSTALL_DIR=$(PSP_EXAMPLES_INSTALL_DIR)/audio \
		EXE_DIR=$(PSP_EXAMPLES_INSTALL_DIR)/audio/bin \
		LIB_DIR=$(DVSDK_INSTALL_DIR)/linux-devkit/arm-none-linux-gnueabi/usr/lib \
		LIB_INC=$(DVSDK_INSTALL_DIR)/linux-devkit/arm-none-linux-gnueabi/usr/include \
		CROSS_COMPILE=$(CSTOOL_PREFIX)
	$(MAKE) -C $(PSP_EXAMPLES_INSTALL_DIR)/edma \
		KERNEL_DIR=$(LINUXKERNEL_INSTALL_DIR) \
		PWD=$(PSP_EXAMPLES_INSTALL_DIR)/edma \
		ARCH=arm \
		CROSS_COMPILE=$(CSTOOL_PREFIX)
	mkdir -p $(PSP_EXAMPLES_INSTALL_DIR)/video/bin
	$(MAKE) -C $(PSP_EXAMPLES_INSTALL_DIR)/video \
		KERNEL_DIR=$(LINUXKERNEL_INSTALL_DIR) \
		INSTALL_DIR=$(PSP_EXAMPLES_INSTALL_DIR)/video \
		EXE_DIR=$(PSP_EXAMPLES_INSTALL_DIR)/video/bin \
		CROSS_COMPILE=$(CSTOOL_PREFIX)
	$(MAKE) -C $(PSP_EXAMPLES_INSTALL_DIR)/watchdog \
		CC=$(CSTOOL_PREFIX)gcc \
		KERNEL_DIR=$(LINUXKERNEL_INSTALL_DIR)

psp-examples_clean:
	$(MAKE) -C $(PSP_EXAMPLES_INSTALL_DIR)/audio \
		KERNEL_DIR=$(LINUXKERNEL_INSTALL_DIR) \
		INSTALL_DIR=$(PSP_EXAMPLES_INSTALL_DIR)/audio \
		EXE_DIR=$(EXEC_DIR)/psp-linux-driver-examples*/audio \
		LIB_DIR=$(DVSDK_INSTALL_DIR)/linux-devkit/arm-none-linux-gnueabi/usr/lib \
		LIB_INC=$(DVSDK_INSTALL_DIR)/linux-devkit/arm-none-linux-gnueabi/usr/include \
		CROSS_COMPILE=$(CSTOOL_PREFIX) \
		clean
	$(MAKE) -C $(PSP_EXAMPLES_INSTALL_DIR)/edma \
		KDIR=$(LINUXKERNEL_INSTALL_DIR) \
		PWD=$(PSP_EXAMPLES_INSTALL_DIR)/edma \
		ARCH=arm \
		CROSS_COMPILE=$(CSTOOL_PREFIX) \
		clean
	$(MAKE) -C $(PSP_EXAMPLES_INSTALL_DIR)/video \
		KERNEL_DIR=$(LINUXKERNEL_INSTALL_DIR) \
		INSTALL_DIR=$(PSP_EXAMPLES_INSTALL_DIR)/video \
		EXE_DIR=$(PSP_EXAMPLES_INSTALL_DIR)/video/bin \
		CROSS_COMPILE=$(CSTOOL_PREFIX) \
		clean
	rm -f $(PSP_EXAMPLES_INSTALL_DIR)/watchdog/bin/*

psp-examples_install:
	install -d $(EXEC_DIR)/usr/share/ti/ti-psp-examples
	install $(PSP_EXAMPLES_INSTALL_DIR)/audio/bin/minimal_capture $(EXEC_DIR)/usr/share/ti/ti-psp-examples
	install $(PSP_EXAMPLES_INSTALL_DIR)/audio/bin/minimal_playback $(EXEC_DIR)/usr/share/ti/ti-psp-examples
	install $(PSP_EXAMPLES_INSTALL_DIR)/edma/edma_test.ko $(EXEC_DIR)/usr/share/ti/ti-psp-examples
	install $(PSP_EXAMPLES_INSTALL_DIR)/video/bin/* $(EXEC_DIR)/usr/share/ti/ti-psp-examples
	install $(PSP_EXAMPLES_INSTALL_DIR)/watchdog/bin/* $(EXEC_DIR)/usr/share/ti/ti-psp-examples

###############################################################################
# Build SYSLINK
###############################################################################
syslink: 
	${MAKE} -C ${SYSLINK_INSTALL_DIR} $(SYSLINK_BUILD_VARS) syslink

syslink_driver:
	${MAKE} -C ${SYSLINK_INSTALL_DIR} $(SYSLINK_BUILD_VARS) syslink-driver

syslink_hlos:
	${MAKE} -C ${SYSLINK_INSTALL_DIR} $(SYSLINK_BUILD_VARS) syslink-hlos

syslink_rtos:
	${MAKE} -C ${SYSLINK_INSTALL_DIR} $(SYSLINK_BUILD_VARS) syslink-rtos


syslink_clean: 
	${MAKE} -C ${SYSLINK_INSTALL_DIR} $(SYSLINK_BUILD_VARS) clean

syslink_install:
	install -d $(EXEC_DIR)/usr/lib
	install -d $(EXEC_DIR)/lib/modules/$(KERNEL_VERSION)/kernel/drivers/dsp
	install ${SYSLINK_INSTALL_DIR}/packages/ti/syslink/bin/$(SYSLINK_PLATFORM)/syslink.ko $(EXEC_DIR)/lib/modules/$(KERNEL_VERSION)/kernel/drivers/dsp
	install ${SYSLINK_INSTALL_DIR}/packages/ti/syslink/lib/syslink.a* $(EXEC_DIR)/usr/lib

###############################################################################
# Build SGX Kernel Modules
###############################################################################
sgx-driver: 
	$(MAKE) -C $(GRAPHICS_INSTALL_DIR) $(GRAPHICS_BUILD_VARS) all_km

sgx-driver_clean: 
	$(MAKE) -C $(GRAPHICS_INSTALL_DIR) $(GRAPHICS_BUILD_VARS) clean_km

sgx-driver_install: 
	install -d $(EXEC_DIR)/lib/modules/$(KERNEL_VERSION)/kernel/drivers/gpu/pvr
	for i in `find $(GRAPHICS_INSTALL_DIR)/GFX_Linux_KM -name "*.ko"`; do \
		install $$i $(EXEC_DIR)/lib/modules/$(KERNEL_VERSION)/kernel/drivers/gpu/pvr; \
	done

################################################################################
# Build Matrix GUI Application Launcher
################################################################################
matrix:
	. $(DVSDK_INSTALL_DIR)/linux-devkit/environment-setup ; cd example-applications/matrix-gui-e* ; qmake ; $(MAKE) PLATFORM=$(MATRIX_PLATFORM)

matrix_clean:
	. $(DVSDK_INSTALL_DIR)/linux-devkit/environment-setup;  cd example-applications/matrix-gui-e* ; qmake ; $(MAKE) distclean

matrix_install:
	install -d $(EXEC_DIR)/usr/share/matrix/html
	install -d $(EXEC_DIR)/usr/share/matrix/images
	install -d $(EXEC_DIR)/usr/bin
	install -m 0755 $(DVSDK_INSTALL_DIR)/example-applications/matrix-gui-e*/matrix_gui $(EXEC_DIR)/usr/bin/
	install  $(DVSDK_INSTALL_DIR)/example-applications/matrix-gui-e*/$(MATRIX_PLATFORM)/bin/* \
        $(EXEC_DIR)/usr/bin
	install  $(DVSDK_INSTALL_DIR)/example-applications/matrix-gui-e*/$(MATRIX_PLATFORM)/html/* \
        $(EXEC_DIR)/usr/share/matrix/html
	install  $(DVSDK_INSTALL_DIR)/example-applications/matrix-gui-e*/images/* \
        $(EXEC_DIR)/usr/share/matrix/images

###################################################################################
# build media controller utils
##################################################################################
media-controller-utils:
	make -C $(MEDIA_CONTROLLER_UTILS_INSTALL_DIR) $(MEDIA_CONTROLLER_UTILS_BUILD_VARS)

media-controller-utils_clean:
	make -C  $(MEDIA_CONTROLLER_UTILS_INSTALL_DIR) $(MEDIA_CONTROLLER_UTILS_BUILD_VARS) clean

media-controller-utils_install:
	make -C  $(MEDIA_CONTROLLER_UTILS_INSTALL_DIR) $(MEDIA_CONTROLLER_UTILS_BUILD_VARS) install
	for i in `find board-support/prebuilt-images -name "*.xem3" -or -name "*.xe674"`; do \
		install $$i $(EXEC_DIR)/usr/share/ti/ti-media-controller-utils/ ; \
	done


###################################################################################
# build EDMA3 LLD
##################################################################################
edma3lld:
	make -C $(EDMA3_LLD_INSTALL_DIR)/packages $(EDMA3_LLD_BUILD_VARS) $(EDMA3_LLD_TARGET)

edma3lld_clean:
	make -C $(EDMA3_LLD_INSTALL_DIR)/packages $(EDMA3_LLD_BUILD_VARS) cleanall


###############################################################################
# Build RPE
###############################################################################
rpe: 
	${MAKE} -C ${RPE_INSTALL_DIR} $(RPE_BUILD_VARS) all

rpe_linux:
	${MAKE} -C ${RPE_INSTALL_DIR} $(RPE_BUILD_VARS) linuxsharedlib

rpe_dsp:
	${MAKE} -C ${RPE_INSTALL_DIR} $(RPE_BUILD_VARS) dsplib

rpe_clean: 
	${MAKE} -C ${RPE_INSTALL_DIR} $(RPE_BUILD_VARS) clean

rpe_install:
	${MAKE} -C ${RPE_INSTALL_DIR} $(RPE_BUILD_VARS) install prefix=$(EXEC_DIR)/usr

###############################################################################
# Build the DSP devkit
###############################################################################
DSP_DEVKIT_LOG := $(DSP_DEVKIT_DIR)/ti-install.log

dsp-devkit:
	@rm -f $(DSP_DEVKIT_LOG)
	@rm -rf $(DSP_DEVKIT_DIR)/packages

	@echo "Installing $(notdir $(UIA_INSTALL_DIR)) to dsp-devkit.."
	@$(MAKE) -C $(UIA_INSTALL_DIR) 	DESTDIR=$(DSP_DEVKIT_DIR) \
		-f sdk.mk install-packages
	@echo $(notdir $(UIA_INSTALL_DIR)) >> $(DSP_DEVKIT_LOG)

	@echo "Installing $(notdir $(SYSBIOS_INSTALL_DIR)) to dsp-devkit.."
	@$(MAKE) -C $(SYSBIOS_INSTALL_DIR) DESTDIR=$(DSP_DEVKIT_DIR) \
		-f bios.mak install-packages
	@echo $(notdir $(SYSBIOS_INSTALL_DIR)) >> $(DSP_DEVKIT_LOG)

	@echo "Installing $(notdir $(IPC_INSTALL_DIR)) to dsp-devkit.."
	@$(MAKE) -C $(IPC_INSTALL_DIR) DESTDIR=$(DSP_DEVKIT_DIR) \
		-f ipc.mak install-packages
	@echo $(notdir $(IPC_INSTALL_DIR)) >> $(DSP_DEVKIT_LOG)

	@echo "Installing $(notdir $(EDMA3_LLD_INSTALL_DIR)) to dsp-devkit.."
	@$(MAKE) -C $(EDMA3_LLD_INSTALL_DIR) DESTDIR=$(DSP_DEVKIT_DIR) \
		-f sdk.mk install-packages
	@echo $(notdir $(EDMA3_LLD_INSTALL_DIR)) >> $(DSP_DEVKIT_LOG)

	@echo "Installing $(notdir $(XDAIS_INSTALL_DIR)) to dsp-devkit.."
	@$(MAKE) -C $(XDAIS_INSTALL_DIR) DESTDIR=$(DSP_DEVKIT_DIR) \
		-f xdais.mak install-packages
	@echo $(notdir $(XDAIS_INSTALL_DIR)) >> $(DSP_DEVKIT_LOG)

	@chmod u+w -R $(DSP_DEVKIT_DIR)/packages $(DSP_DEVKIT_DIR)/docs
	@echo "Generating API documentation.."
#	@cd $(DSP_DEVKIT_DIR) && doxygen
#	@rm -f Doxyfile
	@echo "Generating md5sums.."
	@cd $(DSP_DEVKIT_DIR) && $(XDC_INSTALL_DIR)/xs xdc.tools.cdoc -od:docs/cdoc -Pr packages
	@echo "Generating md5sums.."
	@cd $(DSP_DEVKIT_DIR) && find . -type f -exec md5sum {} \; > $(EZSDK_INSTALL_DIR)/.dspmd5sums
	@mv -f $(EZSDK_INSTALL_DIR)/.dspmd5sums $(DSP_DEVKIT_DIR)/md5sums

###############################################################################
# Build the Linux devkit
###############################################################################
LINUX_DEVKIT_DESTDIR := $(LINUX_DEVKIT_DIR)/arm-none-linux-gnueabi
LINUX_DEVKIT_LOG := $(LINUX_DEVKIT_DIR)/ti-install.log

linux-devkit:
	@rm -f $(LINUX_DEVKIT_LOG)

	@echo "Installing $(notdir $(IPC_INSTALL_DIR)) to linux-devkit.."
	@$(MAKE) -C $(IPC_INSTALL_DIR) DESTDIR=$(LINUX_DEVKIT_DESTDIR) \
		-f ipc.mak install
	@echo $(notdir $(IPC_INSTALL_DIR)) >> $(LINUX_DEVKIT_LOG)

	@echo "Installing $(notdir $(XDAIS_INSTALL_DIR)) to linux-devkit.."
	@$(MAKE) -C $(XDAIS_INSTALL_DIR) DESTDIR=$(LINUX_DEVKIT_DESTDIR) \
		-f xdais.mak install
	@echo $(notdir $(XDAIS_INSTALL_DIR)) >> $(LINUX_DEVKIT_LOG)

	@echo "Installing $(notdir $(SYSLINK_INSTALL_DIR)) to linux-devkit.."
	@$(MAKE) -C $(SYSLINK_INSTALL_DIR) DESTDIR=$(LINUX_DEVKIT_DESTDIR) \
		-f sdk.mk install
	@echo $(notdir $(SYSLINK_INSTALL_DIR)) >> $(LINUX_DEVKIT_LOG)

	@echo "Installing $(notdir $(UIA_INSTALL_DIR)) to linux-devkit.."
	@$(MAKE) -C $(UIA_INSTALL_DIR) DESTDIR=$(LINUX_DEVKIT_DESTDIR) \
		-f sdk.mk install
	@echo $(notdir $(UIA_INSTALL_DIR)) >> $(LINUX_DEVKIT_LOG)

	@echo "Installing $(notdir $(GRAPHICS_INSTALL_DIR)) to linux-devkit.."
	@$(MAKE) -C $(GRAPHICS_INSTALL_DIR) DESTDIR=$(LINUX_DEVKIT_DESTDIR) \
		-f sdk.mk install
	@echo $(notdir $(GRAPHICS_INSTALL_DIR)) >> $(LINUX_DEVKIT_LOG)

	@echo "Installing headers from $(notdir $(LINUXKERNEL_INSTALL_DIR)) to linux-devkit.."
	@$(MAKE) -C $(LINUXKERNEL_INSTALL_DIR)  headers_install ARCH=arm \
		INSTALL_HDR_PATH=$(LINUX_DEVKIT_DESTDIR)/usr/src/$(notdir $(LINUXKERNEL_INSTALL_DIR))-headers

	@chmod u+w -R $(LINUX_DEVKIT_DESTDIR)/usr
	@echo "Generating md5sums.."
	@cd $(LINUX_DEVKIT_DIR) && find . -type f -exec md5sum {} \; > $(EZSDK_INSTALL_DIR)/.linuxmd5sums
	@mv -f $(EZSDK_INSTALL_DIR)/.linuxmd5sums $(LINUX_DEVKIT_DIR)/md5sums
