From 5ab8f3b5ce5f5f1483fda934784cffed31de4063 Mon Sep 17 00:00:00 2001
From: Brijesh Singh <bksingh@ti.com>
Date: Sat, 5 Jun 2010 13:43:25 -0500
Subject: [PATCH] gstreamer ti tracker 1055

---
 Makefile.external                |   28 +++++++++--
 src/gsttiauddec1.c               |   20 ++++++++
 src/gstticodecplugin_dm355.cfg   |   99 ++++++++++++++------------------------
 src/gstticodecplugin_dm365.cfg   |   70 ++++++++++++--------------
 src/gstticodecplugin_dm6467t.cfg |   34 +++++++++++++
 src/gstticodecs_dm355.c          |   11 ++--
 src/gstticodecs_dm365.c          |   42 ++++++++++++++--
 src/gstticodecs_dm6467.c         |    2 +-
 src/gstticodecs_dm6467t.c        |   69 ++++++++++++++++++++++++++
 src/gsttividdec2.c               |   73 +++++++++++++++-------------
 src/gsttividenc1.c               |    4 ++
 11 files changed, 301 insertions(+), 151 deletions(-)
 create mode 100644 src/gstticodecplugin_dm6467t.cfg
 create mode 100644 src/gstticodecs_dm6467t.c

diff --git a/Makefile.external b/Makefile.external
index abd7d2d..1f67783 100644
--- a/Makefile.external
+++ b/Makefile.external
@@ -23,7 +23,7 @@ $(error You need to define the environment variable DMAI_INSTALL_DIR)
 endif
 
 default:
-	@echo "Please specify the target: dm6446, omap3530, dm355, dm6467, dm365"
+	@echo "Please specify the target: dm6446, omap3530, dm355, dm6467, dm6467t, dm365"
 
 export GST_TI_PLATFORM=$(MAKECMDGOALS)
 export BIOS_INSTALL_DIR
@@ -43,8 +43,11 @@ export XDC_INSTALL_DIR
 export EDMA3_LLD_INSTALL_DIR
 
 ifeq ($(GST_TI_PLATFORM), dm355)
-    export XDC_TARGET   = gnu.targets.MVArm9
-    export XDC_PLATFORM = ti.platforms.evmDM355
+    export XDC_TARGET    = gnu.targets.arm.GCArmv5T
+    export XDC_PLATFORM  = ti.platforms.evmDM355
+    export MVTOOL_PREFIX = $(CSTOOL_PREFIX)
+    export MVTOOL_DIR    = $(CSTOOL_DIR)
+    export PLATFORM_XDC  = ${XDC_PLATFORM}
 endif
 
 ifeq ($(GST_TI_PLATFORM), dm6446)
@@ -57,9 +60,21 @@ ifeq ($(GST_TI_PLATFORM), dm6467)
     export XDC_PLATFORM = ti.platforms.evmDM6467
 endif
 
+ifeq ($(GST_TI_PLATFORM), dm6467t)
+    export XDC_TARGET    = gnu.targets.arm.GCArmv5T
+    export XDC_PLATFORM  = ti.platforms.evmDM6467
+    export LINK_XDC_ROOT = $(LINK_INSTALL_DIR)
+    export MVTOOL_PREFIX = $(CSTOOL_PREFIX)
+    export MVTOOL_DIR    = $(CSTOOL_DIR)
+    export PLATFORM_XDC  = ${XDC_PLATFORM}
+endif
+
 ifeq ($(GST_TI_PLATFORM), dm365)
-    export XDC_TARGET   = gnu.targets.MVArm9
-    export XDC_PLATFORM = ti.platforms.evmDM365
+    export XDC_TARGET    = gnu.targets.arm.GCArmv5T
+    export XDC_PLATFORM  = ti.platforms.evmDM365
+    export MVTOOL_PREFIX = $(CSTOOL_PREFIX)
+    export MVTOOL_DIR    = $(CSTOOL_DIR)
+    export PLATFORM_XDC  = ${XDC_PLATFORM}
 endif
 
 ifeq ($(GST_TI_PLATFORM), omap3530)
@@ -87,6 +102,9 @@ dm6446: Makefile
 dm6467: Makefile
 	$(MAKE) -f Makefile
 
+dm6467t: Makefile
+	$(MAKE) -f Makefile
+
 dm355: Makefile
 	$(MAKE) -f Makefile
 
diff --git a/src/gsttiauddec1.c b/src/gsttiauddec1.c
index a196f4b..55aac43 100644
--- a/src/gsttiauddec1.c
+++ b/src/gsttiauddec1.c
@@ -149,6 +149,8 @@ static void
     gst_tiauddec1_dispose(GObject * object);
 static gboolean 
     gst_tiauddec1_set_query_pad(GstPad * pad, GstQuery * query);
+static gboolean
+    gst_tiauddec1_codec_is_aac(GstTIAuddec1 *auddec1);
 
 /******************************************************************************
  * gst_tiauddec1_class_init_trampoline
@@ -1091,6 +1093,14 @@ static gboolean gst_tiauddec1_codec_start (GstTIAuddec1  *auddec1)
         return FALSE;
     }
 
+    if (gst_tiauddec1_codec_is_aac(auddec1)) {
+        #if defined (Platform_dm365)
+        params.dataEndianness = XDM_LE_16;
+        #else
+        ; /* do nothing */
+        #endif
+    }
+
     /* Initialize audio decoder */
     GST_LOG("opening audio decoder \"%s\"\n", auddec1->codecName);
     auddec1->hAd = Adec1_create(auddec1->hEngine, (Char*)auddec1->codecName,
@@ -1408,6 +1418,16 @@ static void gst_tiauddec1_drain_pipeline(GstTIAuddec1 *auddec1)
 
 }
 
+/******************************************************************************
+ * gst_tiauddec1_codec_is_aac
+ *     Return TRUE if we are decoding an AAC stream
+ ******************************************************************************/
+static gboolean gst_tiauddec1_codec_is_aac(GstTIAuddec1 *auddec1)
+{
+    GstTICodec *codec = gst_ticodec_get_codec("AAC Audio Decoder");
+    return (codec && !strcmp(codec->CE_CodecName, auddec1->codecName));
+}
+
 
 /******************************************************************************
  * Custom ViM Settings for editing this file
diff --git a/src/gstticodecplugin_dm355.cfg b/src/gstticodecplugin_dm355.cfg
index 7ceae4f..2905d61 100644
--- a/src/gstticodecplugin_dm355.cfg
+++ b/src/gstticodecplugin_dm355.cfg
@@ -1,84 +1,59 @@
-/*
- * Copyright (C) $year Texas Instruments Incorporated - http://www.ti.com/
- *
- * This program is free software; you can redistribute it and/or modify 
- * it under the terms of the GNU Lesser General Public License as
- * published by the Free Software Foundation version 2.1 of the License.
- *
- * This program is distributed #as is# WITHOUT ANY WARRANTY of any kind,
- * whether express or implied; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * Lesser General Public License for more details.
+/*  ===========================================================================
+ *   Copyright (c)  Texas Instruments Incorporated 2009
  *
+ *   Use of this software is controlled by the terms and conditions found in
+ *   the license agreement under which this software has been supplied or
+ *   provided.
+ *  ===========================================================================
  */
 
-prog.build.platform = "ti.platforms.evmDM355";
-
 /* Load support for the Codec Engine OSAL */
 var osalGlobal = xdc.useModule('ti.sdo.ce.osal.Global');
 
 /* Configure CE to use it's DSP Link Linux version */
 osalGlobal.runtimeEnv = osalGlobal.LINUX;
 
+/* Configure RMAN */ 
+var RMAN                = xdc.useModule('ti.sdo.fc.rman.RMAN');
+RMAN.useDSKT2           = false;
+RMAN.persistentAllocFxn = "__ALG_allocMemory";
+RMAN.persistentFreeFxn  = "__ALG_freeMemory";
+RMAN.semCreateFxn       = "Sem_create";
+RMAN.semDeleteFxn       = "Sem_delete";
+RMAN.semPendFxn         = "Sem_pend";
+RMAN.semPostFxn         = "Sem_post";
+RMAN.tableSize          = 10;
+
+var EDMA3     = xdc.useModule('ti.sdo.fc.edma3.Settings');
+var EDMA3CHAN = xdc.useModule('ti.sdo.fc.ires.edma3chan.EDMA3CHAN');
+var EDMA      = xdc.useModule('ti.sdo.linuxutils.edma.EDMA');
+var VICPLU    = xdc.useModule('ti.sdo.linuxutils.vicp.VICP');
+var VICP      = xdc.useModule('ti.sdo.fc.ires.vicp.VICP2');
+var VICPSYNC  = xdc.useModule('ti.sdo.fc.vicpsync.VICPSYNC');
+var ADDRSPACE = xdc.useModule('ti.sdo.fc.ires.addrspace.ADDRSPACE');
+var CMEM      = xdc.useModule('ti.sdo.linuxutils.cmem.CMEM');
+
 /*
  *  ======== Engine Configuration ========
  */
 var viddec   = xdc.module('ti.sdo.ce.video2.IVIDDEC2');
-var imgenc   = xdc.module('ti.sdo.ce.image1.IIMGENC1');
-var MPEG4DEC = xdc.useModule('ti.sdo.codecs.mpeg4dec.dm355.ce.MPEG4DEC');
-var MPEG4ENC = xdc.useModule('ti.sdo.codecs.mpeg4enc.dm355.ce.MPEG4ENC');
-var JPEGENC = xdc.useModule('ti.sdo.codecs.jpegenc.dm355.ce.JPEGENC');
-var JPEGDEC = xdc.useModule('ti.sdo.codecs.jpegdec.dm355.ce.JPEGDEC');
+var auddec   = xdc.module('ti.sdo.ce.audio.IAUDDEC');
+var videnc   = xdc.module('ti.sdo.ce.video1.IVIDENC1');
+var audenc   = xdc.module('ti.sdo.ce.audio.IAUDENC');
+
+var MPEG4DEC = xdc.useModule('ti.sdo.codecs.mpeg4dec.ce.MPEG4DEC');
+var JPEGDEC  = xdc.useModule('ti.sdo.codecs.jpegdec.ce.JPEGDEC');
+var MPEG4ENC = xdc.useModule('ti.sdo.codecs.mpeg4enc.ce.MPEG4ENC');
+var JPEGENC  = xdc.useModule('ti.sdo.codecs.jpegenc.ce.JPEGENC');
 
-var Engine   = xdc.useModule('ti.sdo.ce.Engine');
-var decodeEngine = Engine.create("decode", [
+var Engine = xdc.useModule('ti.sdo.ce.Engine');
+var myEngine = Engine.create("codecServer", [
     {name: "mpeg4dec", mod: MPEG4DEC, local: true, groupId: 1},
     {name: "jpegdec", mod: JPEGDEC, local: true, groupId: 1},
-]);
-
-var encodeEngine = Engine.create("encode", [
     {name: "mpeg4enc", mod: MPEG4ENC, local: true, groupId: 1},
-    {name: "jpegenc", mod: JPEGENC, local: true, groupId: 1},
+    {name: "jpegenc", mod: JPEGENC, local: true, groupId: 1}
 ]);
 
 /* Load support for the 'Davinci Multimedia Application Interface' modules */
 var DMAI = xdc.loadPackage('ti.sdo.dmai');
 
-/*
- *  ======== DMAN3 Configuration ========
- */
-
-var DMAN3 = xdc.useModule('ti.sdo.fc.dman3.DMAN3');
-
-/* give DMAN3 all TCCs except those hard-coded by The JPEG & MPEG Enc & Decs */
-
-/*
- *   For the 32-63 range, configure tccAllocationMaskH to exclude used channels
- *   JPEG Dec: {33-47, 52-57}
- *   JPEG Enc: {34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49}
- *   MPEG Dec: {32-63}
- *   MPEG Enc: {12, 13, 34, 35, 40,41,42,43,44,45,46,47,48,49,50,52,53,
- *              54,55,56,57,63}
- */
-DMAN3.tccAllocationMaskH = 0x0; /* everthing 32-63 hardcoded and unavailable */
-
-/* Give DMAN3 all lower TCCs except what's taken by Linux kernel and a Codec:
- * Based on the info from montavista: {2, 3, 8, 9, 26, 27, 30, 31}
- * and MPEG Enc taking up:            {12, 13}
- */
-DMAN3.tccAllocationMaskL = 0x33ffccf3;
-
-/* Following assignments will give DMAN3 control of PaRAMs above 78: */
-DMAN3.paRamBaseIndex     = 64;
-DMAN3.numPaRamEntries    = 48;
-DMAN3.nullPaRamIndex     = 127;
-
-/* Configure Scratch Group's DMAN3 resources */
-DMAN3.numTccGroup[1]     = 0;
-DMAN3.numPaRamGroup[1]   = 32;
-
-DMAN3.qdmaChannels       = [0, 1, 2, 3, 4, 5, 6, 7];
-DMAN3.maxQdmaChannels    = 8;
-DMAN3.numQdmaChannels    = 8;
-DMAN3.maxTCs             = 2;
-
diff --git a/src/gstticodecplugin_dm365.cfg b/src/gstticodecplugin_dm365.cfg
index 6442dce..9642504 100644
--- a/src/gstticodecplugin_dm365.cfg
+++ b/src/gstticodecplugin_dm365.cfg
@@ -1,19 +1,11 @@
-/*
- * Copyright (C) $year Texas Instruments Incorporated - http://www.ti.com/
- *
- * This program is free software; you can redistribute it and/or modify 
- * it under the terms of the GNU Lesser General Public License as
- * published by the Free Software Foundation version 2.1 of the License.
- *
- * This program is distributed #as is# WITHOUT ANY WARRANTY of any kind,
- * whether express or implied; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * Lesser General Public License for more details.
+/*  ============================================================================
+ *   Copyright (c)  Texas Instruments Incorporated 2009
  *
+ *   Use of this software is controlled by the terms and conditions found in the
+ *   license agreement under which this software has been supplied or provided.
+ *  ============================================================================
  */
 
-prog.build.platform = "ti.platforms.evmDM365";
-
 /* Load support for the Codec Engine OSAL */
 var osalGlobal = xdc.useModule('ti.sdo.ce.osal.Global');
 
@@ -23,35 +15,38 @@ osalGlobal.runtimeEnv = osalGlobal.LINUX;
 /*
  *  ======== Engine Configuration ========
  */
-var videnc   = xdc.module('ti.sdo.ce.video1.IVIDENC1');
-var viddec   = xdc.module('ti.sdo.ce.video2.IVIDDEC2');
+var CE_AUDIO1 = xdc.loadPackage("ti.sdo.ce.audio1");
+var CE_VIDEO2 = xdc.loadPackage("ti.sdo.ce.video2");
 
-var MPEG4ENC = xdc.useModule('ti.sdo.codecs.mpeg4enc.ce.MPEG4ENC');
-var H264ENC  = xdc.useModule('ti.sdo.codecs.h264enc.ce.H264ENC');
-var MPEG4DEC = xdc.useModule('ti.sdo.codecs.mpeg4dec.ce.MPEG4DEC');
+var MPEG4DEC = xdc.useModule('ti.sdo.codecs.mpeg4dec_hdvicp.ce.MPEG4DEC_HDVICP');
+var MPEG2DEC = xdc.useModule('ti.sdo.codecs.mpeg2dec.ce.MPEG2DEC');
 var H264DEC  = xdc.useModule('ti.sdo.codecs.h264dec.ce.H264DEC');
-var JPEGENC = xdc.useModule('ti.sdo.codecs.jpegenc.ce.JPEGENC');
-var JPEGDEC = xdc.useModule('ti.sdo.codecs.jpegdec.ce.JPEGDEC');
+var AACDEC   = xdc.useModule('ittiam.codecs.aac_dec.ce.AAC_DEC');
+var JPEGDEC  = xdc.useModule('ti.sdo.codecs.jpegdec.ce.JPEGDEC');
+var MPEG4ENC = xdc.useModule('ti.sdo.codecs.mpeg4enc_hdvicp.ce.MPEG4ENC_HDVICP');
+var MPEG2ENC = xdc.useModule('ti.sdo.codecs.mpeg2enc.ce.MPEG2ENC');
+var H264ENC  = xdc.useModule('ti.sdo.codecs.h264enc.ce.H264ENC');
+var JPEGENC  = xdc.useModule('ti.sdo.codecs.jpegenc.ce.JPEGENC');
 
 var Engine = xdc.useModule('ti.sdo.ce.Engine');
-var encodeEngine = Engine.create("encode", [
-    {name: "mpeg4enc", mod: MPEG4ENC, local: true, groupId: 1},
-    {name: "h264enc", mod: H264ENC, local: true, groupId: 1},
-    {name: "jpegenc", mod: JPEGENC, local: true, groupId: 1},
-]);
-var decodeEngine = Engine.create("decode", [
-    {name: "mpeg4dec", mod: MPEG4DEC, local: true, groupId: 1},
-    {name: "h264dec", mod: H264DEC, local: true, groupId: 1},
-    {name: "jpegdec", mod: JPEGDEC, local: true, groupId: 1},
+var myEngine = Engine.create("codecServer", [
+    {name: "mpeg4dec", mod: MPEG4DEC, local: true},
+    {name: "mpeg2dec", mod: MPEG2DEC, local: true},
+    {name: "h264dec", mod: H264DEC, local: true},
+    {name: "aacdec", mod: AACDEC, local: true, groupId: 1},
+    {name: "jpegdec", mod: JPEGDEC, local: true},
+    {name: "mpeg4enc", mod: MPEG4ENC, local: true},
+    {name: "mpeg2enc", mod: MPEG2ENC, local: true},
+    {name: "h264enc", mod: H264ENC, local: true},
+    {name: "jpegenc", mod: JPEGENC, local: true}
 ]);
 
+algSettings = xdc.useModule('ti.sdo.ce.alg.Settings');
+algSettings.useCache = false;
+
 /* Load support for the 'Davinci Multimedia Application Interface' modules */
 var DMAI = xdc.loadPackage('ti.sdo.dmai');
 
-/* Load support for SimpleWidget */
-/*var SW = xdc.loadPackage('ti.sdo.simplewidget');*/
-
-
 /* Configure RMAN */ 
 var RMAN = xdc.useModule('ti.sdo.fc.rman.RMAN');
 RMAN.useDSKT2 = false;
@@ -78,17 +73,16 @@ var HDVICP = xdc.useModule('ti.sdo.fc.ires.hdvicp.HDVICP');
 
 var VICP = xdc.useModule('ti.sdo.fc.ires.vicp.VICP2');
 
-var ADDRSPACE = xdc.useModule('ti.sdo.fc.ires.addrspace.ADDRSPACE');
-
 var EDMA3CHAN = xdc.useModule('ti.sdo.fc.ires.edma3chan.EDMA3CHAN');
 
-var LSP = xdc.useModule('ti.sdo.linuxutils.edma.EDMA');
+var EDMA = xdc.useModule('ti.sdo.linuxutils.edma.EDMA');
 
-var CMEM = xdc.useModule('ti.sdo.linuxutils.cmem.CMEM');
+var ADDRSPACE = xdc.useModule('ti.sdo.fc.ires.addrspace.ADDRSPACE');
 
+var CMEM = xdc.useModule('ti.sdo.linuxutils.cmem.CMEM');
 
 /* Uncomment these lines if you wish to debug FC and enable FC trace */
- 
+/* 
 /*
 xdc.loadPackage('ti.sdo.fc.ires.vicp').profile = "debug_trace";
 xdc.loadPackage('ti.sdo.fc.ires.edma3chan').profile = "debug_trace";
diff --git a/src/gstticodecplugin_dm6467t.cfg b/src/gstticodecplugin_dm6467t.cfg
new file mode 100644
index 0000000..686cfeb
--- /dev/null
+++ b/src/gstticodecplugin_dm6467t.cfg
@@ -0,0 +1,34 @@
+/*  ============================================================================
+ *   Copyright (c)  Texas Instruments Incorporated 2009
+ *
+ *   Use of this software is controlled by the terms and conditions found in the
+ *   license agreement under which this software has been supplied or provided.
+ *  ============================================================================
+ */
+
+/* Load support for the Codec Engine OSAL */
+var osalGlobal = xdc.useModule('ti.sdo.ce.osal.Global');
+var os = xdc.useModule('ti.sdo.ce.osal.linux.Settings');
+osalGlobal.os = os;
+
+/* Configure CE to use it's DSP Link Linux version */
+var ipc = xdc.useModule('ti.sdo.ce.ipc.Settings');
+ipc.commType = ipc.COMM_DSPLINK;
+
+/*
+ *  ======== Engine Configuration ========
+ */
+var Engine = xdc.useModule('ti.sdo.ce.Engine');
+var demoEngine = Engine.createFromServer(
+    "codecServer",
+    "./bin/cs.x64P",
+    "ti.sdo.server.cs"
+    );
+
+var combopath = "" + java.lang.System.getenv("CODEC_SERVER");
+if (combopath != "" && combopath != "null") {
+       demoEngine.server = java.lang.System.getenv("CODEC_SERVER");
+}
+
+/* Load support for the 'Davinci Multimedia Application Interface' modules */
+var DMAI = xdc.loadPackage('ti.sdo.dmai');
diff --git a/src/gstticodecs_dm355.c b/src/gstticodecs_dm355.c
index a08fded..4d1194c 100644
--- a/src/gstticodecs_dm355.c
+++ b/src/gstticodecs_dm355.c
@@ -22,8 +22,7 @@
 #include "gstticodecs.h"
 
 /* Declaration of the production engine and decoders shipped with the DVSDK */
-static Char decodeEngine[] = "decode";
-static Char encodeEngine[] = "encode";
+static Char codecServer[] = "codecServer";
 
 /* NULL terminated list of speech decoders in the engine to use in the demo */
 GstTICodec gst_ticodec_codecs[] = {
@@ -32,25 +31,25 @@ GstTICodec gst_ticodec_codecs[] = {
     {
         "MPEG4 Video Decoder",   /* String name of codec used by plugin      */
         "mpeg4dec",              /* String name of codec used by CE          */
-        decodeEngine             /* Engine that contains this codec          */
+        codecServer              /* Engine that contains this codec          */
     },
 
     {
         "MPEG4 Video Encoder",   /* String name of codec used by plugin      */
         "mpeg4enc",              /* String name of codec used by CE          */
-        encodeEngine             /* Engine that contains this codec          */
+        codecServer              /* Engine that contains this codec          */
     },
 
     /* Imaging Codecs */
     {
         "JPEG Image Encoder",
         "jpegenc",
-        encodeEngine
+        codecServer 
     },
     {
         "JPEG Image Decoder",
         "jpegdec",
-        decodeEngine
+        codecServer 
     },
 
     { NULL }
diff --git a/src/gstticodecs_dm365.c b/src/gstticodecs_dm365.c
index 3a101c6..3061abd 100644
--- a/src/gstticodecs_dm365.c
+++ b/src/gstticodecs_dm365.c
@@ -22,8 +22,7 @@
 #include "gstticodecs.h"
 
 /* Declaration of the production engine and decoders shipped with the DVSDK */
-static Char decodeEngine[] = "decode";
-static Char encodeEngine[] = "encode";
+static Char codecServer[] = "codecServer";
 
 /* NULL terminated list of speech decoders in the engine to use in the demo */
 GstTICodec gst_ticodec_codecs[] = {
@@ -32,25 +31,56 @@ GstTICodec gst_ticodec_codecs[] = {
     {
         "MPEG4 Video Decoder",   /* String name of codec used by plugin      */
         "mpeg4dec",              /* String name of codec used by CE          */
-        decodeEngine             /* Engine that contains this codec          */
+        codecServer              /* Engine that contains this codec          */
+    },
+
+    {
+        "MPEG2 Video Decoder",   /* String name of codec used by plugin      */
+        "mpeg2dec",              /* String name of codec used by CE          */
+        codecServer              /* Engine that contains this codec          */
     },
 
     {
         "MPEG4 Video Encoder",   /* String name of codec used by plugin      */
         "mpeg4enc",              /* String name of codec used by CE          */
-        encodeEngine             /* Engine that contains this codec          */
+        codecServer             /* Engine that contains this codec          */
+    },
+
+    {
+        "MPEG2 Video Encoder",   /* String name of codec used by plugin      */
+        "mpeg2enc",              /* String name of codec used by CE          */
+        codecServer              /* Engine that contains this codec          */
     },
 
     {
         "H.264 Video Decoder",   /* String name of codec used by plugin      */
         "h264dec",               /* String name of codec used by CE          */
-        decodeEngine             /* Engine that contains this codec          */
+        codecServer             /* Engine that contains this codec          */
     },
 
     {
         "H.264 Video Encoder",   /* String name of codec used by plugin      */
         "h264enc",               /* String name of codec used by CE          */
-        encodeEngine             /* Engine that contains this codec          */
+        codecServer             /* Engine that contains this codec          */
+    },
+
+    /* Imaging Codecs */
+    {
+        "JPEG Image Encoder",
+        "jpegenc",
+        codecServer 
+    },
+    {
+        "JPEG Image Decoder",
+        "jpegdec",
+        codecServer 
+    },
+
+    /* Audio Codecs */
+    {
+        "AAC Audio Decoder",     /* String name of codec used by plugin      */
+        "aacdec",                /* String name of codec used by CE          */
+        codecServer              /* Engine that contains this codec          */
     },
 
     { NULL }
diff --git a/src/gstticodecs_dm6467.c b/src/gstticodecs_dm6467.c
index 25ed192..17a8740 100644
--- a/src/gstticodecs_dm6467.c
+++ b/src/gstticodecs_dm6467.c
@@ -1,5 +1,5 @@
 /*
- * gstticodecs_dm6446.c
+ * gstticodecs_dm6467.c
  *
  * This file provides information for available codecs on the DM6446 platform.
  *
diff --git a/src/gstticodecs_dm6467t.c b/src/gstticodecs_dm6467t.c
new file mode 100644
index 0000000..24df7aa
--- /dev/null
+++ b/src/gstticodecs_dm6467t.c
@@ -0,0 +1,69 @@
+/*
+ * gstticodecs_dm6467t.c
+ *
+ * This file provides information for available codecs on the DM6446 platform.
+ *
+ * Original Author:
+ *     Don Darling, Texas Instruments, Inc.
+ *
+ * Copyright (C) 2010 Texas Instruments Incorporated - http://www.ti.com/
+ *
+ * This program is free software; you can redistribute it and/or modify 
+ * it under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation version 2.1 of the License.
+ *
+ * This program is distributed #as is# WITHOUT ANY WARRANTY of any kind,
+ * whether express or implied; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ */
+
+#include "gstticodecs.h"
+
+/* Declaration of the production engine and decoders shipped with the DVSDK */
+static Char codecServer[] = "codecServer";
+
+/* NULL terminated list of speech decoders in the engine to use in the demo */
+GstTICodec gst_ticodec_codecs[] = {
+
+    /* Speech Codecs */
+    {
+        "G.711 Speech Decoder",  /* String name of codec used by plugin      */
+        "g711dec",               /* String name of codec used by CE          */
+        codecServer              /* Engine that contains this codec          */
+    }, {
+        "G.711 Speech Encoder",  /* String name of codec used by plugin      */
+        "g711enc",               /* String name of codec used by CE          */
+        codecServer              /* Engine that contains this codec          */
+    },
+
+    /* Audio Codecs */
+    {
+        "AAC Audio Decoder",     /* String name of codec used by plugin      */
+        "aachedec",              /* String name of codec used by CE          */
+        codecServer              /* Engine that contains this codec          */
+    },
+
+    /* Video Codecs */
+    {
+        "H.264 Video Decoder",   /* String name of codec used by plugin      */
+        "h264dec",               /* String name of codec used by CE          */
+        codecServer              /* Engine that contains this codec          */
+    }, {
+        "H.264 BP/HP Decoder",   /* Name of codec used by plugin             */
+        "h2641080p60vdec",       /* String name of codec used by CE          */
+        codecServer              /* Engine that contains this codec          */
+    }, {
+        "H.264 Video Encoder",  /* String name of codec used by plugin       */
+        "h264enc",              /* String name of codec used by CE           */
+        codecServer             /* Engine that contains this codec           */
+    }, {
+        "MPEG2 Video Decoder",   /* String name of codec used by plugin      */
+        "mpeg2dec",              /* String name of codec used by CE          */
+        codecServer              /* Engine that contains this codec          */
+    },
+
+    { NULL }
+};
+
diff --git a/src/gsttividdec2.c b/src/gsttividdec2.c
index 1b8ef1a..0e28b3e 100644
--- a/src/gsttividdec2.c
+++ b/src/gsttividdec2.c
@@ -688,16 +688,8 @@ static gboolean gst_tividdec2_set_source_caps(
        given buffer */
     BufferGfx_getDimensions(hBuf, &dim);
 
-#if !defined(Platform_dm365)
-    caps =
-        gst_caps_new_simple("video/x-raw-yuv",
-            "format",    GST_TYPE_FOURCC,   GST_MAKE_FOURCC('U','Y','V','Y'),
-            "framerate", GST_TYPE_FRACTION, viddec2->framerateNum,
-                                            viddec2->framerateDen,
-            "width",     G_TYPE_INT,        dim.width,
-            "height",    G_TYPE_INT,        dim.height,
-            NULL);
-#else
+#if defined(Platform_dm365)   || defined(Platform_dm6467) || \
+    defined(Platform_dm6467t)
     caps =
         gst_caps_new_simple("video/x-raw-yuv",
             "format",   GST_TYPE_FOURCC,  GST_MAKE_FOURCC('N','V','1','2'),
@@ -706,6 +698,15 @@ static gboolean gst_tividdec2_set_source_caps(
             "width",    G_TYPE_INT,       dim.width,
             "height",   G_TYPE_INT,       dim.height,
             NULL);
+#else
+    caps =
+        gst_caps_new_simple("video/x-raw-yuv",
+            "format",    GST_TYPE_FOURCC,   GST_MAKE_FOURCC('U','Y','V','Y'),
+            "framerate", GST_TYPE_FRACTION, viddec2->framerateNum,
+                                            viddec2->framerateDen,
+            "width",     G_TYPE_INT,        dim.width,
+            "height",    G_TYPE_INT,        dim.height,
+            NULL);
 #endif
 
     /* Set the source pad caps */
@@ -1241,29 +1242,35 @@ static gboolean gst_tividdec2_codec_start (GstTIViddec2  *viddec2)
 
     /* Set up codec parameters depending on device */
     switch(device) {
-    case Cpu_Device_DM6467:
-        params.forceChromaFormat = XDM_YUV_420P;
-        params.maxWidth          = VideoStd_1080I_WIDTH;
-        params.maxHeight         = VideoStd_1080I_HEIGHT + 8;
-        colorSpace               = ColorSpace_YUV420PSEMI;
-        defaultNumBufs           = 5;
-        break;
-#if defined(Platform_dm365)
-    case Cpu_Device_DM365:
-        params.forceChromaFormat = XDM_YUV_420SP;
-        params.maxWidth          = VideoStd_720P_WIDTH;
-        params.maxHeight         = VideoStd_720P_HEIGHT;
-        colorSpace               = ColorSpace_YUV420PSEMI;
-        defaultNumBufs           = 5;
-        break;
-#endif
-    default:
-        params.forceChromaFormat = XDM_YUV_422ILE;
-        params.maxWidth          = VideoStd_D1_WIDTH;
-        params.maxHeight         = VideoStd_D1_PAL_HEIGHT;
-        colorSpace               = ColorSpace_UYVY;
-        defaultNumBufs           = 3;
-        break;
+        case Cpu_Device_DM6467:
+            #if defined(Platform_dm6467t)
+            params.forceChromaFormat = XDM_YUV_420SP;
+            params.maxFrameRate      = 60000;
+            params.maxBitRate        = 30000000;
+            #else
+            params.forceChromaFormat = XDM_YUV_420P;
+            #endif
+            params.maxWidth          = VideoStd_1080I_WIDTH;
+            params.maxHeight         = VideoStd_1080I_HEIGHT + 8;
+            colorSpace               = ColorSpace_YUV420PSEMI;
+            defaultNumBufs           = 5;
+            break;
+        #if defined(Platform_dm365)
+        case Cpu_Device_DM365:
+            params.forceChromaFormat = XDM_YUV_420SP;
+            params.maxWidth          = VideoStd_720P_WIDTH;
+            params.maxHeight         = VideoStd_720P_HEIGHT;
+            colorSpace               = ColorSpace_YUV420PSEMI;
+            defaultNumBufs           = 4;
+            break;
+        #endif
+        default:
+            params.forceChromaFormat = XDM_YUV_422ILE;
+            params.maxWidth          = VideoStd_D1_WIDTH;
+            params.maxHeight         = VideoStd_D1_PAL_HEIGHT;
+            colorSpace               = ColorSpace_UYVY;
+            defaultNumBufs           = 3;
+            break;
     }
 
     GST_LOG("opening video decoder \"%s\"\n", viddec2->codecName);
diff --git a/src/gsttividenc1.c b/src/gsttividenc1.c
index c65ff10..0cf63cb 100644
--- a/src/gsttividenc1.c
+++ b/src/gsttividenc1.c
@@ -1519,7 +1519,11 @@ static gboolean gst_tividenc1_codec_start (GstTIVidenc1 *videnc1)
             break;
 
         case Cpu_Device_DM6467:
+            #if defined(Platform_dm6467t)
+            params.inputChromaFormat = XDM_YUV_420SP;
+            #else
             params.inputChromaFormat = XDM_YUV_420P;
+            #endif
             params.reconChromaFormat = XDM_CHROMA_NA;
             break;
 
-- 
1.5.4.3

