From 2eaffd2bd4a98215ed6e4e25e5ef212957f5a2d0 Mon Sep 17 00:00:00 2001
From: Guy Eilam <guy@wizery.com>
Date: Sun, 26 Jun 2011 00:18:01 +0300
Subject: [PATCH 09/32] wpa_supplicant - made a few scan tweaks for Android

---
 wpa_supplicant/scan.c           |    2 ++
 wpa_supplicant/wpa_supplicant.c |   34 ++++++++++++++++++++++++++++++++++
 2 files changed, 36 insertions(+), 0 deletions(-)

diff --git a/wpa_supplicant/scan.c b/wpa_supplicant/scan.c
index 4fb9bef..977c565 100644
--- a/wpa_supplicant/scan.c
+++ b/wpa_supplicant/scan.c
@@ -489,6 +489,7 @@ static void wpa_supplicant_scan(void *eloop_ctx, void *timeout_ctx)
  */
 void wpa_supplicant_req_scan(struct wpa_supplicant *wpa_s, int sec, int usec)
 {
+#ifndef ANDROID
 	/* If there's at least one network that should be specifically scanned
 	 * then don't cancel the scan and reschedule.  Some drivers do
 	 * background scanning which generates frequent scan results, and that
@@ -510,6 +511,7 @@ void wpa_supplicant_req_scan(struct wpa_supplicant *wpa_s, int sec, int usec)
 			return;
 		}
 	}
+#endif /* ANDROID */
 
 	wpa_dbg(wpa_s, MSG_DEBUG, "Setting scan request: %d sec %d usec",
 		sec, usec);
diff --git a/wpa_supplicant/wpa_supplicant.c b/wpa_supplicant/wpa_supplicant.c
index 0352c13..b86016a 100644
--- a/wpa_supplicant/wpa_supplicant.c
+++ b/wpa_supplicant/wpa_supplicant.c
@@ -49,6 +49,9 @@
 #include "bgscan.h"
 #include "bss.h"
 #include "scan.h"
+#ifdef ANDROID
+#include <cutils/properties.h>
+#endif /* ANDROID */
 
 const char *wpa_supplicant_version =
 "wpa_supplicant v" VERSION_STR "\n"
@@ -744,7 +747,11 @@ int wpa_supplicant_reload_configuration(struct wpa_supplicant *wpa_s)
 	wpa_supplicant_clear_status(wpa_s);
 	if (wpa_supplicant_enabled_networks(wpa_s->conf)) {
 		wpa_s->reassociate = 1;
+#ifdef ANDROID
+		wpa_supplicant_req_scan(wpa_s, 2, 0);
+#else /* ANDROID */
 		wpa_supplicant_req_scan(wpa_s, 0, 0);
+#endif /* ANDROID */
 	}
 	wpa_dbg(wpa_s, MSG_DEBUG, "Reconfiguration completed");
 	return 0;
@@ -1538,7 +1545,11 @@ void wpa_supplicant_enable_network(struct wpa_supplicant *wpa_s,
 					wpa_s, other_ssid);
 		}
 		if (wpa_s->reassociate)
+#ifdef ANDROID
+			wpa_supplicant_req_scan(wpa_s, 2, 0);
+#else /* ANDROID */
 			wpa_supplicant_req_scan(wpa_s, 0, 0);
+#endif /* ANDROID */
 	} else if (ssid->disabled && ssid->disabled != 2) {
 		if (wpa_s->current_ssid == NULL) {
 			/*
@@ -1546,7 +1557,11 @@ void wpa_supplicant_enable_network(struct wpa_supplicant *wpa_s,
 			 * configuration and a new network was made available.
 			 */
 			wpa_s->reassociate = 1;
+#ifdef ANDROID
+			wpa_supplicant_req_scan(wpa_s, 2, 0);
+#else /* ANDROID */
 			wpa_supplicant_req_scan(wpa_s, 0, 0);
+#endif /* ANDROID */
 		}
 
 		was_disabled = ssid->disabled;
@@ -1658,6 +1673,14 @@ int wpa_supplicant_set_ap_scan(struct wpa_supplicant *wpa_s, int ap_scan)
 	if (ap_scan < 0 || ap_scan > 2)
 		return -1;
 
+#ifdef ANDROID
+	if ((ap_scan == 2) && (wpa_s->wpa_state != WPA_COMPLETED)) {
+		wpa_msg(wpa_s, MSG_DEBUG, "ap_scan = %d", wpa_s->conf->ap_scan);
+		return 0;
+	}
+	wpa_msg(wpa_s, MSG_DEBUG, "ap_scan = %d", ap_scan);
+#endif /* ANDROID */
+
 	old_ap_scan = wpa_s->conf->ap_scan;
 	wpa_s->conf->ap_scan = ap_scan;
 
@@ -2373,6 +2396,17 @@ struct wpa_supplicant * wpa_supplicant_add_iface(struct wpa_global *global,
 		return NULL;
 	}
 
+#ifdef ANDROID
+    char scan_prop[PROPERTY_VALUE_MAX];
+    char *endp;
+    if (property_get("wifi.supplicant_scan_interval", scan_prop, "6") != 0) {
+        wpa_s->scan_interval = (int)strtol(scan_prop, &endp, 0);
+        if (endp == scan_prop) {
+            wpa_s->scan_interval = 6;
+        }
+    }
+#endif /* ANDROID */
+
 	for (ssid = wpa_s->conf->ssid; ssid; ssid = ssid->next)
 		wpas_notify_network_added(wpa_s, ssid);
 
-- 
1.7.0.4

