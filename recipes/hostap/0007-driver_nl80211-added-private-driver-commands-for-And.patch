From 934bf717a10173f5c25c27df3003cb8c3cd13d2f Mon Sep 17 00:00:00 2001
From: Guy Eilam <guy@wizery.com>
Date: Sun, 26 Jun 2011 00:12:04 +0300
Subject: [PATCH 07/32] driver_nl80211 - added private driver commands for Android

Added the private driver commands function for Android and all
the framework which is needed for its call and usage.
Only a couple of the private commands are implemented for now:
START
STOP
MACADDR
RSSI
RSSI-APPROX
LINKSPEED

Need to implement also those commands (in future commit):
SCAN-PASSIVE
SCAN-ACTIVE
SCAN-MODE
POWERMODE
GETPOWER
---
 src/common/wpa_ctrl.h        |    4 ++
 src/drivers/driver.h         |   14 +++++
 src/drivers/driver_nl80211.c |  116 ++++++++++++++++++++++++++++++++++++++++++
 src/drivers/linux_ioctl.c    |    2 +-
 wpa_supplicant/ctrl_iface.c  |   19 +++++++
 wpa_supplicant/driver_i.h    |    9 +++
 6 files changed, 163 insertions(+), 1 deletions(-)

diff --git a/src/common/wpa_ctrl.h b/src/common/wpa_ctrl.h
index 73647eb..1eb360e 100644
--- a/src/common/wpa_ctrl.h
+++ b/src/common/wpa_ctrl.h
@@ -62,6 +62,10 @@ extern "C" {
 #define WPA_EVENT_BSS_ADDED "CTRL-EVENT-BSS-ADDED "
 /** A BSS entry was removed (followed by BSS entry id and BSSID) */
 #define WPA_EVENT_BSS_REMOVED "CTRL-EVENT-BSS-REMOVED "
+#ifdef ANDROID
+/** Driver state change */
+#define WPA_EVENT_DRIVER_STATE "CTRL-EVENT-DRIVER-STATE "
+#endif /* ANDROID */
 
 /** WPS overlap detected in PBC mode */
 #define WPS_EVENT_OVERLAP "WPS-OVERLAP-DETECTED "
diff --git a/src/drivers/driver.h b/src/drivers/driver.h
index d4f0ae0..25a3cc1 100644
--- a/src/drivers/driver.h
+++ b/src/drivers/driver.h
@@ -2260,6 +2260,20 @@ struct wpa_driver_ops {
 	 * implementation, there is no need to implement this function.
 	 */
 	int (*set_authmode)(void *priv, int authmode);
+
+#ifdef ANDROID
+    /**
+     * driver_cmd - execute driver-specific command
+     * @priv: private driver interface data from init()
+     * @cmd: command to execute
+     * @buf: return buffer
+     * @buf_len: buffer length
+	 *
+	 * Returns: 0 on success, -1 on failure
+	 *
+	 */
+     int (*driver_cmd)(void *priv, char *cmd, char *buf, size_t buf_len);
+#endif /* ANDROID */
 };
 
 
diff --git a/src/drivers/driver_nl80211.c b/src/drivers/driver_nl80211.c
index 406c94a..48b5a5d 100644
--- a/src/drivers/driver_nl80211.c
+++ b/src/drivers/driver_nl80211.c
@@ -40,6 +40,9 @@
 #include "radiotap_iter.h"
 #include "rfkill.h"
 #include "driver.h"
+#ifdef ANDROID
+#include "common/wpa_ctrl.h"
+#endif /* ANDROID */
 
 #ifdef CONFIG_LIBNL20
 /* libnl 2.0 compatibility code */
@@ -6563,6 +6566,116 @@ static const char * nl80211_get_radio_name(void *priv)
 }
 
 
+#ifdef ANDROID
+static int nl80211_toggle_rx_filter(char state)
+{
+	return 0; /* not implemented yet */
+}
+
+
+static int nl80211_priv_driver_cmd( void *priv, char *cmd, char *buf, size_t buf_len )
+{
+	struct i802_bss *bss = priv;
+	struct wpa_driver_nl80211_data *drv = bss->drv;
+	int ret = 0, flags;
+
+	wpa_printf(MSG_DEBUG, "%s %s len = %d", __func__, cmd, buf_len);
+
+	if (os_strcasecmp(cmd, "STOP") == 0) {
+		linux_set_iface_flags(drv->ioctl_sock, bss->ifname, 0);
+		wpa_msg(drv->ctx, MSG_INFO, WPA_EVENT_DRIVER_STATE "STOPPED");
+	} else if (os_strcasecmp(cmd, "START") == 0) {
+		linux_set_iface_flags(drv->ioctl_sock, bss->ifname, 1);
+		wpa_msg(drv->ctx, MSG_INFO, WPA_EVENT_DRIVER_STATE "STARTED");
+	} else if (os_strcasecmp(cmd, "MACADDR") == 0) {
+		u8 macaddr[ETH_ALEN] = {};
+
+		ret = linux_get_ifhwaddr(drv->ioctl_sock, bss->ifname, macaddr);
+		if (!ret)
+			ret = os_snprintf(buf, buf_len,
+					"Macaddr = " MACSTR "\n", MAC2STR(macaddr));
+	} else if ((os_strcasecmp(cmd, "RSSI") == 0) || (os_strcasecmp(cmd, "RSSI-APPROX") == 0)) {
+		struct wpa_signal_info sig;
+		int rssi;
+
+		if (!drv->associated)
+			return -1;
+
+		ret = nl80211_get_link_signal(drv, &sig);
+		if (ret == 0) {
+			rssi = sig.current_signal;
+			ret = os_snprintf(buf, buf_len, "%s rssi %d\n", drv->ssid, rssi);
+		}
+	} else if (os_strcasecmp(cmd, "LINKSPEED") == 0) {
+		struct wpa_signal_info sig;
+		int linkspeed;
+
+		if (!drv->associated)
+			return -1;
+
+		ret = nl80211_get_link_signal(drv, &sig);
+		if (ret == 0) {
+			linkspeed = sig.current_txrate;
+			ret = os_snprintf(buf, buf_len, "LinkSpeed %d\n", linkspeed);
+		}
+	} else if( os_strcasecmp(cmd, "RELOAD") == 0 ) {
+		wpa_msg(drv->ctx, MSG_INFO, WPA_EVENT_DRIVER_STATE "HANGED");
+#if 0 /* Not implemented yet */
+	} else if( os_strcasecmp(cmd, "SCAN-PASSIVE") == 0 ) {
+		g_scan_type = IW_SCAN_TYPE_PASSIVE;
+		ret = 0;
+	} else if( os_strcasecmp(cmd, "SCAN-ACTIVE") == 0 ) {
+		g_scan_type = IW_SCAN_TYPE_ACTIVE;
+		ret = 0;
+	} else if( os_strcasecmp(cmd, "SCAN-MODE") == 0 ) {
+		ret = snprintf(buf, buf_len, "ScanMode = %u\n", g_scan_type);
+		if (ret < (int)buf_len)
+			return ret;
+	} else if( os_strncasecmp(cmd, "POWERMODE", 9) == 0 ) {
+		int mode = atoi(cmd + 9);
+
+		if (mode == g_power_mode)
+			ret = 0;
+		else if (mode == 1) /* active mode */
+			ret = wpa_driver_set_power_save(drv->ifname, 0);
+		else if (mode == 0) /* auto mode */
+			ret = wpa_driver_set_power_save(drv->ifname, 1);
+
+		if (!ret)
+			g_power_mode = mode;
+
+		wpa_printf(MSG_DEBUG, "global POWERMODE set to %d (wanted %d), ret %d",
+			   g_power_mode, mode, ret);
+	} else if( os_strcasecmp(cmd, "GETPOWER") == 0 ) {
+		ret = sprintf(buf, "powermode = %u\n", g_power_mode);
+	} else if( os_strncasecmp(cmd, "BTCOEXMODE", 10) == 0 ) {
+		int mode = atoi(cmd + 10);
+
+		wpa_printf(MSG_DEBUG, "will change btcoex mode to: %d", mode);
+
+		if (mode == 1) { /* disable BT-coex */
+			ret = wpa_driver_toggle_btcoex_state('0');
+		} else if (mode == 2) { /* enable BT-coex */
+			ret = wpa_driver_toggle_btcoex_state('1');
+		} else {
+			wpa_printf(MSG_DEBUG, "invalid btcoex mode: %d", mode);
+			ret = -1;
+		}
+#endif
+	} else if( os_strcasecmp(cmd, "RXFILTER-START") == 0 ) {
+		ret = nl80211_toggle_rx_filter('1');
+	} else if( os_strcasecmp(cmd, "RXFILTER-STOP") == 0 ) {
+		ret = nl80211_toggle_rx_filter('0');
+	} else {
+		wpa_printf(MSG_ERROR, "Unsupported command: %s", cmd);
+		ret = -1;
+	}
+
+	return ret;
+}
+#endif /* ANDROID */
+
+
 const struct wpa_driver_ops wpa_driver_nl80211_ops = {
 	.name = "nl80211",
 	.desc = "Linux nl80211/cfg80211",
@@ -6632,4 +6745,7 @@ const struct wpa_driver_ops wpa_driver_nl80211_ops = {
 	.set_intra_bss = nl80211_set_intra_bss,
 	.set_param = nl80211_set_param,
 	.get_radio_name = nl80211_get_radio_name,
+#ifdef ANDROID
+	.driver_cmd = nl80211_priv_driver_cmd,
+#endif /* ANDROID */
 };
diff --git a/src/drivers/linux_ioctl.c b/src/drivers/linux_ioctl.c
index 7c6dfda..38a13ac 100644
--- a/src/drivers/linux_ioctl.c
+++ b/src/drivers/linux_ioctl.c
@@ -15,7 +15,7 @@
 
 #ifdef ANDROID
 #include <linux/if.h>
-#endif
+#endif /* ANDROID */
 
 #include "utils/includes.h"
 #include <sys/ioctl.h>
diff --git a/wpa_supplicant/ctrl_iface.c b/wpa_supplicant/ctrl_iface.c
index f3a7cff..7a34584 100644
--- a/wpa_supplicant/ctrl_iface.c
+++ b/wpa_supplicant/ctrl_iface.c
@@ -2097,6 +2097,21 @@ static int wpa_supplicant_ctrl_iface_roam(struct wpa_supplicant *wpa_s,
 }
 
 
+#ifdef ANDROID
+static int wpa_supplicant_ctrl_iface_driver_cmd(struct wpa_supplicant *wpa_s,
+                                     char *cmd, char *buf, size_t buflen)
+{
+    int ret;
+
+    ret = wpa_drv_driver_cmd(wpa_s, cmd, buf, buflen);
+    if (ret == 0)
+        ret = sprintf(buf, "%s\n", "OK");
+
+    return ret;
+}
+#endif /* ANDROID */
+
+
 #ifdef CONFIG_P2P
 static int p2p_ctrl_find(struct wpa_supplicant *wpa_s, char *cmd)
 {
@@ -3244,6 +3259,10 @@ char * wpa_supplicant_ctrl_iface_process(struct wpa_supplicant *wpa_s,
 	} else if (os_strncmp(buf, "BSS ", 4) == 0) {
 		reply_len = wpa_supplicant_ctrl_iface_bss(
 			wpa_s, buf + 4, reply, reply_size);
+#ifdef ANDROID
+    } else if (os_strncmp(buf, "DRIVER ", 7) == 0) {
+        reply_len = wpa_supplicant_ctrl_iface_driver_cmd(wpa_s, buf + 7, reply, reply_size);
+#endif /* ANDROID */
 #ifdef CONFIG_AP
 	} else if (os_strcmp(buf, "STA-FIRST") == 0) {
 		reply_len = ap_ctrl_iface_sta_first(wpa_s, reply, reply_size);
diff --git a/wpa_supplicant/driver_i.h b/wpa_supplicant/driver_i.h
index 0d436dd..ba1d54b 100644
--- a/wpa_supplicant/driver_i.h
+++ b/wpa_supplicant/driver_i.h
@@ -704,4 +704,13 @@ static inline int wpa_drv_tdls_oper(struct wpa_supplicant *wpa_s,
 	return wpa_s->driver->tdls_oper(wpa_s->drv_priv, oper, peer);
 }
 
+#ifdef ANDROID
+static inline int wpa_drv_driver_cmd(struct wpa_supplicant *wpa_s,
+					  char *cmd, char *buf, size_t buf_len)
+{
+	if (wpa_s->driver->driver_cmd)
+		return wpa_s->driver->driver_cmd(wpa_s->drv_priv, cmd, buf, buf_len);
+	return -1;
+}
+#endif /* ANDROID */
 #endif /* DRIVER_I_H */
-- 
1.7.0.4

