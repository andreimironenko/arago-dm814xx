From 6519f736e9000b2b6c16080210eac0669e9f769e Mon Sep 17 00:00:00 2001
From: Eliad Peller <eliad@wizery.com>
Date: Wed, 7 Dec 2011 18:52:47 +0200
Subject: [PATCH 28/29] add PRE_ASSOC flag support

---
 src/ap/ap_drv_ops.c          |    6 +++-
 src/ap/ieee802_11.c          |   66 ++++++++++++++++++++++++++---------------
 src/drivers/driver.h         |    2 +
 src/drivers/driver_nl80211.c |   10 ++++++
 4 files changed, 59 insertions(+), 25 deletions(-)

diff --git a/src/ap/ap_drv_ops.c b/src/ap/ap_drv_ops.c
index fda65cd..69c2c83 100644
--- a/src/ap/ap_drv_ops.c
+++ b/src/ap/ap_drv_ops.c
@@ -37,6 +37,9 @@ u32 hostapd_sta_flags_to_drv(u32 flags)
 		res |= WPA_STA_SHORT_PREAMBLE;
 	if (flags & WLAN_STA_MFP)
 		res |= WPA_STA_MFP;
+	if ((flags & (WLAN_STA_ASSOC_REQ_OK | WLAN_STA_ASSOC)) ==
+	     WLAN_STA_ASSOC_REQ_OK)
+		res |= WPA_STA_PRE_ASSOC;
 	return res;
 }
 
@@ -177,7 +180,8 @@ int hostapd_set_sta_flags(struct hostapd_data *hapd, struct sta_info *sta)
 {
 	int set_flags, total_flags, flags_and, flags_or;
 	total_flags = hostapd_sta_flags_to_drv(sta->flags);
-	set_flags = WPA_STA_SHORT_PREAMBLE | WPA_STA_WMM | WPA_STA_MFP;
+	set_flags = WPA_STA_SHORT_PREAMBLE | WPA_STA_WMM | WPA_STA_MFP |
+		    WPA_STA_PRE_ASSOC;
 	if (((!hapd->conf->ieee802_1x && !hapd->conf->wpa) ||
 	     sta->auth_alg == WLAN_AUTH_FT) &&
 	    sta->flags & WLAN_STA_AUTHORIZED)
diff --git a/src/ap/ieee802_11.c b/src/ap/ieee802_11.c
index 23ccee4..5c8cd32 100644
--- a/src/ap/ieee802_11.c
+++ b/src/ap/ieee802_11.c
@@ -871,6 +871,37 @@ static void send_deauth(struct hostapd_data *hapd, const u8 *addr,
 			   strerror(errno));
 }
 
+static void add_pre_assoc_sta(struct hostapd_data *hapd, struct sta_info *sta)
+{
+	struct ieee80211_ht_capabilities ht_cap;
+	/*
+	 * Remove the STA entry in order to make sure the STA PS state gets
+	 * cleared and configuration gets updated in case of reassociation back
+	 * to the same AP.
+	 */
+	hostapd_drv_sta_remove(hapd, sta->addr);
+
+#ifdef CONFIG_IEEE80211N
+	if (sta->flags & WLAN_STA_HT)
+		hostapd_get_ht_capab(hapd, sta->ht_capabilities, &ht_cap);
+#endif /* CONFIG_IEEE80211N */
+
+	if (hostapd_sta_add(hapd, sta->addr, sta->aid, sta->capability,
+			    sta->supported_rates, sta->supported_rates_len,
+			    sta->listen_interval,
+			    sta->flags & WLAN_STA_HT ? &ht_cap : NULL,
+			    sta->flags, sta->uapsd_queues, sta->max_sp)) {
+		hostapd_logger(hapd, sta->addr, HOSTAPD_MODULE_IEEE80211,
+			       HOSTAPD_LEVEL_NOTICE,
+			       "Could not add STA to kernel driver");
+
+		ap_sta_disconnect(hapd, sta, sta->addr,
+				  WLAN_REASON_DISASSOC_AP_BUSY);
+
+		return;
+	}
+}
+
 
 static void send_assoc_resp(struct hostapd_data *hapd, struct sta_info *sta,
 			    u16 status_code, int reassoc, const u8 *ies,
@@ -971,6 +1002,11 @@ static void send_assoc_resp(struct hostapd_data *hapd, struct sta_info *sta,
 	}
 #endif /* CONFIG_P2P */
 
+	if (status_code == WLAN_STATUS_SUCCESS) {
+		wpa_printf(MSG_DEBUG, "Adding associated sta");
+		add_pre_assoc_sta(hapd, sta);
+	}
+
 #ifdef CONFIG_P2P_MANAGER
 	if (hapd->conf->p2p & P2P_MANAGE)
 		p = hostapd_eid_p2p_manage(hapd, p);
@@ -1650,12 +1686,12 @@ static void handle_assoc_cb(struct hostapd_data *hapd,
 	u16 status;
 	struct sta_info *sta;
 	int new_assoc = 1;
-	struct ieee80211_ht_capabilities ht_cap;
 
 	if (!ok) {
 		hostapd_logger(hapd, mgmt->da, HOSTAPD_MODULE_IEEE80211,
 			       HOSTAPD_LEVEL_DEBUG,
 			       "did not acknowledge association response");
+		hostapd_drv_sta_remove(hapd, mgmt->da);
 		return;
 	}
 
@@ -1663,6 +1699,7 @@ static void handle_assoc_cb(struct hostapd_data *hapd,
 				      sizeof(mgmt->u.assoc_resp))) {
 		printf("handle_assoc_cb(reassoc=%d) - too short payload "
 		       "(len=%lu)\n", reassoc, (unsigned long) len);
+		hostapd_drv_sta_remove(hapd, mgmt->da);
 		return;
 	}
 
@@ -1675,11 +1712,14 @@ static void handle_assoc_cb(struct hostapd_data *hapd,
 	if (!sta) {
 		printf("handle_assoc_cb: STA " MACSTR " not found\n",
 		       MAC2STR(mgmt->da));
+		hostapd_drv_sta_remove(hapd, mgmt->da);
 		return;
 	}
 
-	if (status != WLAN_STATUS_SUCCESS)
+	if (status != WLAN_STATUS_SUCCESS) {
+		hostapd_drv_sta_remove(hapd, sta->addr);
 		goto fail;
+	}
 
 	/* Stop previous accounting session, if one is started, and allocate
 	 * new session id for the new session. */
@@ -1713,28 +1753,6 @@ static void handle_assoc_cb(struct hostapd_data *hapd,
 	sta->sa_query_timed_out = 0;
 #endif /* CONFIG_IEEE80211W */
 
-	/*
-	 * Remove the STA entry in order to make sure the STA PS state gets
-	 * cleared and configuration gets updated in case of reassociation back
-	 * to the same AP.
-	 */
-	hostapd_drv_sta_remove(hapd, sta->addr);
-
-#ifdef CONFIG_IEEE80211N
-	if (sta->flags & WLAN_STA_HT)
-		hostapd_get_ht_capab(hapd, sta->ht_capabilities, &ht_cap);
-#endif /* CONFIG_IEEE80211N */
-
-	if (hostapd_sta_add(hapd, sta->addr, sta->aid, sta->capability,
-			    sta->supported_rates, sta->supported_rates_len,
-			    sta->listen_interval,
-			    sta->flags & WLAN_STA_HT ? &ht_cap : NULL,
-			    sta->flags, sta->uapsd_queues, sta->max_sp)) {
-		hostapd_logger(hapd, sta->addr, HOSTAPD_MODULE_IEEE80211,
-			       HOSTAPD_LEVEL_NOTICE,
-			       "Could not add STA to kernel driver");
-	}
-
 	if (sta->flags & WLAN_STA_WDS)
 		hostapd_set_wds_sta(hapd, sta->addr, sta->aid, 1);
 
diff --git a/src/drivers/driver.h b/src/drivers/driver.h
index 9fe25f2..02cdef2 100644
--- a/src/drivers/driver.h
+++ b/src/drivers/driver.h
@@ -706,6 +706,8 @@ struct wpa_bss_params {
 #define WPA_STA_WMM BIT(1)
 #define WPA_STA_SHORT_PREAMBLE BIT(2)
 #define WPA_STA_MFP BIT(3)
+#define WPA_STA_TDLS_PEER BIT(4)
+#define WPA_STA_PRE_ASSOC BIT(5)
 
 /**
  * struct p2p_params - P2P parameters for driver-based P2P management
diff --git a/src/drivers/driver_nl80211.c b/src/drivers/driver_nl80211.c
index ec0462c..5b6df3e 100644
--- a/src/drivers/driver_nl80211.c
+++ b/src/drivers/driver_nl80211.c
@@ -4002,6 +4002,10 @@ static u32 sta_flags_nl80211(int flags)
 		f |= BIT(NL80211_STA_FLAG_SHORT_PREAMBLE);
 	if (flags & WPA_STA_MFP)
 		f |= BIT(NL80211_STA_FLAG_MFP);
+	if (flags & WPA_STA_TDLS_PEER)
+		f |= BIT(NL80211_STA_FLAG_TDLS_PEER);
+	if (flags & WPA_STA_PRE_ASSOC)
+		f |= BIT(NL80211_STA_FLAG_PRE_ASSOC);
 
 	return f;
 }
@@ -4680,6 +4684,12 @@ static int wpa_driver_nl80211_sta_set_flags(void *priv, const u8 *addr,
 	if (total_flags & WPA_STA_MFP)
 		NLA_PUT_FLAG(flags, NL80211_STA_FLAG_MFP);
 
+	if (total_flags & WPA_STA_TDLS_PEER)
+		NLA_PUT_FLAG(flags, NL80211_STA_FLAG_TDLS_PEER);
+
+	if (total_flags & WPA_STA_PRE_ASSOC)
+		NLA_PUT_FLAG(flags, NL80211_STA_FLAG_PRE_ASSOC);
+
 	if (nla_put_nested(msg, NL80211_ATTR_STA_FLAGS, flags))
 		goto nla_put_failure;
 
-- 
1.7.0.4

