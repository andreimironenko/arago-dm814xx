include Rules.make

COMPONENTS:=$(DMAI_INSTALL_DIR) $(XDAIS_INSTALL_DIR) $(LINUXUTILS_INSTALL_DIR) $(EDMA3_LLD_INSTALL_DIR) $(FC_INSTALL_DIR) $(CE_INSTALL_DIR) $(XDC_INSTALL_DIR) $(BIOS_INSTALL_DIR) $(CODEC_INSTALL_DIR)

.PHONY:	all clean everything clobber help cmem cmem_clean dmai dmai_clean demos demos_clean examples examples_clean dvtb dvtb_clean dmammapk dmammapk_clean dsplink dsplink_arm dsplink_dsp dsplink_samples dsplink_clean codecs codecs_clean linux linux_clean psp_examples psp_clean info check install

#==============================================================================
# Set up platform dependent variables.
#==============================================================================
ifeq ($(PLATFORM),dm6446)
COMPONENTS+=$(BIOSUTILS_INSTALL_DIR) $(LINK_INSTALL_DIR)
CHECKLIST:=$(CODEGEN_INSTALL_DIR)/bin/cl6x
REPOSITORIES:=$(DVTB_INSTALL_DIR)/packages
LINUXKERNEL_CONFIG=davinci_dm644x_defconfig
LINUXSAMPLES_PLATFORM=dm644x
DSPLINK_CONFIG=--platform=DAVINCI --nodsp=1 --dspcfg_0=DM6446GEMSHMEM --dspos_0=DSPBIOS5XX --gppos=MVL5G --comps=ponslrm
DSPLINK_MODULE=$(LINK_INSTALL_DIR)/packages/dsplink/gpp/export/BIN/Linux/DAVINCI/RELEASE/dsplinkk.ko
HAS_SERVER=true
HAS_DSPLINK=true
DMAI_PLATFORM=dm6446_al
else
ifeq ($(PLATFORM),dm6467)
COMPONENTS+=$(BIOSUTILS_INSTALL_DIR) $(LINK_INSTALL_DIR)
CHECKLIST:=$(CODEGEN_INSTALL_DIR)/bin/cl6x
REPOSITORIES:=$(DVTB_INSTALL_DIR)/packages
LINUXKERNEL_CONFIG=davinci_dm6467_defconfig
LINUXSAMPLES_PLATFORM=dm646x
DSPLINK_CONFIG=--platform=DAVINCIHD --nodsp=1 --dspcfg_0=DM6467GEMSHMEM --dspos_0=DSPBIOS5XX --gppos=MVL5G --comps=ponslrm
DSPLINK_MODULE=$(LINK_INSTALL_DIR)/packages/dsplink/gpp/export/BIN/Linux/DAVINCIHD/RELEASE/dsplinkk.ko
HAS_SERVER=true
HAS_DSPLINK=true
DMAI_PLATFORM=dm6467_al
else
ifeq ($(PLATFORM),dm355)
REPOSITORIES:=$(DVTB_INSTALL_DIR)/packages
LINUXKERNEL_CONFIG=davinci_dm355_defconfig
LINUXSAMPLES_PLATFORM=dm355
HAS_SERVER=false
HAS_DSPLINK=false
DMAMMAP_INSTALL_DIR=$(CODEC_INSTALL_DIR)/dm355mm/module
DMAI_PLATFORM=dm355_al
else
ifeq ($(PLATFORM),dm365)
REPOSITORIES:=$(DVTB_INSTALL_DIR)
LINUXKERNEL_CONFIG=davinci_dm365_defconfig
LINUXSAMPLES_PLATFORM=dm365
HAS_SERVER=false
HAS_DSPLINK=false
DMAMMAP_INSTALL_DIR=$(DM365MMAP_INSTALL_DIR)/module
DMAI_PLATFORM=dm365_al
else
	$(error PLATFORM not set correctly: $(PLATFORM))
endif
endif
endif
endif

REPOSITORIES+=$(addsuffix /packages, $(COMPONENTS))

CHECKLIST+=$(REPOSITORIES) $(MVTOOL_PREFIX)gcc $(LINUXKERNEL_INSTALL_DIR)/Documentation $(DEMO_INSTALL_DIR)/$(PLATFORM) $(PSP_INSTALL_DIR)/docs
#==============================================================================
# The default build target.
#==============================================================================
all:	check cmem dmammapk edmak irqk dmai demos
#       examples dvtb

#==============================================================================
# Clean up the targets built by 'make all'.
#==============================================================================
clean:	cmem_clean dmammapk_clean edmak_clean irqk_clean dmai_clean demos_clean
#	examples_clean dvtb_clean

#==============================================================================
# Build everything rebuildable.
#==============================================================================
everything: check codecs linux dsplink psp_examples all

#==============================================================================
# Clean up all targets.
#==============================================================================
clobber:    clean dsplink_clean linux_clean codecs_clean psp_clean

#==============================================================================
# A help message target.
#==============================================================================
help:
	@echo
	@echo "Available build targets are:"
	@echo
	@echo "    check           : Make sure Rules.make is set up properly"
	@echo "    info            : List versions of DVSDK components"
	@echo
	@echo "    all             : Build the components below"
	@echo "    clean           : Remove files generated by the 'all' target"
	@echo
	@echo "    cmem            : Build the CMEM kernel module for $(PLATFORM)"
	@echo "    cmem_clean      : Remove generated cmem files."
	@echo
	@echo "    dmai            : Build DMAI for $(PLATFORM)_al"
	@echo "    dmai_clean      : Remove generated DMAI files."
	@echo
	@echo "    demos           : Build the DVSDK demos for $(PLATFORM)"
	@echo "    demos_clean     : Remove generated DVSDK demo files."
	@echo
	@echo "    examples        : Build examples for $(PLATFORM)"
	@echo "    examples_clean  : Build examples for $(PLATFORM)"
	@echo
	@echo "    dvtb            : Build DVTB for $(PLATFORM)"
	@echo "    dvtb_clean      : Remove generated DVTB files"
ifneq ($(DMAMMAP_INSTALL_DIR),)
	@echo
	@echo "    dmammapk        : Build the DMA MMAP kernel module"
	@echo "    dmammapk_clean  : Remove generated DMA MMAP files"
endif
ifeq ($(PLATFORM),dm365)
	@echo
	@echo "    edmak           : Build the EDMA kernel module"
	@echo "    edmak_clean     : Remove generated EDMA files"
endif
ifeq ($(PLATFORM),dm365)
	@echo
	@echo "    irqk            : Build the IRQ kernel module"
	@echo "    irqk_clean      : Remove generated IRQ files"
endif
	@echo
	@echo "The following targets have to be explicitly built and cleaned:"
	@echo
	@echo "    everything      : Rebuild everything including below targets"
	@echo "    clobber         : Remove all generated files"
ifeq ($(HAS_DSPLINK),true)
	@echo
	@echo "    dsplink         : Configure and build DSP Link for $(PLATFORM) ARM and DSP"
	@echo "    dsplink_arm     : Configure and build DSP Link for $(PLATFORM) ARM"
	@echo "    dsplink_dsp     : Configure and build DSP Link for $(PLATFORM) DSP"
	@echo "    dsplink_samples : Build DSP Link ARM and DSP sample applications for $(PLATFORM)"
	@echo "    dsplink_clean   : Remove generated DSP Link files"
endif
ifeq ($(HAS_SERVER),true)
	@echo
	@echo "    codecs          : Build codec servers for $(PLATFORM)"
	@echo "    codecs_clean    : Remove generated codec server files"
endif
	@echo
	@echo "    linux           : Build Linux kernel uImage for $(PLATFORM)"
	@echo "    linux_clean     : Remove generated Linux kernel files"
	@echo
	@echo "    psp_examples    : Build Linux examples for $(PLATFORM)"
	@echo "    psp_clean       : Build Linux examples for $(PLATFORM)"
	@echo
	@echo "    install         : Install binaries to $(EXEC_DIR)"
	@echo

#==============================================================================
# Target for listing information about the DVSDK components.
#==============================================================================
info:	check
	@LINUXKERNEL_INSTALL_DIR="$(LINUXKERNEL_INSTALL_DIR)" CODEGEN_INSTALL_DIR="$(CODEGEN_INSTALL_DIR)" GCC_PREFIX="$(MVTOOL_PREFIX)" XDC_INSTALL_DIR="$(XDC_INSTALL_DIR)" REPOSITORIES="$(REPOSITORIES)" $(DVSDK_INSTALL_DIR)/bin/info.sh

#==============================================================================
# Target for checking that the Rules.make file is set up properly.
#==============================================================================
check:
	@CHECKLIST="$(CHECKLIST)" $(DVSDK_INSTALL_DIR)/bin/check.sh

#==============================================================================
# Build the dvsdk demos for the configured platform. Also, an explicit cleanup
# target is defined.
#==============================================================================
demos:
ifneq ($(PLATFORM),dm365)
	$(MAKE) -C $(DEMO_INSTALL_DIR)/$(PLATFORM) DVSDK_INSTALL_DIR=$(DVSDK_INSTALL_DIR) XDC_INSTALL_DIR=$(XDC_INSTALL_DIR) CE_INSTALL_DIR=$(CE_INSTALL_DIR) FC_INSTALL_DIR=$(FC_INSTALL_DIR) CMEM_INSTALL_DIR=$(CMEM_INSTALL_DIR) CODEC_INSTALL_DIR=$(CODEC_INSTALL_DIR) XDAIS_INSTALL_DIR=$(XDAIS_INSTALL_DIR) LINK_INSTALL_DIR=$(LINK_INSTALL_DIR) DMAI_INSTALL_DIR=$(DMAI_INSTALL_DIR) MVTOOL_DIR=$(MVTOOL_DIR) CC=$(CSTOOL_PREFIX)gcc CROSS_COMPILE=$(MVTOOL_PREFIX) LINUXLIBS_INSTALL_DIR=$(LINUXLIBS_INSTALL_DIR)
endif

demos_clean:
ifneq ($(PLATFORM),dm365)
	$(MAKE) -C $(DEMO_INSTALL_DIR)/$(PLATFORM) clean
endif

#==============================================================================
# Build the Digital Video Test Bench for the configured platform. Also, an
# explicit cleanup target is defined.
#==============================================================================
dvtb:
	$(MAKE) -C $(DVTB_INSTALL_DIR) $(PLATFORM)
	@echo
	@echo "dvtb can be found under $(DVTB_INSTALL_DIR)/packages/ti/sdo/dvtb/$(PLATFORM)/bin"

dvtb_clean:
	$(MAKE) -C $(DVTB_INSTALL_DIR) clean

#==============================================================================
# Build the Linux kernel. Also, an explicit cleanup target is defined.
#==============================================================================
linux:
	$(MAKE) -C $(LINUXKERNEL_INSTALL_DIR) CROSS_COMPILE=$(MVTOOL_PREFIX) $(LINUXKERNEL_CONFIG)
	$(MAKE) -C $(LINUXKERNEL_INSTALL_DIR) CROSS_COMPILE=$(MVTOOL_PREFIX) uImage
	@echo
	@echo "Your kernel image can be found at $(LINUXKERNEL_INSTALL_DIR)/arch/arm/boot/uImage"

linux_clean:
	$(MAKE) -C $(LINUXKERNEL_INSTALL_DIR) CROSS_COMPILE=$(MVTOOL_PREFIX) clean

#==============================================================================
# Build the PSP Linux examples. Also, an explicit cleanup target is defined.
#==============================================================================
psp_examples:
	$(MAKE) -C $(PSP_INSTALL_DIR)/examples PLATFORM=$(LINUXSAMPLES_PLATFORM) LINUXKERNEL_INSTALL_DIR=$(LINUXKERNEL_INSTALL_DIR) CROSS_COMPILE=$(MVTOOL_PREFIX)
	@echo
	@echo "PSP examples can be found under $(PSP_INSTALL_DIR)/examples/$(LINUXSAMPLES_PLATFORM)"

psp_clean:
	$(MAKE) -C $(PSP_INSTALL_DIR)/examples PLATFORM=$(LINUXSAMPLES_PLATFORM) LINUXKERNEL_INSTALL_DIR=$(LINUXKERNEL_INSTALL_DIR) clean

#==============================================================================
# Build the CMEM kernel module for the configured platform, and make sure the
# kernel_binaries directory is kept in sync. Also, an explicit cleanup target
# is defined.
#==============================================================================
cmem:
	$(MAKE) -C $(LINUXUTILS_INSTALL_DIR)/packages/ti/sdo/linuxutils/cmem/src/interface ../../lib/cmem.a470MV RULES_MAKE=$(DVSDK_INSTALL_DIR)/Rules.make
	$(MAKE) -C $(LINUXUTILS_INSTALL_DIR)/packages/ti/sdo/linuxutils/cmem/src/module RULES_MAKE=$(DVSDK_INSTALL_DIR)/Rules.make
	@mkdir -p $(DVSDK_INSTALL_DIR)/kernel_binaries/$(PLATFORM)
	@cp $(LINUXUTILS_INSTALL_DIR)/packages/ti/sdo/linuxutils/cmem/src/module/cmemk.ko $(DVSDK_INSTALL_DIR)/kernel_binaries/$(PLATFORM)/
	@echo
	@echo "cmemk.ko kernel module can be found under $(DVSDK_INSTALL_DIR)/kernel_binaries/$(PLATFORM)"

cmem_clean:
	$(MAKE) -C $(LINUXUTILS_INSTALL_DIR)/packages/ti/sdo/linuxutils/cmem/src/module clean RULES_MAKE=$(DVSDK_INSTALL_DIR)/Rules.make
	$(MAKE) -C $(LINUXUTILS_INSTALL_DIR)/packages/ti/sdo/linuxutils/cmem/src/interface clean RULES_MAKE=$(DVSDK_INSTALL_DIR)/Rules.make

#==============================================================================
# Build the *evaluation* codec servers for the configured platform. Also, an
# explicit cleanup target is defined.
#==============================================================================
codecs:
ifeq ($(HAS_SERVER),true)
	$(MAKE) -C $(CODEC_INSTALL_DIR) DVSDK_INSTALL_DIR=$(DVSDK_INSTALL_DIR) BIOS_INSTALL_DIR=$(BIOS_INSTALL_DIR) XDC_INSTALL_DIR=$(XDC_INSTALL_DIR) CE_INSTALL_DIR=$(CE_INSTALL_DIR) FC_INSTALL_DIR=$(FC_INSTALL_DIR) CMEM_INSTALL_DIR=$(LINUXUTILS_INSTALL_DIR) CODECS_INSTALL_DIR=$(CODEC_INSTALL_DIR) BIOSUTILS_INSTALL_DIR=$(BIOSUTILS_INSTALL_DIR) XDAIS_INSTALL_DIR=$(XDAIS_INSTALL_DIR) LINK_INSTALL_DIR=$(LINK_INSTALL_DIR) XDCARGS=\"eval\"
endif

codecs_clean:
ifeq ($(HAS_SERVER),true)
	$(MAKE) -C $(CODEC_INSTALL_DIR) DVSDK_INSTALL_DIR=$(DVSDK_INSTALL_DIR) BIOS_INSTALL_DIR=$(BIOS_INSTALL_DIR) XDC_INSTALL_DIR=$(XDC_INSTALL_DIR) CE_INSTALL_DIR=$(CE_INSTALL_DIR) FC_INSTALL_DIR=$(FC_INSTALL_DIR) CMEM_INSTALL_DIR=$(LINUXUTILS_INSTALL_DIR) CODECS_INSTALL_DIR=$(CODEC_INSTALL_DIR) BIOSUTILS_INSTALL_DIR=$(BIOSUTILS_INSTALL_DIR) XDAIS_INSTALL_DIR=$(XDAIS_INSTALL_DIR) LINK_INSTALL_DIR=$(LINK_INSTALL_DIR) XDCARGS=\"eval\" clean
endif

#==============================================================================
# Build the dmammapk kernel module (if the configured for the platform). Also,
# an explicit cleanup target is defined.
#==============================================================================
dmammapk:
ifneq ($(DMAMMAP_INSTALL_DIR),)
	$(MAKE) -C $(DMAMMAP_INSTALL_DIR) KERNEL_DIR=$(LINUXKERNEL_INSTALL_DIR)
	@mkdir -p $(DVSDK_INSTALL_DIR)/kernel_binaries/$(PLATFORM)
	@cp $(DMAMMAP_INSTALL_DIR)/*.ko $(DVSDK_INSTALL_DIR)/kernel_binaries/$(PLATFORM)/
	@echo
	@echo "dmammapk kernel module can be found under $(DVSDK_INSTALL_DIR)/kernel_binaries/$(PLATFORM)"
endif

dmammapk_clean:
ifneq ($(DMAMMAP_INSTALL_DIR),)
	$(MAKE) -C $(DMAMMAP_INSTALL_DIR) KERNEL_DIR=$(LINUXKERNEL_INSTALL_DIR) clean
endif

#==============================================================================
# Build the edma kernel module (if the configured platform is dm365). Also,
# an explicit cleanup target is defined.
#==============================================================================
edmak:
ifeq ($(PLATFORM),dm365)
	$(MAKE) -C $(LINUXUTILS_INSTALL_DIR)/packages/ti/sdo/linuxutils/edma/src/module KERNEL_DIR=$(LINUXKERNEL_INSTALL_DIR)
	@mkdir -p $(DVSDK_INSTALL_DIR)/kernel_binaries/$(PLATFORM)
	@cp $(LINUXUTILS_INSTALL_DIR)/packages/ti/sdo/linuxutils/edma/src/module/edmak.ko $(DVSDK_INSTALL_DIR)/kernel_binaries/$(PLATFORM)/
	@echo
	@echo "edmak.ko kernel module can be found under $(DVSDK_INSTALL_DIR)/kernel_binaries/$(PLATFORM)"
endif

edmak_clean:
ifeq ($(PLATFORM),dm365)
	$(MAKE) -C $(LINUXUTILS_INSTALL_DIR)/packages/ti/sdo/linuxutils/edma/src/module KERNEL_DIR=$(LINUXKERNEL_INSTALL_DIR) clean
endif

#==============================================================================
# Build the irq kernel module (if the configured platform is dm365). Also,
# an explicit cleanup target is defined.
#==============================================================================
irqk:
ifeq ($(PLATFORM),dm365)
	$(MAKE) -C $(LINUXUTILS_INSTALL_DIR)/packages/ti/sdo/linuxutils/irq/src/module KERNEL_DIR=$(LINUXKERNEL_INSTALL_DIR)
	@mkdir -p $(DVSDK_INSTALL_DIR)/kernel_binaries/$(PLATFORM)
	@cp $(LINUXUTILS_INSTALL_DIR)/packages/ti/sdo/linuxutils/irq/src/module/irqk.ko $(DVSDK_INSTALL_DIR)/kernel_binaries/$(PLATFORM)/
	@echo
	@echo "irqk.ko kernel module can be found under $(DVSDK_INSTALL_DIR)/kernel_binaries/$(PLATFORM)"
endif

irqk_clean:
ifeq ($(PLATFORM),dm365)
	$(MAKE) -C $(LINUXUTILS_INSTALL_DIR)/packages/ti/sdo/linuxutils/irq/src/module KERNEL_DIR=$(LINUXKERNEL_INSTALL_DIR) clean
endif

#==============================================================================
#==============================================================================
# Build the DVSDK examples for the configured platform. Also, an explicit
# cleanup target is defined.
#==============================================================================
examples:
	$(MAKE) -C examples/$(PLATFORM)

examples_clean:
	$(MAKE) -C examples/$(PLATFORM) clean

#==============================================================================
# Build the Davinci Multimedia Application Interface for the configured
# platform. Also, an explicit cleanup target is defined.
#==============================================================================
dmai:
	@$(MAKE) -C $(DMAI_INSTALL_DIR) PLATFORM=${DMAI_PLATFORM} \
			CE_INSTALL_DIR_${DMAI_PLATFORM}=$(CE_INSTALL_DIR) \
				CODEC_INSTALL_DIR_${DMAI_PLATFORM}=$(CODEC_INSTALL_DIR) \
				LINK_INSTALL_DIR_${DMAI_PLATFORM}=$(LINK_INSTALL_DIR) \
				CMEM_INSTALL_DIR_${DMAI_PLATFORM}=$(CMEM_INSTALL_DIR) \
				FC_INSTALL_DIR_${DMAI_PLATFORM}=$(FC_INSTALL_DIR) \
				LPM_INSTALL_DIR_${DMAI_PLATFORM}=$(LPM_INSTALL_DIR) \
				XDAIS_INSTALL_DIR_${DMAI_PLATFORM}=$(XDAIS_INSTALL_DIR) \
				BIOS_INSTALL_DIR_${DMAI_PLATFORM}=$(BIOS_INSTALL_DIR) \
				LINUXLIBS_INSTALL_DIR_${DMAI_PLATFORM}=$(LINUXLIBS_INSTALL_DIR)\
				LINUXKERNEL_INSTALL_DIR_${DMAI_PLATFORM}=$(LINUXKERNEL_INSTALL_DIR) \
				CROSS_COMPILE_${DMAI_PLATFORM}=$(CSTOOL_PREFIX) \
				XDC_INSTALL_DIR_${DMAI_PLATFORM}=$(XDC_INSTALL_DIR) \
				EXEC_DIR_${DMAI_PLATFORM}=$(EXEC_DIR) all

	@echo
	@echo "DMAI applications can be found under $(DMAI_INSTALL_DIR)/packages/ti/sdo/dmai/apps"
	@echo "To install them to $(EXEC_DIR); Go to $(DMAI_INSTALL_DIR) directory;"
	@echo "Execute 'make install EXEC_DIR=$(EXEC_DIR) PLATFORM=$(DMAI_PLATFORM)'"

dmai_clean:
	$(MAKE) -C $(DMAI_INSTALL_DIR) PLATFORM=${DMAI_PLATFORM} \
		XDC_INSTALL_DIR_${DMAI_PLATFORM}=$(XDC_INSTALL_DIR) clean

#==============================================================================
# Build DSP Link for the configured platform. Also, an explicit cleanup target
# is defined.
#==============================================================================
dsplink:	dsplink_arm dsplink_dsp dsplink_samples

dsplink_cfg:
ifneq ($(HAS_DSPLINK),true)
	DSPLINK=$(LINK_INSTALL_DIR)/packages/dsplink perl $(LINK_INSTALL_DIR)/packages/dsplink/config/bin/dsplinkcfg.pl $(DSPLINK_CONFIG)
else
	$(error DSP Link build is not supported for $(PLATFORM))
endif

dsplink_arm:	dsplink_cfg
	DSPLINK=$(LINK_INSTALL_DIR)/packages/dsplink $(XDC_INSTALL_DIR)/gmake -C $(LINK_INSTALL_DIR)/packages/dsplink/gpp/src BASE_TOOLCHAIN=$(MVTOOL_DIR) BASE_BUILDOS=$(LINUXKERNEL_INSTALL_DIR)
	@mkdir -p $(DVSDK_INSTALL_DIR)/kernel_binaries/$(PLATFORM)
	@cp $(DSPLINK_MODULE) $(DVSDK_INSTALL_DIR)/kernel_binaries/$(PLATFORM)/
	@echo
	@echo "dsplinkk.ko kernel module can be found under $(DVSDK_INSTALL_DIR)/kernel_binaries/$(PLATFORM)"

dsplink_dsp:	dsplink_cfg
	DSPLINK=$(LINK_INSTALL_DIR)/packages/dsplink $(XDC_INSTALL_DIR)/gmake -C $(LINK_INSTALL_DIR)/packages/dsplink/dsp/src BASE_SABIOS=$(BIOS_INSTALL_DIR) XDCTOOLS_DIR=$(XDC_INSTALL_DIR) BASE_CGTOOLS=$(CODEGEN_INSTALL_DIR)

dsplink_samples:
	DSPLINK=$(LINK_INSTALL_DIR)/packages/dsplink $(XDC_INSTALL_DIR)/gmake -C $(LINK_INSTALL_DIR)/packages/dsplink/gpp/src/samples BASE_TOOLCHAIN=$(MVTOOL_DIR) BASE_BUILDOS=$(LINUXKERNEL_INSTALL_DIR)
	DSPLINK=$(LINK_INSTALL_DIR)/packages/dsplink $(XDC_INSTALL_DIR)/gmake -C $(LINK_INSTALL_DIR)/packages/dsplink/dsp/src/samples BASE_SABIOS=$(BIOS_INSTALL_DIR) XDCTOOLS_DIR=$(XDC_INSTALL_DIR) BASE_CGTOOLS=$(CODEGEN_INSTALL_DIR)

dsplink_clean:
	DSPLINK=$(LINK_INSTALL_DIR)/packages/dsplink $(XDC_INSTALL_DIR)/gmake -C $(LINK_INSTALL_DIR)/packages/dsplink/gpp/src BASE_TOOLCHAIN=$(MVTOOL_DIR) BASE_BUILDOS=$(LINUXKERNEL_INSTALL_DIR) clean
	DSPLINK=$(LINK_INSTALL_DIR)/packages/dsplink $(XDC_INSTALL_DIR)/gmake -C $(LINK_INSTALL_DIR)/packages/dsplink/dsp/src BASE_SABIOS=$(BIOS_INSTALL_DIR) XDCTOOLS_DIR=$(XDC_INSTALL_DIR) BASE_CGTOOLS=$(CODEGEN_INSTALL_DIR) clean
	DSPLINK=$(LINK_INSTALL_DIR)/packages/dsplink $(XDC_INSTALL_DIR)/gmake -C $(LINK_INSTALL_DIR)/packages/dsplink/gpp/src/samples BASE_TOOLCHAIN=$(MVTOOL_DIR) BASE_BUILDOS=$(LINUXKERNEL_INSTALL_DIR) clean
	DSPLINK=$(LINK_INSTALL_DIR)/packages/dsplink $(XDC_INSTALL_DIR)/gmake -C $(LINK_INSTALL_DIR)/packages/dsplink/dsp/src/samples BASE_SABIOS=$(BIOS_INSTALL_DIR) XDCTOOLS_DIR=$(XDC_INSTALL_DIR) BASE_CGTOOLS=$(CODEGEN_INSTALL_DIR) clean

#==============================================================================
# Install the built binaries to the target file system.
#==============================================================================
install:
	@echo
	@echo Creating $(EXEC_DIR)
	@mkdir -p $(EXEC_DIR)

	@echo Copying kernel modules to target file system: $(EXEC_DIR)/
	@install -m 666 $(DVSDK_INSTALL_DIR)/kernel_binaries/$(PLATFORM)/* $(EXEC_DIR)/

ifneq ($(PLATFORM),dm365)
	@echo Installing DVSDK demos..
	$(MAKE) -C $(DEMO_INSTALL_DIR)/$(PLATFORM) install EXEC_DIR=$(EXEC_DIR)
endif

#	@echo Copying examples..
#	@cp -rp examples/$(PLATFORM)/web $(EXEC_DIR)/
#	@cp -p examples/$(PLATFORM)/dvevmdemo $(EXEC_DIR)/

#	@echo Installing clips..
#	$(MAKE) -C clips install

ifeq ($(PLATFORM),dm6446)
	@echo Copying codec servers..
	@install -m 666 $(CODEC_INSTALL_DIR)/packages/ti/sdo/servers/encode/encodeCombo.x64P $(EXEC_DIR)/
	-@install -m 666 $(CODEC_INSTALL_DIR)/packages/ti/sdo/servers/encode/encodeCombo_e.x64P $(EXEC_DIR)/
	@install -m 666 $(CODEC_INSTALL_DIR)/packages/ti/sdo/servers/decode/decodeCombo.x64P $(EXEC_DIR)/
	-@install -m 666 $(CODEC_INSTALL_DIR)/packages/ti/sdo/servers/decode/decodeCombo_e.x64P $(EXEC_DIR)/
	@install -m 666 $(CODEC_INSTALL_DIR)/packages/ti/sdo/servers/loopback/loopbackCombo.x64P $(EXEC_DIR)/
	-@install -m 666 $(CODEC_INSTALL_DIR)/packages/ti/sdo/servers/loopback/loopbackCombo_e.x64P $(EXEC_DIR)/
	@echo Copying dsplinkk.ko
	@install -m 666 $(LINK_INSTALL_DIR)/packages/dsplink/gpp/export/BIN/Linux/DAVINCI/RELEASE/dsplinkk.ko $(EXEC_DIR)/
endif

ifeq ($(PLATFORM),dm6467)
	@echo Copying codec servers..
	@install -m 666 $(CODEC_INSTALL_DIR)/packages/ti/sdo/servers/encode/encodeCombo.x64P $(EXEC_DIR)/
	-@install -m 666 $(CODEC_INSTALL_DIR)/packages/ti/sdo/servers/encode/encodeCombo_e.x64P $(EXEC_DIR)/
	@install -m 666 $(CODEC_INSTALL_DIR)/packages/ti/sdo/servers/decode/decodeCombo.x64P $(EXEC_DIR)/
	-@install -m 666 $(CODEC_INSTALL_DIR)/packages/ti/sdo/servers/decode/decodeCombo_e.x64P $(EXEC_DIR)/
	@install -m 666 $(CODEC_INSTALL_DIR)/packages/ti/sdo/servers/loopback/loopbackCombo.x64P $(EXEC_DIR)/
	-@install -m 666 $(CODEC_INSTALL_DIR)/packages/ti/sdo/servers/loopback/loopbackCombo_e.x64P $(EXEC_DIR)/
	@echo Copying dsplinkk.ko
	@install -m 666 $(LINK_INSTALL_DIR)/packages/dsplink/gpp/export/BIN/Linux/DAVINCIHD/RELEASE/dsplinkk.ko $(EXEC_DIR)/
	@echo Copying mapdmaqhd..
	@install -m 777 $(DVSDK_INSTALL_DIR)/mapdmaq-hd/mapdmaq-hd $(EXEC_DIR)/
endif

ifeq ($(PLATFORM),dm355)
	@echo Copying mapdmaq..
	@install -m 777 $(DVSDK_INSTALL_DIR)/mapdmaq/mapdmaq $(EXEC_DIR)/
endif

