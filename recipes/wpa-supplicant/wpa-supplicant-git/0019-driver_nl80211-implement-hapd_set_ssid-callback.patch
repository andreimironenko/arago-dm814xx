From 356142bbe19a57cd48bcf2785bfe218487078355 Mon Sep 17 00:00:00 2001
From: Arik Nemtsov <arik@wizery.com>
Date: Tue, 5 Jul 2011 14:11:24 +0300
Subject: [PATCH 19/32] driver_nl80211: implement hapd_set_ssid callback

When operating in AP mode, this callback passes the SSID to the kernel
driver.

wl12xx cards handle probe requests in FW. When the SSID is not
broadcast in beacon data (i.e. the SSID is hidden), the AP must know the
real SSID in order to respond to directed probe requests.
---
 src/drivers/driver_nl80211.c |   19 ++++++++++++++-----
 1 files changed, 14 insertions(+), 5 deletions(-)

diff --git a/src/drivers/driver_nl80211.c b/src/drivers/driver_nl80211.c
index f17377b..85498a2 100644
--- a/src/drivers/driver_nl80211.c
+++ b/src/drivers/driver_nl80211.c
@@ -5395,7 +5395,7 @@ static int i802_set_tx_queue_params(void *priv, int queue, int aifs,
 
 
 static int i802_set_bss(void *priv, int cts, int preamble, int slot,
-			int ht_opmode)
+			int ht_opmode, int ssid_len, const u8 *ssid)
 {
 	struct i802_bss *bss = priv;
 	struct wpa_driver_nl80211_data *drv = bss->drv;
@@ -5416,6 +5416,8 @@ static int i802_set_bss(void *priv, int cts, int preamble, int slot,
 		NLA_PUT_U8(msg, NL80211_ATTR_BSS_SHORT_SLOT_TIME, slot);
 	if (ht_opmode >= 0)
 		NLA_PUT_U16(msg, NL80211_ATTR_BSS_HT_OPMODE, ht_opmode);
+	if (ssid_len > 0)
+		NLA_PUT(msg, NL80211_ATTR_SSID, ssid_len, ssid);
 	NLA_PUT_U32(msg, NL80211_ATTR_IFINDEX, if_nametoindex(bss->ifname));
 
 	return send_and_recv_msgs(drv, msg, NULL, NULL);
@@ -5426,19 +5428,19 @@ static int i802_set_bss(void *priv, int cts, int preamble, int slot,
 
 static int i802_set_cts_protect(void *priv, int value)
 {
-	return i802_set_bss(priv, value, -1, -1, -1);
+	return i802_set_bss(priv, value, -1, -1, -1, -1, NULL);
 }
 
 
 static int i802_set_preamble(void *priv, int value)
 {
-	return i802_set_bss(priv, -1, value, -1, -1);
+	return i802_set_bss(priv, -1, value, -1, -1, -1, NULL);
 }
 
 
 static int i802_set_short_slot_time(void *priv, int value)
 {
-	return i802_set_bss(priv, -1, -1, value, -1);
+	return i802_set_bss(priv, -1, -1, value, -1, -1, NULL);
 }
 
 
@@ -5482,12 +5484,18 @@ static int i802_set_ht_params(void *priv, const u8 *ht_capab,
 	if (ht_oper_len >= 6) {
 		/* ht opmode uses 16bit in octet 5 & 6 */
 		u16 ht_opmode = le_to_host16(((u16 *) ht_oper)[2]);
-		return i802_set_bss(priv, -1, -1, -1, ht_opmode);
+		return i802_set_bss(priv, -1, -1, -1, ht_opmode,  -1, NULL);
 	} else
 		return -1;
 }
 
 
+static int i802_set_ssid(void *priv, const u8 *ssid, int ssid_len)
+{
+	return i802_set_bss(priv, -1, -1, -1, -1, ssid_len, ssid);
+}
+
+
 static int i802_get_inact_sec(void *priv, const u8 *addr)
 {
 	struct hostap_sta_driver_data data;
@@ -6729,6 +6737,7 @@ const struct wpa_driver_ops wpa_driver_nl80211_ops = {
 	.hapd_init = i802_init,
 	.hapd_deinit = i802_deinit,
 	.set_wds_sta = i802_set_wds_sta,
+	.hapd_set_ssid = i802_set_ssid,
 #endif /* HOSTAPD */
 #if defined(HOSTAPD) || defined(CONFIG_AP)
 	.get_seqnum = i802_get_seqnum,
-- 
1.7.0.4

