From a2268b133dcf6b5f07182c31b456e999a608d6e4 Mon Sep 17 00:00:00 2001
From: Pontus Fuchs <pontus.fuchs@gmail.com>
Date: Mon, 24 Oct 2011 13:33:53 +0200
Subject: [PATCH 14/29] driver_nl8011: Add support for DRIVER RXFILTER command

Add support for this Android specific feature using WoWLAN packet
pattern triggers.

Signed-off-by: Pontus Fuchs <pontus.fuchs@tactel.se>
---
 src/drivers/driver_nl80211.c |  174 +++++++++++++++++++++++++++++++++++++++++-
 1 files changed, 170 insertions(+), 4 deletions(-)

diff --git a/src/drivers/driver_nl80211.c b/src/drivers/driver_nl80211.c
index deb6018..13e84c4 100644
--- a/src/drivers/driver_nl80211.c
+++ b/src/drivers/driver_nl80211.c
@@ -183,6 +183,12 @@ struct wpa_driver_nl80211_data {
 	int last_freq;
 	int last_freq_ht;
 #endif /* HOSTAPD */
+
+#ifdef ANDROID
+	u8 wowlan_triggers;
+	u8 wowlan_enabled;
+#endif
+
 };
 
 
@@ -6810,12 +6816,162 @@ static int nl80211_set_power_save(struct wpa_driver_nl80211_data *drv,
 	return -ENOBUFS;
 }
 
+#define RX_SELF_FILTER			0
+#define RX_BROADCAST_FILTER		1
+#define RX_IPV4_MULTICAST_FILTER	2
+#define RX_IPV6_MULTICAST_FILTER	3
+#define NR_RX_FILTERS			4
+
+static const u8 filter_bcast[] = {0xff,0xff,0xff,0xff,0xff,0xff};
+static const u8 filter_ipv4mc[] = {0x01,0x00,0x5e};
+static const u8 filter_ipv6mc[] = {0x33,0x33};
+
+static int nl80211_get_wowlan_pat(struct i802_bss *bss, u8 *buf, int buflen,
+				  u8* mask, int filter)
+{
+	int len = 0, ret;
+	if (buflen < ETH_ALEN)
+		return -1;
+
+	switch(filter) {
+	case RX_SELF_FILTER:
+		ret = linux_get_ifhwaddr(bss->drv->ioctl_sock,
+					 bss->ifname, buf);
+		if (ret)
+			return -1;
+		len = ETH_ALEN;
+		*mask = 0x3F;
+		break;
+	case RX_BROADCAST_FILTER:
+		memcpy(buf, filter_bcast, sizeof(filter_bcast));
+		len = ETH_ALEN;
+		*mask = 0x3F;
+		break;
+	case RX_IPV4_MULTICAST_FILTER:
+		memcpy(buf, filter_ipv4mc, sizeof(filter_ipv4mc));
+		len = sizeof(filter_ipv4mc);
+		*mask = 0x7; /* 3 bytes */
+		break;
+	case RX_IPV6_MULTICAST_FILTER:
+		memcpy(buf, filter_ipv6mc, sizeof(filter_ipv6mc));
+		len = sizeof(filter_ipv6mc);
+		*mask = 0x3; /* 2 bytes */
+		break;
+	default:
+		len = -1;
+		break;
+	}
+	return len;
+}
+
+static int nl80211_set_wowlan_triggers(struct i802_bss *bss, int enable)
+{
+	struct nl_msg *msg, *pats = NULL;
+	struct nlattr *wowtrig, *pat;
+	int i, ret = -1;
+
+	bss->drv->wowlan_enabled = !!enable;
+
+	msg = nlmsg_alloc();
+	if (!msg)
+		return -ENOMEM;
+
+	genlmsg_put(msg, 0, 0, genl_family_get_id(bss->drv->nl80211), 0,
+		    0, NL80211_CMD_SET_WOWLAN, 0);
+
+	NLA_PUT_U32(msg, NL80211_ATTR_IFINDEX, bss->drv->first_bss.ifindex);
+	wowtrig = nla_nest_start(msg, NL80211_ATTR_WOWLAN_TRIGGERS);
+
+	if (!wowtrig) {
+		ret = -ENOBUFS;
+		goto nla_put_failure;
+	}
+
+	if (!enable) {
+		NLA_PUT_FLAG(msg, NL80211_WOWLAN_TRIG_ANY);
+	} else {
+		pats = nlmsg_alloc();
+		if (!pats) {
+			ret = -ENOMEM;
+			goto nla_put_failure;
+		}
+
+		for (i = 0; i < NR_RX_FILTERS; i++) {
+			if (bss->drv->wowlan_triggers & (1 << i)) {
+				u8 patbuf[ETH_ALEN], patmask;
+				int patlen;
+				int patnr = 1;
+				int j;
+
+				patlen = nl80211_get_wowlan_pat(bss, patbuf,
+						      sizeof(patbuf),
+				                      &patmask, i);
+				if (!patlen)
+					continue;
+				else if (patlen < 0) {
+					ret = -1;
+					break;
+				}
+				pat = nla_nest_start(pats, patnr++);
+				NLA_PUT(pats, NL80211_WOWLAN_PKTPAT_MASK,
+						  1, &patmask);
+				NLA_PUT(pats, NL80211_WOWLAN_PKTPAT_PATTERN,
+						   patlen, patbuf);
+				nla_nest_end(pats, pat);
+			}
+		}
+	}
+
+	if (pats)
+		nla_put_nested(msg, NL80211_WOWLAN_TRIG_PKT_PATTERN, pats);
 
-static int nl80211_toggle_rx_filter(char state)
+	nla_nest_end(msg, wowtrig);
+
+	ret = send_and_recv_msgs(bss->drv, msg, NULL, NULL);
+
+	if (ret < 0)
+		wpa_printf(MSG_ERROR, "Failed to set WoWLAN trigger:%d\n", ret);
+
+	if (pats)
+		nlmsg_free(pats);
+
+	return 0;
+
+nla_put_failure:
+	nlmsg_free(msg);
+	return ret;
+}
+
+static int nl80211_toggle_wowlan_trigger(struct i802_bss *bss, int nr,
+					 int enabled)
 {
-	return 0; /* not implemented yet */
+	if (nr >= NR_RX_FILTERS) {
+		wpa_printf(MSG_ERROR, "Unknown filter: %d\n", nr);
+		return -1;
+	}
+
+	if (enabled)
+		bss->drv->wowlan_triggers |= 1 << nr;
+	else
+		bss->drv->wowlan_triggers &= ~(1 << nr);
+
+	if (bss->drv->wowlan_enabled)
+		nl80211_set_wowlan_triggers(bss, 1);
+
+	return 0;
 }
 
+static int nl80211_parse_wowlan_trigger_nr(char *s)
+{
+	long i;
+	char *endp;
+
+	i = strtol(s, &endp, 10);
+
+	if(endp == s)
+		return -1;
+	return i;
+}
 
 static int nl80211_priv_driver_cmd( void *priv, char *cmd, char *buf, size_t buf_len )
 {
@@ -6906,10 +7062,20 @@ static int nl80211_priv_driver_cmd( void *priv, char *cmd, char *buf, size_t buf
 			   g_power_mode, mode, ret);
 	} else if( os_strcasecmp(cmd, "GETPOWER") == 0 ) {
 		ret = sprintf(buf, "powermode = %u\n", g_power_mode);
+	} else if( os_strncasecmp(cmd, "RXFILTER-ADD ", 13) == 0 ) {
+		int i = nl80211_parse_wowlan_trigger_nr(cmd + 13);
+		if(i < 0)
+			return i;
+		return nl80211_toggle_wowlan_trigger(bss, i, 1);
+	} else if( os_strncasecmp(cmd, "RXFILTER-REMOVE ", 16) == 0 ) {
+		int i = nl80211_parse_wowlan_trigger_nr(cmd + 16);
+		if(i < 0)
+			return i;
+		return nl80211_toggle_wowlan_trigger(bss, i, 0);
 	} else if( os_strcasecmp(cmd, "RXFILTER-START") == 0 ) {
-		ret = nl80211_toggle_rx_filter('1');
+		return nl80211_set_wowlan_triggers(bss, 1);
 	} else if( os_strcasecmp(cmd, "RXFILTER-STOP") == 0 ) {
-		ret = nl80211_toggle_rx_filter('0');
+		return nl80211_set_wowlan_triggers(bss, 0);
 	} else {
 		wpa_printf(MSG_ERROR, "Unsupported command: %s", cmd);
 		ret = -1;
-- 
1.7.0.4

