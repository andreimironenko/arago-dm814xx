From f3fcc2e2a8f20052b9d148f869649d1180896253 Mon Sep 17 00:00:00 2001
From: Amarinder Bindra <a-bindra@ti.com>
Date: Wed, 8 Feb 2012 18:02:32 +0530
Subject: [PATCH 1/4] ti814x ti816x: 1) removing reload descriptors
 	2) clean up of some code


Signed-off-by: Amarinder Bindra <a-bindra@ti.com>
---
 drivers/video/firmware.c    |  222 ++++++++++++++++--------------------
 drivers/video/ti814x_logo.c |  263 +++++++++++++------------------------------
 drivers/video/ti816x_logo.c |   87 +++++---------
 include/logo.h              |   10 +-
 4 files changed, 213 insertions(+), 369 deletions(-)

diff --git a/drivers/video/firmware.c b/drivers/video/firmware.c
index 4c05cf2..425d446 100644
--- a/drivers/video/firmware.c
+++ b/drivers/video/firmware.c
@@ -3780,12 +3780,9 @@ int vpdma_load_firmware(u32* desc_buffer)
 	int ok;
 
 	/* allocate physical contiguous memory for firmware buffer */
-	firmware = (u32*)desc_buffer;
-	if (!firmware)
-	{
-#ifdef DEBUG_VPSS
-		printf("unable to allocate memory for VPDMA firmware\n");
-#endif
+	firmware = (u32*) desc_buffer;
+	if (!firmware) {
+		printf("unable to allocate memory for firmware\n");
 		return -1;
 	}
 	/* copy firmware to buffer */
@@ -3799,24 +3796,17 @@ int vpdma_load_firmware(u32* desc_buffer)
 	vpdma_write32(VPDMA_LIST_ADDR, (u32)firmware);
 
 	/* wait till firmware is loaded */
-        for (ok = 0, repeat = 0; repeat < 100 && !ok; repeat++)
-	{
+        for (ok = 0, repeat = 0; repeat < 100 && !ok; repeat++) {
 		status = vpdma_read32(VPDMA_LIST_ATTR);
-		if ((status & 0x80000) == 0x80000)
-		{
+		if ((status & 0x80000) == 0x80000) {
 			ok = 1;
 		}
-		else
-		{
+		else {
 			udelay(10);
 		}
 	}
 
-        if (!ok)
-    	{
-#ifdef DEBUG_VPSS
-    		printf("failed to load VPDMA firmware\n");
-#endif
+        if (!ok) {
     		result = -1;
     	}
  
@@ -3828,44 +3818,41 @@ void vps_reset_module(vps_module_t module, int assert_reset)
 	u32 val = vps_read32(VPS_CLKC_RESET);
 
 	if (assert_reset)
-		val |= (1<<module);
+		val |= (1 << module);
 	else
-		val &= ~(1<<module);
+		val &= ~(1 << module);
 
 	vps_write32(VPS_CLKC_RESET, val);
 }
 
 u32 dispmgr_create_grpx_conf_descriptor(int grpx_unit, u32* desc_buffer, 
-u32* payload_buffer, u32 xres, u32 yres)
+					u32* payload_buffer, u32 xres, u32 yres)
 {
 	u32 size = 0;
-	u32* desc;
-	u32* payload;
+	u32 *desc;
+	u32 *payload;
 
 	/* set up frame configuration descriptor */
 	desc = desc_buffer;
-	desc[0] = 0x1;   /* frame configuration address */
-	desc[1] = 16;    /* data length */
-	desc[2] = (u32)payload_buffer;  /* payload location */
+	desc[0] = 0x1;			/* frame configuration address */
+	desc[1] = 16;			/* data length */
+	desc[2] = (u32)payload_buffer;	/* payload location */
 	desc[3] = 0
-		| (0xB<<27)     /* packet type */
-		| (0<<26)       /* indirect command */
-		| (1<<24)       /* block type */
-		| ((grpx_unit + 1)<<16)  /* destination GRPX0..GRPX2 */
-		| (1<<0)        /* payload size in 128 bit units */
-		;
+		| (0xB << 27)		/* packet type */
+		| (0 << 26)		/* indirect command */
+		| (1 << 24)		/* block type */
+		| ((grpx_unit + 1) << 16)  /* destination GRPX0..GRPX2 */
+		| (1 << 0);        	/* payload size in 128 bit units */
 	size += 16;
 	payload = payload_buffer;
-	payload[0] = 0;      /* reserved */
+	payload[0] = 0;			/* reserved */
 	payload[1] = 0
-		| (xres<<16)  /* frame width */
-		| (yres<<0)   /* frame height */
-			;
-	payload[2] = 0;      /* reserved */
+		| (xres << 16)		/* frame width */
+		| (yres << 0);		/* frame height */
+	payload[2] = 0;			/* reserved */
 	payload[3] = 0
-		| (0<<30)    /* progressive format */
-		| (1<<31)    /* yes soft reset of GRPX unit */
-		;
+		| (0 << 30)		/* progressive format */
+		| (1 << 31);		/* soft reset of GRPX unit */
 
 	return size;
 }
@@ -3878,22 +3865,23 @@ height, u32 paddr)
 	int chan;
 	int x = 0;
 	int y = 0;
-
+	int i, time = 0 , num_desc=0;
+	char *s;
 	u32 layer_ctrl;
+	
 	desc = desc_buffer ;
 	layer_ctrl = 0x0000E400;
 
 	/*
 	 * set up data descriptors for GRPX units
 	 */
-	/* add src_viewport origin to surface start address */
 			
 #ifdef CONFIG_GRPX0
-	layer_ctrl |= 1<<(2);  /* enable GRPXx layer */
+	layer_ctrl |= 1 << (2);  /* enable GRPXx layer */
 #elif defined CONFIG_GRPX1
-	layer_ctrl |= 1<<(1);  /* enable GRPXx layer */
+	layer_ctrl |= 1 << (1);  /* enable GRPXx layer */
 #else
-	layer_ctrl |= 1<<(0);  /* enable GRPXx layer */
+	layer_ctrl |= 1 << (0);  /* enable GRPXx layer */
 #endif
 
 #ifdef CONFIG_GRPX0
@@ -3904,57 +3892,54 @@ height, u32 paddr)
 	chan = GRPX2_CHANNEL_NUMBER;
 #endif
 
-	/* set up data transfer descriptor */
-	desc[0] = 0
-		| (DATA_TYPE<<26)    // RGB-888
-		| (0<<25)            // no notification
-		| (0<<24)            // field number
-		| (0<<23)            // 2-dimensional data
-		| (0<<20)            // +1 line skip (even)
-		| (0<<16)            // +1 line skip (odd)
-		| (stride)           // line stride
-		;
-	desc[1] = 0
-		| (width<<16)        // line length in pixels
-		| (height)           // number of rows
-		;
-	desc[2] = paddr;
-	desc[3] = 0
-    		| (0xA<<27)    // packet type
-		| (0<<26)      // 1D mode
-		| (0<<25)      // inbound direction
-		| (chan<<16)   // channel
-		| (0<<9)       // priority
-		| (chan<<0)    // next channel
-		;
-	desc[4] = 0
-		| (width<<16)  // region width
-		| (height)     // region height
-		;
-	desc[5] = 0
-		| (x<<16)      // horizontal start
-		| (y<<0)       // vertical start
-		;
-	desc[6] = 0
-		| (1<<7)       // first region
-		| (1<<8)       // last region
-		;
-	desc[7] = 0; // alpha blending enable
-	desc += 8;
-	size += 32;
-
-	/* Add a reload list descriptor 
-	*/
-	desc[0] = (u32)desc_buffer;
-	desc[1] = (size+4+15)>>4;
-	desc[2] = 0;
-	desc[3] = 0
-		| (0xC << 27)
-		| (0x7 << 0)
-		;
-	desc += 4;
-	size += 16;
+	if ((s = getenv("logotime")) != NULL) {
+		time = simple_strtol(s, NULL, 10);
+		
+    		if(time > DEFAULT_LOGO_TIME) {
+			printf("Value of logotime is large, setting to default value\n");
+			time = DEFAULT_LOGO_TIME;
+		}
+	}
+	else {
+		time = DEFAULT_LOGO_TIME;
+	}
 
+	num_desc = time * LOGO_TIME_MULTIPLIER;
+	
+	/* set up data transfer descriptor */
+	for(i = 0; i < num_desc; i++) {
+	    	desc[0] = 0
+			| (DATA_TYPE << 26)	/* RGB-888 */
+			| (0 << 25)		/* no notification */
+			| (0 << 24)		/* field number */
+			| (0 << 23)		/* 2-dimensional data */
+			| (0 << 20)		/* +1 line skip (even) */
+			| (0 << 16)               /* +1 line skip (odd) */
+			| (stride);		/* line stride */
+		desc[1] = 0
+			| (width << 16)		/* line length in pixels */
+			| (height);		/* number of rows*/
+		desc[2] = paddr;
+		desc[3] = 0
+	    		| (0xA << 27)		/* packet type */
+			| (0 << 26)		/* 1D mode */
+			| (0 << 25)		/* inbound direction */
+			| (chan << 16)		/* channel */
+			| (0 << 9)		/* priority */
+			| (chan << 0);		/* next channel */
+		desc[4] = 0
+			| (width << 16)		/* region width */
+			| (height); 		/* region height */
+		desc[5] = 0
+			| (x << 16)		/* horizontal start */
+			| (y << 0);		/* vertical start */
+		desc[6] = 0
+			| (1 << 7)		/* first region */
+			| (1 << 8);		/* last region */
+		desc[7] = 0;
+		desc += 8;
+		size += 32;
+	}
 	vps_write32(VPS_COMP_HDMI_VOUT1, layer_ctrl);
 
 	return size;
@@ -3963,15 +3948,14 @@ height, u32 paddr)
 void vpdma_send_list(u32* desc_buffer, int desc_len, int list_no)
 {
 	/* convert descriptor size from byte units to 128-bit units */
-	desc_len = (desc_len+15)>>4;
+	desc_len = (desc_len+15) >> 4;
 
 	/* send list */
-	vpdma_write32(VPDMA_LIST_ADDR,(u32)desc_buffer);
+	vpdma_write32(VPDMA_LIST_ADDR, (u32)desc_buffer);
 	vpdma_write32(VPDMA_LIST_ATTR, 0
-			| (list_no<<24)  /* list number */
-			| (0<<16)        /* list type: normal */
-			| (desc_len<<0)  /* list size */
-			);
+			| (list_no << 24)		/* list number */
+			| (0 << 16)			/* list type: normal */
+			| (desc_len << 0));		/* list size */
 }
 
 int dispmgr_wait_for_list_complete(int dispno)
@@ -3980,22 +3964,15 @@ int dispmgr_wait_for_list_complete(int dispno)
 	int repeat;
 	int ok;
 
-        for (ok = 0, repeat = 0; repeat < 100 && !ok; repeat++)
-	{
+        for (ok = 0, repeat = 0; repeat < 100 && !ok; repeat++) {
 		status = vpdma_read32(VPDMA_LIST_ATTR);
 		if ((status & 0x80000) == 0x80000)
-		{
 			ok = 1;
-		}
 		else
-		{
 			udelay(10);
-		}
-	}
-        if(repeat == 100)
-	{
-	    return -1;
 	}
+        if (repeat == 100)
+		return -1;
 
 	return 0;
 }
@@ -4011,7 +3988,8 @@ void *video_hw_init()
 	u32* payload_buffer;
 	u32 size;
 	u32 paddr;
-
+	int i;
+	
 	/* VPDMA list number to use */
 	int g_vpdma_list_no = VPDMA_LIST_NUMBER;
 
@@ -4047,11 +4025,7 @@ void *video_hw_init()
 	memset((void *) FRAME_BUFFER_ADDRESS,LOGO_BGCOLOR, FRAME_SIZE);
 	
 	if (vpdma_load_firmware(desc_buffer) == -1)
-	{
-#ifdef DEBUG_VPSS
-		printf("\nERROR vpdma_load_firmware failed");
-#endif
-	}
+		printf("\nERROR: loading of firmware failed");
 
 	paddr = ti81xx_device.frameAdrs;
 
@@ -4062,13 +4036,9 @@ void *video_hw_init()
 	size = dispmgr_create_grpx_conf_descriptor(grpx_unit, desc_buffer, payload_buffer,WIDTH,HEIGHT);
 	vpdma_send_list(desc_buffer, size, g_vpdma_list_no);
 
-       	/* wait for list complete interrupt */
+      	/* wait for list complete interrupt */
 	if(dispmgr_wait_for_list_complete(1) == -1)
-	{
-#ifdef DEBUG_VPSS
 		printf("\nERROR : wait for list complete FAILED!");
-#endif
-	}
 
 #ifdef CONFIG_GRPX0
 	vpdma_write32(VPDMA_GRPX0_DATA_CSTAT,0x00001C00);
@@ -4081,8 +4051,14 @@ void *video_hw_init()
 	size = dispmgr_setup_layers(desc_buffer, STRIDE, WIDTH, HEIGHT+60, paddr);
 	vpdma_send_list( desc_buffer, size, g_vpdma_list_no);
 
-	while (dispmgr_wait_for_list_complete(1) == -1);
-
+	for (i = 0; i < 100 ; i++) {
+		if (dispmgr_wait_for_list_complete(1) != -1)
+			break;
+	}
+	
+	if (i == 100)
+		printf("\nERROR : wait for list complete FAILED!");
+		
 	/* return the Graphic device structure */	
 	return (&ti81xx_device);
 }
diff --git a/drivers/video/ti814x_logo.c b/drivers/video/ti814x_logo.c
index 55527d5..e673543 100644
--- a/drivers/video/ti814x_logo.c
+++ b/drivers/video/ti814x_logo.c
@@ -4,9 +4,7 @@
 int ti814x_prcm_init()
 {
 	if (ti814x_prcm_enable_vps_power_and_clock() < 0)
-	{
 		return -1;
-	}
 
 	return 0;
 }
@@ -24,43 +22,34 @@ int ti814x_prcm_enable_vps_power_and_clock()
 	udelay(10);
 
 	/* Check the power state after the wakeup transistion */
-	for (ok=0, repeat=0; repeat<5; repeat++)
-	{
+	for (ok=0, repeat=0; repeat<5; repeat++) {
 		val = prcm_read32(PM_HDVPSS_PWRSTST);
-		if (val == 0x37)
-		{
+		if (val == 0x37) {
 			ok = 1;
 			break;
 		}
 		udelay(10);
 	}
 	if (!ok)
-	{
 		return -1;
-	}
-
+	
 	/* Enable HDVPSS Clocks */
 	prcm_write32(CM_HDVPSS_HDVPSS_CLK_CTRL, 0x02);
 
 	/* Enable HDMI Clocks */
 	prcm_write32(CM_HDVPSS_HDMI_CLKCTRL, 0x02);
 
-	for (ok = 0, repeat = 0; repeat < 5; repeat++)
-	{
+	for (ok = 0, repeat = 0; repeat < 5; repeat++) {
 		val = prcm_read32(CM_HDVPSS_CLKSTCTRL);
-		if ((val & 0x100) == 0x100)
-		{
+		if ((val & 0x100) == 0x100) {
 			ok = 1;
 			break;
 		}
 		udelay(10);
 	}
 	if (!ok)
-	{
 		return -1;
 
-	}
-
 	/* reset HDVPSS and HDMI */
 	prcm_write32(RM_HDVPSS_RSTCTRL, 0x04);
 	udelay(10);
@@ -72,18 +61,15 @@ int ti814x_prcm_enable_vps_power_and_clock()
 	udelay(10);
 
         /* wait for SW reset to complete */
-	for (ok = 0, repeat = 0; repeat < 5; repeat++)
-	{
+	for (ok = 0, repeat = 0; repeat < 5; repeat++) {
 		val = prcm_read32(RM_HDVPSS_RSTST);
-		if ((val & 0x4) == 0x4)
-		{
+		if ((val & 0x4) == 0x4) {
 			ok = 1;
 			break;
 		}
 		udelay(10);
 	}
-        if (!ok)
-        {
+        if (!ok) {
     	        return -1;
         }
 
@@ -96,20 +82,16 @@ int ti814x_prcm_enable_vps_power_and_clock()
 	udelay(10);
 
 	/* check power status */
-	for (ok = 0, repeat = 0; repeat < 5; repeat++)
-	{
+	for (ok = 0, repeat = 0; repeat < 5; repeat++) {
 		val = prcm_read32(PM_HDVPSS_PWRSTST);
-		if (val == 0x37)
-		{
+		if (val == 0x37) {
 			ok = 1;
 			break;
 		}
 		udelay(10);
 	}
         if (!ok)
-        {
     	        return -1;
-        }
 
 	return 0;
 }
@@ -148,19 +130,18 @@ void ti814x_pll_configure(u32 baseAddr, u32 N, u32 M, u32 M2, u32 clkCtrlValue)
 	clkout_dco  = ref_clk * M;
 	clk_out     = clkout_dco / M2;
 
-	pll_write32((baseAddr + M2NDIV    ),m2nval);
-	pll_write32((baseAddr + MN2DIV    ),mn2val);
-	pll_write32((baseAddr + TENABLEDIV),0x1);
-	pll_write32((baseAddr + TENABLEDIV),0x0);
-	pll_write32((baseAddr + TENABLE   ),0x1);
-	pll_write32((baseAddr + TENABLE   ),0x0);
+	pll_write32((baseAddr + M2NDIV), m2nval);
+	pll_write32((baseAddr + MN2DIV), mn2val);
+	pll_write32((baseAddr + TENABLEDIV), 0x1);
+	pll_write32((baseAddr + TENABLEDIV), 0x0);
+	pll_write32((baseAddr + TENABLE), 0x1);
+	pll_write32((baseAddr + TENABLE), 0x0);
 
 	clkctrl = pll_read32(baseAddr + CLKCTRL);
-	clkctrl = (clkctrl & ~(7<<10 | 1<<23)) | clkCtrlValue;
+	clkctrl = (clkctrl & ~(7 << 10 | 1 << 23)) | clkCtrlValue;
 	pll_write32(baseAddr + CLKCTRL, clkctrl);
 
-	do
-	{
+	do {
 		status = pll_read32(baseAddr + STATUS);
 	} 
 	while ((status & 0x00000600) != 0x00000600);
@@ -180,9 +161,7 @@ void ti814x_vps_init()
 	vps_write32(VPS_CLKC_VENC_ENABLE, 0xD);
 
 	/* enable comp units */
-	vps_write32(VPS_COMP_STATUS, 0
-			| (1<<0)   // HDMI enable
-			);
+	vps_write32(VPS_COMP_STATUS, 0 | (1<<0));   // HDMI enable
 
 	/* set background color */
 	vps_write32(VPS_COMP_BGCOLOR, LOGO_BGCOLOR);
@@ -190,12 +169,10 @@ void ti814x_vps_init()
 
 int ti814x_set_mode(int dispno,int xres, int yres)
 {
-#ifdef CONFIG_480p
+#ifdef CONFIG_480P
 	/*modeline "720x480" 27.000 720 736 798 858 480 489 495 525 -hsync -vsync*/
 	if (ti814x_pll_config_hdmi(27000000) == -1)
-	{
 		return -1;
-	}
 	ti814x_hdmi_enable(27000000);
         ti814x_vps_configure_venc(0x6000, 720, 736, 798, 858, 480, 489, 495, 525, 0, 1, 1);
 	xres = 720;
@@ -203,9 +180,7 @@ int ti814x_set_mode(int dispno,int xres, int yres)
 #else		
 	/* ModeLine "1920x1080" 148.50 1920 2008 2052 2200 1080 1084 1088 1125 +HSync +VSync */
 	if (ti814x_pll_config_hdmi(148500000) == -1)
-	{
 		return -1;
-	}
 	ti814x_hdmi_enable(148500000);
 	ti814x_vps_configure_venc(0x6000, 1920, 2008, 2052, 2200, 1080, 1084, 1088, 1125, 0, 0, 0);
 	xres = 1920;
@@ -230,11 +205,9 @@ int ti814x_pll_config_hdmi(u32 freq)
 	rd_osc_src = pll_read32(PLL_VIDEO2_PINMUX);
 	rd_osc_src &= 0xFFFFFFFE;
 	pll_write32(PLL_VIDEO2_PINMUX, rd_osc_src);
+
 	if (ti814x_pll_get_dividers(freq, 1, &config) == -1)
-	{
 		return -1;
-	}
-
 	ti814x_pll_configure(PLL_VIDEO2_BASE, config.n, config.m, config.m2, config.clk_ctrl);
 
 	return 0;
@@ -255,7 +228,7 @@ void ti814x_hdmi_enable(int freq)
 	udelay(10);
 
 	/* configure HDMI PHY */
-	/* 48 Mhz Clock input to HDMI ie SDIO clock output from PRCM */
+	/* 48 Mhz Clock input to HDMI ie sdio clock output from prcm */
 	prcm_write32(0x15B0, 0x2);
 
 	/* Power on the phy from wrapper */
@@ -269,15 +242,15 @@ void ti814x_hdmi_enable(int freq)
 	hdmi_write32(0x0040, 0x8A);
 	while((hdmi_read32(0x0040) & 0xFF) != 0xAA);
 
-	/* Dummy read to PHY base to complete the SCP reset process HDMI_PHY_U_BAS */
+	/* Dummy read to PHY base to complete the scp reset process */
 	temp = hdmi_read32(0x0300);
 
 	temp = hdmi_read32(0x0300);
 
 	if(freq > 50000000)
-	temp1 = ((temp & 0x3FFFFFFF) | (0x1 << 30));//0x40000000);
+	temp1 = ((temp & 0x3FFFFFFF) | (0x1 << 30));
 	else
-	temp1 = ((temp & 0x3FFFFFFF) | (0x0 << 30));//0x40000000);
+	temp1 = ((temp & 0x3FFFFFFF) | (0x0 << 30));
 	hdmi_write32(0x0300, temp1);
 
 	temp = hdmi_read32(0x030C) ;
@@ -306,7 +279,7 @@ void ti814x_hdmi_enable(int freq)
 	/* disable audio */
 	hdmi_write32(0x0080, 0x0);
 
-	/* release HDMI IP CORE reset and release power down of core */
+	/* release hdmi core reset and release power down of core */
 	hdmi_write32(0x0414, 0x1);
 	hdmi_write32(0x0424, 0x1);
 
@@ -316,20 +289,18 @@ void ti814x_hdmi_enable(int freq)
 	/* config input data bus width */
 	hdmi_write32(0x0420, 0x7);
 
-	/* configure AVI INFOFRAME */
-	hdmi_write32(0x0528, 0x0);  // VID_MODE CONFIG
-	hdmi_write32(0x04CC, 0x1);  // DATA ENABLE CNTRL
-	hdmi_write32(0x0420, 0x37); // ENABLE VSYNC AND HSYNC
-	hdmi_write32(0x04F8, 0x0);  // iadjust config to enable vsync
-	hdmi_write32(0x0520, 0x10); // csc is bt709
-	hdmi_write32(0x09BC, 0x21); // enable hdmi
+	/* configure avi infoframe */
+	hdmi_write32(0x0528, 0x0);  /* vid_mode */
+	hdmi_write32(0x04CC, 0x1);  /* data enable control */
+	hdmi_write32(0x0420, 0x37); /* enable vsync and hsync */
+	hdmi_write32(0x04F8, 0x0);  /* iadjust config to enable vsync */
+	hdmi_write32(0x0520, 0x10); /* csc is bt709 */
+	hdmi_write32(0x09BC, 0x21); /* enable hdmi */
+	hdmi_write32(0x0608, 0x20); /* tmds_ctrl */
+	hdmi_write32(0x0904, 0x0);  /* disable n/cts of actrl */
+	hdmi_write32(0x0950, 0x0);  /* disable audio */
+	hdmi_write32(0x0414, 0x0);  /* keep audio  operation in reset state */
 
-	hdmi_write32(0x0608, 0x20); // tmds_ctrl
-	hdmi_write32(0x0904, 0x0);  // disable n/cts of actrl
-	hdmi_write32(0x0950, 0x0);  // disable audio
-	hdmi_write32(0x0414, 0x0);  // keep audio  operation in reset state
-
-	/* configure AVI INFOFRAME */
 	hdmi_write32(0x0A00, 0x82);
 	hdmi_write32(0x0A04, 0x2);
 	hdmi_write32(0x0A08, 0xD);
@@ -337,10 +308,10 @@ void ti814x_hdmi_enable(int freq)
 	hdmi_write32(0x0A14, 0xA0);
 	hdmi_write32(0x0A1C, 0x8F);
 
-	hdmi_write32(0x0538 , 0x3);  // DISABLE DEEP COLOR MODE IN DC PACKET
+	hdmi_write32(0x0538 , 0x3);  /* disable deep color mode in dc packet */
 	hdmi_write32(0x09C0 , 0x10);
-	hdmi_write32(0x09F8 , 0x3);  // ENABLE AND REPEAT AVI INFOFRAM TRANSMISSON
-	hdmi_write32(0x09FC , 0xF);  // ENABLE AND REPEAT GENEERAL PACKET TRANSMISSION
+	hdmi_write32(0x09F8 , 0x3);  /* enable and repeat avi infofram transmission */
+	hdmi_write32(0x09FC , 0xF);  /* enable and repeat general packet transmission */
 }
 
 /* Change pin mux */
@@ -355,7 +326,6 @@ void ti814x_pll_hdmi_setwrapper_clk()
 int ti814x_pll_get_dividers(u32 req_out_clk, int hdmi, pll_config_t* config)
 {
 	int32_t ret = -1;
-	int32_t n, m, m2;
 	float ref_clk, dco_clk, clk_out;
 	float best_delta;
 
@@ -365,46 +335,40 @@ int ti814x_pll_get_dividers(u32 req_out_clk, int hdmi, pll_config_t* config)
 	config->clk_ctrl = 0;
 	best_delta = 1E20;
 
-	if(hdmi)
-	{
-		config->n = 19;//n;
-		config->m = 1485;//m;
-		config->m2 = 10;//m2;
+	if(hdmi) {
+		config->n = 19;
+		config->m = 1485;
+		config->m2 = 10;
 		config->clk_ctrl = 0x200a1001;
-        	if(req_out_clk == 74250000 )
-		{
-                	config->n = 19;//n;
-			config->m = 742;//m;
-			config->m2 = 10;//m2;
+        	if(req_out_clk == 74250000) {
+                	config->n = 19;
+			config->m = 742;
+			config->m2 = 10;
 			config->clk_ctrl = 0x20020801;
 		}
-    		else if(req_out_clk == 65000000 )
-    		{
-    			config->n = 19;//n;
-    			config->m = 650;//m;
-    			config->m2 = 10;//m2;
+    		else if(req_out_clk == 65000000) {
+    			config->n = 19;
+    			config->m = 650;
+    			config->m2 = 10;
 	    		config->clk_ctrl = 0x20020801;
     		}
-	    	else if(req_out_clk == 54000000 )
-   		{
-			config->n = 19;//n;
-	    		config->m = 540;//m;
-    			config->m2 = 10;//m2;
+	    	else if(req_out_clk == 54000000) {
+			config->n = 19;
+	    		config->m = 540;
+    			config->m2 = 10;
 	    		config->clk_ctrl = 0x20020801;
 	   	}
-    		else if(req_out_clk == 27000000 )
-	    	{
-		    	config->n = 19;//n;
-	    		config->m = 540;//m;
-		    	config->m2 = 2;//m2;
-    			config->clk_ctrl = 0x200A0801;//0x20020801;
+    		else if(req_out_clk == 27000000 ) {
+		    	config->n = 19;
+	    		config->m = 540;
+		    	config->m2 = 2;
+    			config->clk_ctrl = 0x200A0801;
     		}
-	    	else if(req_out_clk == 33000000 )
-    		{
-	    		config->n = 19;//n;
-	    		config->m = 660;//m;
-    			config->m2 = 2;//m2;
-	    		config->clk_ctrl = 0x200A0801;//0x20020801;
+	    	else if(req_out_clk == 33000000 ) {
+	    		config->n = 19;
+	    		config->m = 660;
+    			config->m2 = 2;
+	    		config->clk_ctrl = 0x200A0801;
 	    	}
 
     		ref_clk = 20E6f / (config->n + 1);
@@ -412,68 +376,7 @@ int ti814x_pll_get_dividers(u32 req_out_clk, int hdmi, pll_config_t* config)
     		clk_out = dco_clk / config->m2;
     		ret = 0;
 	}
-	else
-	{
-		for (n = 19; n <= 19 && ret != 0; n++)
-		{
-			ref_clk = 20E6f / (n + 1);
-			if (ref_clk < 2.5E6)
-			{
-				int32_t m_min;
-				int32_t m_max;
-
-				if (hdmi)
-				{
-					m_min = 1000.0E6f / ref_clk;
-					m_max = 2000.0E6f / ref_clk;
-				}	
-				else
-				{
-					m_min =  500.0E6f / ref_clk;
-					m_max = 1000.0E6f / ref_clk;
-				}	
-
-				for (m = m_min; m < m_max && ret != 0; m++)
-				{
-					dco_clk = ref_clk * m;
-					for (m2 = 10; m2 <= 20; m2++)
-					{
-						float delta;
-						clk_out = dco_clk / m2;
-						delta = clk_out-req_out_clk;
-						if (delta < 0)
-						{
-							delta = -delta;
-						}
-
-						if (delta < best_delta)
-						{
-							config->n = n;
-							config->m = m;
-							config->m2 = m2;
-							if (hdmi)
-							{
-								config->clk_ctrl = 0x200a1001;
-							}
-							else
-							{
-								config->clk_ctrl = 0x00000801;
-							}
-
-							best_delta = delta;
-
-							if (delta == 0.0)
-							{
-								ret = 0;
-								break;
-							}
-						}
-					}
-				}
-			}
-		}
-	}
-	return ret;
+	return 0;
 }
 
 /**
@@ -489,11 +392,11 @@ void ti814x_vps_configure_venc(u32 cfg_reg_base, int hdisp, int hsyncstart, int
 
 	 /* CFG10: clamp, lines (total num lines), pixels (total num pixels/line) */
 
-	vps_write32(cfg_reg_base + 0x28, 0x84000000 | (vtotal<<12) | (htotal));  // 84h=132d for 1080i
+	vps_write32(cfg_reg_base + 0x28, 0x84000000 | (vtotal<<12) | (htotal));  /* 84h=132d for 1080i */
 
 	 /* CFG12: hs_width, act_pix, h_blank-1 */
 
-  	vps_write32(cfg_reg_base + 0x30, (hs_width<<24) | (hdisp<<12) | (av_start_h-1));
+ 	vps_write32(cfg_reg_base + 0x30, (hs_width<<24) | (hdisp<<12) | (av_start_h-1));
 
  	 /* CFG15: vout_hs_wd, vout_avdhw, vout_avst_h (same as in 0x6030?) */
 
@@ -539,17 +442,15 @@ void ti814x_vps_configure_venc(u32 cfg_reg_base, int hdisp, int hsyncstart, int
 
     	| (vs_invert<<23)
 
-    	| (3<<16) // video out format: 10 bit, separate syncs
-
-    	| (1<<13) // bypass gamma correction
+    	| (3<<16) /* video out format: 10 bit, separate syncs */
 
-    	| (1<<5)  // bypass gamma correction
+    	| (1<<13) /* bypass gamma correction */
 
-    	| (1<<4)  // bypass 2x upscale
+    	| (1<<5)  /* bypass gamma correction */
 
-    	| (1<<0)  // 480p format 
+    	| (1<<4)  /* bypass 2x upscale */
 
-    	);
+    	| (1<<0));  /* 480p format */
 
 	vps_write32(cfg_reg_base + 0x00, vps_read32(cfg_reg_base+0x00) | 0x40000000); /* start encoder */
 }
@@ -557,22 +458,14 @@ void ti814x_vps_configure_venc(u32 cfg_reg_base, int hdisp, int hsyncstart, int
 int ti814x_set_board()
 {
 	if(ti814x_prcm_init() == -1)
-        {
-#ifdef DEBUG_VPSS
-		printf("ERROR: ti814x_prcm_init failed\n");
-#endif
-        }
-
+        	printf("ERROR: ti814x prcm init failed\n");
+        
 	ti814x_pll_init();
 
 	ti814x_vps_init();
 
 	if (ti814x_set_mode(1, WIDTH, HEIGHT) == -1)
-	{
-#ifdef DEBUG_VPSS
-		printf("ERROR: ti814x_set_mode failed\n");
-#endif
-	}
-	
+		printf("ERROR: ti814x setting the diisplay failed\n");
+		
 	return 0;
 }
diff --git a/drivers/video/ti816x_logo.c b/drivers/video/ti816x_logo.c
index 808cf29..24df5ee 100644
--- a/drivers/video/ti816x_logo.c
+++ b/drivers/video/ti816x_logo.c
@@ -4,9 +4,7 @@
 void ti816x_HdVpssClkEnable()
 {
 	uint delay;
-#ifdef DEBUG_VPSS
-	printf("\t\nPRCM for HDVPSS is in Progress","Output",1,1,1);
-#endif
+
 	WR_MEM_32(CM_HDDSS_CLKSTCTRL, 2); /*Enable Power Domain Transition for HDVPSS */
 
 	WR_MEM_32(CM_ACTIVE_HDDSS_CLKCTRL, 0); /*Enable HDVPSS Clocks*/
@@ -19,40 +17,25 @@ void ti816x_HdVpssClkEnable()
 
 	/* Check to see module is functional */
 	while(((RD_MEM_32(CM_ACTIVE_HDDSS_CLKCTRL) & 0x70000) >> 16) != 0) ;
-#ifdef DEBUG_VPSS
-	printf("\t\nPRCM for HDVPSS is Done Successfully","Output",1,1,1);
-#endif
 }
 
 void ti816x_HdmiClkEnable()
 {
-#ifdef DEBUG_VPSS
-	printf("\t\nPRCM for HDMI is in Progress","Output",1,1,1);
-#endif
-	WR_MEM_32(CM_HDMI_CLKSTCTRL,2); /*Enable Power Domain Transition for HDMI */
-	WR_MEM_32(CM_ACTIVE_HDMI_CLKCTRL,2); /*Enable HDMI Clocks*/
+	WR_MEM_32(CM_HDMI_CLKSTCTRL, 2); /*Enable Power Domain Transition for HDMI */
+	WR_MEM_32(CM_ACTIVE_HDMI_CLKCTRL, 2); /*Enable HDMI Clocks*/
 
 	/*Check clocks are active*/
 	while(((RD_MEM_32(CM_HDMI_CLKSTCTRL) & 0x300) >> 8) != 0x3) ;
 
 	/* Check to see module is functional */
 	while(((RD_MEM_32(CM_ACTIVE_HDMI_CLKCTRL) & 0x70000) >> 16) != 0) ;
-#ifdef DEBUG_VPSS
-	printf("\t\nPRCM for HDMI is Done Successfully","Output",1,1,1);
-#endif
 }
 
 void ti816x_HdVpss_VencD297_VencA297()
 {
-#ifdef DEBUG_VPSS
-	printf("\t\nVideo PLL: VencD->297 VencA->297 Please Wait.....","Output",1,1,1);
-#endif
 	/*SYS_CLKOUT selection*/
 	WR_MEM_32(CM_CLKOUT_CTRL, 0xA2);  /* /5 divider is selected*/
 	ti816x_VideoPLL(0x6E, 0x2, 0xB, 0x0, 0x5, 0xA, 0x0, 0x2, 0xA, 0x0, 0x2, 0x3, 0x3);
-#ifdef DEBUG_VPSS
-	printf("\t\nVideo PLL Configuration is Done.....","Output",1,1,1);
-#endif
 }
 
 void ti816x_VideoPLL(uint VIDEO_N, uint VIDEO_P, uint  VIDEO_INTFREQ1, uint 
@@ -60,24 +43,24 @@ VIDEO_FRACFREQ1, uint VIDEO_MDIV1, uint  VIDEO_INTFREQ2, uint VIDEO_FRACFREQ2,
 uint VIDEO_MDIV2, uint  VIDEO_INTFREQ3, uint VIDEO_FRACFREQ3, uint VIDEO_MDIV3, 
 uint B1, unsigned C2)
 {
-	uint video_pll_ctrl=0;
+	uint video_pll_ctrl = 0;
 
 	/*Put the Video PLL in Bypass Mode*/
 	video_pll_ctrl = RD_MEM_32(VIDEOPLL_CTRL);
-	video_pll_ctrl &=0xFFFFFFFB;
-	video_pll_ctrl |=4;
+	video_pll_ctrl &= 0xFFFFFFFB;
+	video_pll_ctrl |= 4;
 	WR_MEM_32(VIDEOPLL_CTRL, video_pll_ctrl);
 
 	/*Bring Video PLL out of Power Down Mode*/
 	video_pll_ctrl = RD_MEM_32(VIDEOPLL_CTRL);
-	video_pll_ctrl &=0xFFFFFFF7;
-	video_pll_ctrl |=8;
+	video_pll_ctrl &= 0xFFFFFFF7;
+	video_pll_ctrl |= 8;
 	WR_MEM_32(VIDEOPLL_CTRL, video_pll_ctrl);
 
 	/*Program the Video PLL Multiplier and Pre-dividr value*/
 	video_pll_ctrl = RD_MEM_32(VIDEOPLL_CTRL);
-	video_pll_ctrl &=0xFF;
-	video_pll_ctrl |=(VIDEO_N<<16) | (VIDEO_P<<8);
+	video_pll_ctrl &= 0xFF;
+	video_pll_ctrl |= (VIDEO_N << 16) | (VIDEO_P << 8);
 	WR_MEM_32(VIDEOPLL_CTRL, video_pll_ctrl);
 
 	/*Bring the Video PLL Individual output clocks out of Power Down Mode
@@ -87,18 +70,18 @@ uint B1, unsigned C2)
 	WR_MEM_32(VIDEOPLL_PWD, 0x0);
 
 	/*Program the Video PLL to generate SYSCLK11 (RF Modulator), SYSCLK17 (SD_VENC), and STC1 source clocks*/
-	WR_MEM_32(VIDEOPLL_FREQ1, (1<<31) | (1<<28) | (VIDEO_INTFREQ1<<24) | VIDEO_FRACFREQ1);
+	WR_MEM_32(VIDEOPLL_FREQ1, (1 << 31) | (1 << 28) | (VIDEO_INTFREQ1 << 24) | VIDEO_FRACFREQ1);
 
 	/*Program Video PLL SYSCLK11 Post divider register*/
-	WR_MEM_32(VIDEOPLL_DIV1, (1<<8) | VIDEO_MDIV1);
+	WR_MEM_32(VIDEOPLL_DIV1, (1 << 8) | VIDEO_MDIV1);
 
 	/*Program the PLL to generate SYSCLK13 (HD_VENC_D clock) and STC0/STC1 source clocks */
-	WR_MEM_32(VIDEOPLL_FREQ2, (1<<31) | (1<<28) | (VIDEO_INTFREQ2<<24) | VIDEO_FRACFREQ2);
-	WR_MEM_32(VIDEOPLL_DIV2,  (1<<8) | VIDEO_MDIV2);
+	WR_MEM_32(VIDEOPLL_FREQ2, (1 << 31) | (1 << 28) | (VIDEO_INTFREQ2 << 24) | VIDEO_FRACFREQ2);
+	WR_MEM_32(VIDEOPLL_DIV2,  (1 << 8) | VIDEO_MDIV2);
 
 	/*Program the PLL to generate SYSCLK13 and STC0/STC1 source clocks */
-	WR_MEM_32(VIDEOPLL_FREQ3, (1<<31) | (1<<28) | (VIDEO_INTFREQ3<<24) | VIDEO_FRACFREQ3);
-	WR_MEM_32(VIDEOPLL_DIV3,  (1<<8) | VIDEO_MDIV3);
+	WR_MEM_32(VIDEOPLL_FREQ3, (1 << 31) | (1 << 28) | (VIDEO_INTFREQ3 << 24) | VIDEO_FRACFREQ3);
+	WR_MEM_32(VIDEOPLL_DIV3,  (1 << 8) | VIDEO_MDIV3);
 
 	WR_MEM_32(CM_SYSCLK13_CLKSEL, C2);
 	WR_MEM_32(CM_SYSCLK15_CLKSEL, B1);
@@ -108,7 +91,7 @@ uint B1, unsigned C2)
 
 	/*Put the Main PLL in Normal(PLL) Mode*/
 	video_pll_ctrl = RD_MEM_32(VIDEOPLL_CTRL);
-	video_pll_ctrl &=0xFFFFFFFB;
+	video_pll_ctrl &= 0xFFFFFFFB;
 	WR_MEM_32(VIDEOPLL_CTRL, video_pll_ctrl);
 }
 
@@ -170,9 +153,6 @@ void ti816x_SetDvo2PinMux()
 	WR_MEM_32(0x481409e8, 0);
 	WR_MEM_32(0x481409ec, 0);
 	WR_MEM_32(0x481409f0, 0);
-#ifdef DEBUG_VPSS
-	printf("\t\nPinmux Configuration is Done.....","Output",1,1,1);
-#endif
 }
 
 void ti816x_hdmi_enable()
@@ -272,22 +252,22 @@ void ti816x_hdmi_enable()
         temp |= 0x00000004;
 	WR_MEM_32(0x46C00420, temp);
 
-	WR_MEM_32(0x46C004CC, 0x00000001);  // DATA ENABLE CNTRL
+	WR_MEM_32(0x46C004CC, 0x00000001);  /* data enable control */
 	
-	temp = RD_MEM_32(0x46C00420);     // ENABLE VSYNC AND HSYNC
+	temp = RD_MEM_32(0x46C00420);     
         temp |= 0x00000020;
         temp |= 0x00000010;
-	WR_MEM_32(0x46C00420, temp);
+	WR_MEM_32(0x46C00420, temp);  /* enable hsync and vsync */
 
-	hdmi_write32(0x0528, 0x0);  // VID_MODE CONFIG
-	hdmi_write32(0x04F8, 0x0);  // iadjust config to enable vsync
-	hdmi_write32(0x0520, 0x10); // csc is bt709
-	hdmi_write32(0x09BC, 0x21); // enable hdmi
+	WR_MEM_32(0x46C00528, 0x0);  /* vid mode config */
+	WR_MEM_32(0x46C004F8, 0x0);  /* iadjust config to enable vsync */
+	WR_MEM_32(0x46C00520, 0x10); /* csc is bt709 */
+	WR_MEM_32(0x46C009BC, 0x21); /* enable hdmi */
 
-	hdmi_write32(0x0608, 0x20); // tmds_ctrl
-	hdmi_write32(0x0904, 0x0);  // disable n/cts of actrl
-	hdmi_write32(0x0950, 0x0);  // disable audio
-	hdmi_write32(0x0414, 0x0);  // keep audio  operation in reset state
+	WR_MEM_32(0x46C00608, 0x20); /* tmds_ctrl */
+	WR_MEM_32(0x46C00904, 0x0);  /* disable n/cts of actrl */
+	WR_MEM_32(0x46C00950, 0x0);  /* disable audio */
+	WR_MEM_32(0x46C00414, 0x0);  /* keep audio  operation in reset state */
 }
 
 void ti816x_configureHdVenc720P60(int useEmbeddedSync)
@@ -296,16 +276,10 @@ void ti816x_configureHdVenc720P60(int useEmbeddedSync)
 
 	vencHd_D_Base = (volatile uint *)0x48106000;
 
-	/**vencHd_D_Base = 0x40023043;  - Prob embedded syncs */    
-	/**vencHd_D_Base = 0x4003A013;  - Color space conversion done */ 
 	if (useEmbeddedSync != 0x0)
-	{
 		*vencHd_D_Base = 0x4002A033; 
-	}
 	else
-	{
-			*vencHd_D_Base = 0x40032033;    
-	}
+		*vencHd_D_Base = 0x40032033;    
 
 	vencHd_D_Base++;
 	*vencHd_D_Base = 0x1FD01E24;
@@ -367,8 +341,7 @@ void ti816x_vps_init()
 {
 	/* enable comp units */
 	vps_write32(VPS_COMP_STATUS, 0
-			| (1<<0)   /* HDMI enable */
-			);
+			| (1<<0));   /* HDMI enable */
 
 	/* set background color */
 	vps_write32(VPS_COMP_BGCOLOR, LOGO_BGCOLOR);
diff --git a/include/logo.h b/include/logo.h
index f39f920..e40bdf3 100644
--- a/include/logo.h
+++ b/include/logo.h
@@ -13,7 +13,7 @@
 /*For TI816X */
 #ifdef CONFIG_TI816X
 
-#define CONFIG_720p
+#define CONFIG_720P
 #define SET_BOARD()                     ti816x_set_board();
 #define CTRL_MODULE_BASE_ADDR    	0x48140000
 #define CM_CLKOUT_CTRL           	(PRCM_REG_BASE + 0x100)
@@ -40,7 +40,7 @@
 /*For TI814X */
 #ifdef CONFIG_TI814X
 
-#define CONFIG_480p
+#define CONFIG_480P
 #define SET_BOARD()                     ti814x_set_board();
 #define CM_HDVPSS_CLKSTCTRL       	0x0800
 #define CM_HDVPSS_HDVPSS_CLK_CTRL   	0x0820
@@ -116,6 +116,8 @@
 #define VPDMA_GRPX1_DATA_CSTAT          0x380
 #define VPDMA_GRPX2_DATA_CSTAT          0x384
 #define VPDMA_LIST_NUMBER               2 
+#define LOGO_TIME_MULTIPLIER            60
+#define DEFAULT_LOGO_TIME		15
 
 #define GRPX0                           0
 #define GRPX1                           1
@@ -142,10 +144,10 @@
 #define VPS_CLKC_RESET                  0x0104
 #define VPS_COMP_HDMI_VOUT1             0x5204
 
-#ifdef CONFIG_480p
+#ifdef CONFIG_480P
 #define WIDTH                           720
 #define HEIGHT                          480
-#elif defined CONFIG_720p
+#elif defined CONFIG_720P
 #define WIDTH                           1280
 #define HEIGHT                          720
 #else
-- 
1.7.1

