From 1bb908dfe0fb7b3dcce86adb7a37e790b6b57bce Mon Sep 17 00:00:00 2001
From: Amarinder Bindra <a-bindra@ti.com>
Date: Tue, 31 Jan 2012 11:52:45 +0530
Subject: [PATCH 1/5] ti816x ti814x: C files for register settings on the board for support of splashscreen in u-boot for the logo


Signed-off-by: Amarinder Bindra <a-bindra@ti.com>
---
 drivers/video/firmware.c    | 4096 +++++++++++++++++++++++++++++++++++++++++++
 drivers/video/ti814x_logo.c |  578 ++++++
 drivers/video/ti816x_logo.c |  390 ++++
 3 files changed, 5064 insertions(+), 0 deletions(-)
 create mode 100644 drivers/video/firmware.c
 create mode 100644 drivers/video/ti814x_logo.c
 create mode 100644 drivers/video/ti816x_logo.c

diff --git a/drivers/video/firmware.c b/drivers/video/firmware.c
new file mode 100644
index 0000000..4c05cf2
--- /dev/null
+++ b/drivers/video/firmware.c
@@ -0,0 +1,4096 @@
+#include <common.h>
+#include <video_fb.h>
+#include <logo.h>
+
+u16 vpdma_firmware[] =
+{
+0x4b06,
+0x8040,
+0x6807,
+0x4907,
+0x4a06,
+0x5100,
+0x4402,
+0x081f,
+0x4a06,
+0x3100,
+0x4402,
+0x081e,
+0x4904,
+0x8041,
+0x4804,
+0x8040,
+0x8006,
+0x0c00,
+0xd001,
+0xc002,
+0x8116,
+0x0001,
+0x4400,
+0x081c,
+0x4401,
+0x081d,
+0x4906,
+0x096f,
+0x4806,
+0x0818,
+0x8501,
+0x4a06,
+0x0001,
+0x8121,
+0x9421,
+0x4400,
+0x081b,
+0x4400,
+0x0818,
+0x4806,
+0x0001,
+0x4400,
+0x081a,
+0x4806,
+0x1c00,
+0x4400,
+0x0819,
+0x4906,
+0x0000,
+0x4401,
+0x0825,
+0x4401,
+0x0824,
+0x4806,
+0x0818,
+0x4401,
+0x0821,
+0x4400,
+0x0820,
+0x4806,
+0x096f,
+0x8006,
+0x0001,
+0x4401,
+0x0823,
+0x4400,
+0x0822,
+0x4401,
+0x0826,
+0x4806,
+0x8000,
+0x4400,
+0x0827,
+0x4806,
+0x0034,
+0x4400,
+0x8042,
+0x4806,
+0x0000,
+0x4400,
+0x80f8,
+0x4806,
+0x0001,
+0x4400,
+0x80f9,
+0x4b06,
+0x0818,
+0x4b86,
+0x0820,
+0xbc07,
+0xb80f,
+0x0400,
+0x4806,
+0x0001,
+0x4400,
+0x80ff,
+0x4806,
+0xffff,
+0x4400,
+0x80f8,
+0x4806,
+0xffff,
+0x4400,
+0x80f9,
+0x4806,
+0x0000,
+0x4400,
+0x0858,
+0x4400,
+0x085d,
+0x4400,
+0x085e,
+0x4400,
+0x085f,
+0x4400,
+0x085c,
+0x4400,
+0x0957,
+0x4400,
+0x0959,
+0x4400,
+0x095a,
+0x4400,
+0x095b,
+0x4400,
+0x095c,
+0x4400,
+0x095d,
+0x4400,
+0x095e,
+0x4400,
+0x095f,
+0x4400,
+0x0960,
+0x4400,
+0x0966,
+0x4400,
+0x0965,
+0x4806,
+0x00d1,
+0x4400,
+0x80e1,
+0x4806,
+0x026a,
+0x4400,
+0x80e2,
+0x4806,
+0x05e7,
+0x4400,
+0x80e3,
+0x4806,
+0x01ad,
+0x4400,
+0x80fc,
+0x4400,
+0x80fe,
+0x0400,
+0x4806,
+0x0000,
+0x4400,
+0x0954,
+0x4400,
+0x0955,
+0x4400,
+0x0956,
+0x4804,
+0x80fe,
+0xaa06,
+0x0008,
+0x4906,
+0x0001,
+0x9401,
+0x4400,
+0x80ff,
+0x4b86,
+0x0959,
+0x83c4,
+0x80fe,
+0x480f,
+0xcc0e,
+0x4b06,
+0x8001,
+0x4806,
+0x0008,
+0xa804,
+0x80fe,
+0x8330,
+0x4807,
+0x8906,
+0x01f0,
+0x8516,
+0x01f0,
+0xc801,
+0x4581,
+0x4906,
+0x01ff,
+0x4401,
+0x80fd,
+0xb90f,
+0x4906,
+0x8042,
+0x8321,
+0x4a07,
+0x8626,
+0x007f,
+0xcccc,
+0x4804,
+0x80e0,
+0xe000,
+0x4806,
+0xffff,
+0x4400,
+0x80f8,
+0x4b06,
+0x0959,
+0x8334,
+0x80fe,
+0x4a06,
+0x0000,
+0x4502,
+0x4a04,
+0x80fe,
+0x4402,
+0x0861,
+0xa926,
+0x0005,
+0x4401,
+0x0868,
+0x4b06,
+0x0832,
+0x8313,
+0x4807,
+0x4400,
+0x0863,
+0xa926,
+0x0008,
+0x4401,
+0x0867,
+0x4b06,
+0x8040,
+0x8313,
+0x6807,
+0x4400,
+0x0865,
+0x4807,
+0x4400,
+0x0866,
+0x8336,
+0x0003,
+0x4807,
+0x8006,
+0xfff9,
+0xcc03,
+0x4a06,
+0x05c5,
+0xe002,
+0x4806,
+0x0000,
+0x4400,
+0x0864,
+0x4b06,
+0x0830,
+0xa926,
+0x0005,
+0x8313,
+0x6807,
+0x4400,
+0x085d,
+0x4400,
+0x085c,
+0x4500,
+0x4b06,
+0x0833,
+0x8313,
+0x4807,
+0x4400,
+0x085f,
+0x4806,
+0x0151,
+0xe000,
+0x4804,
+0x0867,
+0x4b06,
+0x8043,
+0x8330,
+0x4907,
+0xcc32,
+0x4a04,
+0x80fe,
+0x4b06,
+0x0967,
+0x8323,
+0x4806,
+0x011f,
+0x4500,
+0x4b86,
+0x8042,
+0x83c4,
+0x0867,
+0x480f,
+0x8336,
+0x0008,
+0x4500,
+0x4806,
+0x007f,
+0x4580,
+0x4b06,
+0x8001,
+0x8334,
+0x0867,
+0x4806,
+0xffff,
+0x4500,
+0x4804,
+0x0954,
+0xc812,
+0x4806,
+0x0180,
+0x4904,
+0x0955,
+0x8c01,
+0x4500,
+0x8c06,
+0x0080,
+0x4400,
+0x80fc,
+0x4b06,
+0x0834,
+0xaa26,
+0x0005,
+0x8332,
+0x4806,
+0x0000,
+0x4500,
+0x4806,
+0x0197,
+0xe000,
+0x4a04,
+0x80fe,
+0x4b06,
+0x0967,
+0x8323,
+0x4806,
+0x0118,
+0x4500,
+0x4a04,
+0x80fe,
+0x4906,
+0x0008,
+0x4b06,
+0x8001,
+0xaa12,
+0x8323,
+0x4806,
+0x0101,
+0x4500,
+0x4b86,
+0x080f,
+0x4a0f,
+0xd80d,
+0x4806,
+0x0100,
+0x4500,
+0x4b86,
+0x0807,
+0x4a0f,
+0xd806,
+0x4806,
+0x01fa,
+0x4500,
+0x4400,
+0x80ff,
+0xc025,
+0x4804,
+0x80fe,
+0xa806,
+0x0005,
+0x4b06,
+0x0834,
+0x8303,
+0x4904,
+0x0864,
+0x4501,
+0x4b06,
+0x0831,
+0x8303,
+0x4904,
+0x085d,
+0x4501,
+0x4806,
+0x8000,
+0x4400,
+0x80fa,
+0x4a06,
+0x0000,
+0x4402,
+0x0891,
+0x4a04,
+0x80fe,
+0x4b06,
+0x0967,
+0x8323,
+0x4806,
+0x0118,
+0x8c06,
+0x8000,
+0x4500,
+0x4806,
+0x009a,
+0xe000,
+0x4906,
+0x5100,
+0x4806,
+0x0100,
+0x8c10,
+0x4400,
+0x081f,
+0x4a04,
+0x0866,
+0x4402,
+0x081d,
+0x4402,
+0x80d1,
+0x4904,
+0x0865,
+0x4401,
+0x081c,
+0x4401,
+0x80d0,
+0x4804,
+0x0863,
+0x4b06,
+0x8043,
+0x8334,
+0x0867,
+0x4907,
+0x8601,
+0xd803,
+0x4402,
+0x0862,
+0xc006,
+0x8016,
+0x0000,
+0x4a06,
+0x0000,
+0x4402,
+0x0862,
+0x8204,
+0x0864,
+0x4402,
+0x0864,
+0x4a04,
+0x0864,
+0xa806,
+0x0010,
+0x4400,
+0x081b,
+0x4400,
+0x0818,
+0x4400,
+0x80d2,
+0x4806,
+0x0001,
+0x4400,
+0x80d3,
+0x4a06,
+0x0000,
+0x4904,
+0x085c,
+0x4402,
+0x0825,
+0x4401,
+0x0824,
+0x4904,
+0x0891,
+0xc807,
+0x4906,
+0x0000,
+0x4401,
+0x0891,
+0x4904,
+0x085c,
+0xc005,
+0x4904,
+0x0892,
+0xcc02,
+0x4904,
+0x085d,
+0x4402,
+0x0821,
+0x4401,
+0x0820,
+0x4906,
+0x0000,
+0x4401,
+0x0892,
+0x4904,
+0x085f,
+0x4402,
+0x0823,
+0x4401,
+0x0822,
+0x4402,
+0x0826,
+0x4906,
+0x8000,
+0x4401,
+0x0827,
+0x4b86,
+0x0818,
+0xbe0f,
+0x4804,
+0x0862,
+0x4b06,
+0x8043,
+0x8334,
+0x0867,
+0x4500,
+0x4b86,
+0x0820,
+0x4804,
+0x80d4,
+0x4400,
+0x0865,
+0x4804,
+0x80d5,
+0x4400,
+0x0866,
+0xb80f,
+0x4806,
+0x0034,
+0x4b06,
+0x8042,
+0x4904,
+0x0867,
+0x8313,
+0x4500,
+0x4a04,
+0x80fe,
+0x4b06,
+0x0967,
+0x8323,
+0x4906,
+0x0118,
+0x8d16,
+0x4000,
+0x4501,
+0x8336,
+0x0008,
+0x4500,
+0x8336,
+0x0008,
+0x4804,
+0x085d,
+0x4500,
+0x4b06,
+0x8043,
+0x8334,
+0x0867,
+0x4907,
+0x4804,
+0x80fe,
+0x4b06,
+0x0967,
+0x8303,
+0x8336,
+0x0018,
+0x4501,
+0x4904,
+0x0867,
+0x4b06,
+0x8040,
+0x8313,
+0x4804,
+0x0865,
+0x6500,
+0x4804,
+0x0866,
+0x4500,
+0x4804,
+0x80fe,
+0xa806,
+0x0005,
+0x4b06,
+0x0834,
+0x8303,
+0x4904,
+0x0864,
+0x4501,
+0x4b06,
+0x0831,
+0x8303,
+0x4904,
+0x085d,
+0x4501,
+0x4806,
+0x0197,
+0xe000,
+0x4806,
+0x8000,
+0x4400,
+0x80fa,
+0x4a04,
+0x80fe,
+0x4b06,
+0x0967,
+0x8323,
+0x4806,
+0x0118,
+0x8c06,
+0xc000,
+0x4500,
+0x4806,
+0x009a,
+0xe000,
+0x4400,
+0x80ee,
+0xe400,
+0x4a04,
+0x80fe,
+0x4b06,
+0x8001,
+0xa926,
+0x0008,
+0x4401,
+0x0867,
+0x4b06,
+0x8040,
+0x8313,
+0x6807,
+0x4400,
+0x0865,
+0x6807,
+0x4400,
+0x0866,
+0x6807,
+0x6807,
+0x4400,
+0x0862,
+0x4807,
+0x4400,
+0x0860,
+0x4402,
+0x0861,
+0xaa26,
+0x0005,
+0x4402,
+0x0868,
+0x4b06,
+0x0830,
+0x8323,
+0x6807,
+0x4400,
+0x085c,
+0x6807,
+0x4400,
+0x085d,
+0x6807,
+0x4400,
+0x085e,
+0x6807,
+0x4400,
+0x085f,
+0x4807,
+0x4400,
+0x0864,
+0x4400,
+0x0863,
+0x4804,
+0x0864,
+0xcc07,
+0x4804,
+0x085e,
+0x4400,
+0x0863,
+0x4806,
+0x0118,
+0xe000,
+0x4b04,
+0x085d,
+0x4906,
+0xfff5,
+0x8336,
+0x0007,
+0x4807,
+0x9410,
+0x4906,
+0x000a,
+0x8410,
+0xc80c,
+0x4906,
+0x0001,
+0x8410,
+0xc80b,
+0x8410,
+0xc803,
+0x4806,
+0x02c4,
+0xe000,
+0x4806,
+0x047e,
+0xe000,
+0x4806,
+0x02dc,
+0xe000,
+0x4806,
+0x03bc,
+0xe000,
+0x8336,
+0x0008,
+0x4a04,
+0x085d,
+0x4502,
+0x8336,
+0x0008,
+0x4a04,
+0x0864,
+0x4502,
+0x4804,
+0x80fe,
+0x4906,
+0x0008,
+0x4b86,
+0x8001,
+0xa810,
+0x8388,
+0x4806,
+0x01fb,
+0x4580,
+0x4806,
+0x009a,
+0xe000,
+0x4a04,
+0x80fe,
+0x4b06,
+0x0967,
+0x8323,
+0x4806,
+0x02dc,
+0x4500,
+0x4a04,
+0x0864,
+0xcc03,
+0x4806,
+0x0370,
+0xe000,
+0x4a04,
+0x0864,
+0x8026,
+0xffff,
+0xc873,
+0x4b04,
+0x085d,
+0x83b6,
+0x0006,
+0x480f,
+0x8806,
+0x4000,
+0x4400,
+0x088f,
+0x480f,
+0x8806,
+0x8000,
+0x4400,
+0x0954,
+0x83b6,
+0x0007,
+0x480f,
+0x8806,
+0x01ff,
+0x4a04,
+0x80fe,
+0x4906,
+0x0008,
+0x4b86,
+0x8001,
+0xaa12,
+0x83a8,
+0x4580,
+0xab86,
+0x0008,
+0x83c6,
+0x0007,
+0x490f,
+0xd870,
+0x4a04,
+0x80fe,
+0x4b86,
+0x8001,
+0x4906,
+0x0008,
+0xaa12,
+0x83a8,
+0x4806,
+0x01fe,
+0x4580,
+0x4400,
+0x80ff,
+0xbc07,
+0x8336,
+0x0008,
+0x4806,
+0x0001,
+0x4a04,
+0x0956,
+0x9420,
+0x4a04,
+0x0955,
+0x8e02,
+0x4402,
+0x0955,
+0x4a04,
+0x085f,
+0x8523,
+0xd804,
+0x4b04,
+0x085c,
+0x4403,
+0x085d,
+0x8336,
+0xffff,
+0x4807,
+0x8336,
+0x0001,
+0x8806,
+0x0200,
+0xcc08,
+0x4904,
+0x088f,
+0xc805,
+0xb807,
+0x8916,
+0x0000,
+0x4401,
+0x088f,
+0xb807,
+0x8336,
+0x0008,
+0x4806,
+0x0001,
+0x4a04,
+0x0956,
+0x8126,
+0x0001,
+0x4401,
+0x0956,
+0x4904,
+0x0864,
+0x8116,
+0xfffe,
+0x4401,
+0x0864,
+0xc823,
+0x4a04,
+0x085f,
+0x8532,
+0xd805,
+0x4403,
+0x085d,
+0x4806,
+0x02a6,
+0xe000,
+0x4804,
+0x085c,
+0x4400,
+0x085d,
+0x4804,
+0x085d,
+0x4904,
+0x085f,
+0x8006,
+0x0008,
+0x4400,
+0x0892,
+0x8410,
+0xd804,
+0x4806,
+0x0001,
+0x4400,
+0x0891,
+0x4804,
+0x085e,
+0x4906,
+0xffff,
+0x9410,
+0x4400,
+0x0863,
+0xc03e,
+0x4804,
+0x085c,
+0x4400,
+0x085d,
+0x4804,
+0x085e,
+0x4400,
+0x0863,
+0xc035,
+0x83b6,
+0x0006,
+0x480f,
+0xd801,
+0xc010,
+0x4a04,
+0x80fe,
+0x4b86,
+0x8001,
+0x4906,
+0x0008,
+0xaa12,
+0x83a8,
+0x4806,
+0x01fe,
+0x4580,
+0x4400,
+0x80ff,
+0x8336,
+0x0010,
+0xc0b0,
+0x4804,
+0x0868,
+0x4b06,
+0x0834,
+0x8303,
+0x4904,
+0x0864,
+0x4501,
+0x4b06,
+0x0831,
+0x8303,
+0x4904,
+0x085d,
+0x4501,
+0x4a04,
+0x80fe,
+0x4b06,
+0x0967,
+0x8323,
+0x4806,
+0x02dc,
+0x8c06,
+0x8000,
+0x4500,
+0xc00a,
+0x4806,
+0x0010,
+0x4400,
+0x088e,
+0x4806,
+0x0267,
+0xe000,
+0x4806,
+0x0118,
+0xe000,
+0x4806,
+0x009a,
+0xe000,
+0x4a04,
+0x0864,
+0xcc03,
+0x4806,
+0x0440,
+0xe000,
+0x4b04,
+0x085d,
+0x83b6,
+0x0006,
+0x480f,
+0xc869,
+0x4a06,
+0x0000,
+0x4904,
+0x085c,
+0x4402,
+0x0825,
+0x4401,
+0x0824,
+0x4904,
+0x085d,
+0x4402,
+0x0821,
+0x4401,
+0x0820,
+0x4904,
+0x085f,
+0x4402,
+0x0823,
+0x4401,
+0x0822,
+0x4402,
+0x0826,
+0x4906,
+0x8000,
+0x4401,
+0x0827,
+0x4a04,
+0x80fe,
+0x4906,
+0x0008,
+0x4b06,
+0x8001,
+0xaa12,
+0x8323,
+0x4806,
+0x0101,
+0x4906,
+0x8000,
+0x4500,
+0x4b86,
+0x080f,
+0x4a0f,
+0xd859,
+0x4806,
+0x0100,
+0x4906,
+0x4000,
+0x4500,
+0x4b86,
+0x0807,
+0x4a0f,
+0xd850,
+0x4906,
+0x0101,
+0x4401,
+0x80fd,
+0x4400,
+0x80ff,
+0x4806,
+0x01fc,
+0x4500,
+0x4b04,
+0x085d,
+0xbc07,
+0x83b6,
+0x0006,
+0x680f,
+0x490f,
+0x8a16,
+0x01ff,
+0x8916,
+0x0400,
+0xc803,
+0x8006,
+0x0001,
+0xc002,
+0x4806,
+0x0001,
+0x4b86,
+0x8042,
+0x83c4,
+0x0867,
+0x4906,
+0x003e,
+0x8121,
+0x4581,
+0x4904,
+0x0864,
+0x8501,
+0x4401,
+0x0864,
+0xa806,
+0x0008,
+0x8230,
+0x4402,
+0x085d,
+0x4b06,
+0x0820,
+0x4b86,
+0x0808,
+0xb907,
+0x490f,
+0x490f,
+0x490f,
+0xc00a,
+0x4804,
+0x085d,
+0x8006,
+0x0008,
+0x4904,
+0x0864,
+0x8116,
+0xffff,
+0xc806,
+0xc034,
+0x4904,
+0x085f,
+0x8521,
+0xd826,
+0xc014,
+0x4401,
+0x0864,
+0x4904,
+0x085e,
+0x4a06,
+0xffff,
+0x9621,
+0x4402,
+0x0863,
+0x4806,
+0x0118,
+0xe000,
+0x4806,
+0x8000,
+0x4400,
+0x80fa,
+0x4806,
+0x80ff,
+0x4400,
+0x80f9,
+0x4804,
+0x0868,
+0x4b06,
+0x0834,
+0x8303,
+0x4904,
+0x0864,
+0x4501,
+0x4b06,
+0x0831,
+0x8303,
+0x4904,
+0x085d,
+0x4501,
+0x4806,
+0x009a,
+0xe000,
+0x4804,
+0x085c,
+0x4400,
+0x085d,
+0x4a04,
+0x085e,
+0x4904,
+0x0864,
+0xc8d2,
+0xc0e5,
+0x4b06,
+0x0831,
+0x8334,
+0x0868,
+0x4500,
+0x4400,
+0x085d,
+0x8336,
+0x0003,
+0x4501,
+0x4401,
+0x0864,
+0x4806,
+0x02a6,
+0xe000,
+0x4a04,
+0x80fe,
+0x4b04,
+0x085d,
+0x8336,
+0x0006,
+0x4807,
+0x8806,
+0x000f,
+0xc80b,
+0x4906,
+0x0001,
+0x8410,
+0xc81f,
+0x8410,
+0xc82b,
+0x8410,
+0xc839,
+0x8410,
+0xc83f,
+0xc079,
+0x8336,
+0x0001,
+0x4a04,
+0x80fe,
+0x4807,
+0x8806,
+0x01ff,
+0x4400,
+0x80fd,
+0x4b86,
+0x0893,
+0x83c6,
+0x0001,
+0x83c0,
+0x490f,
+0xb807,
+0x4b86,
+0x8042,
+0x4806,
+0x0008,
+0xaa02,
+0x83a8,
+0x4581,
+0xc06f,
+0x4a04,
+0x80fe,
+0x4906,
+0x0008,
+0x4b86,
+0x80f0,
+0x83a8,
+0x8336,
+0x0001,
+0x4807,
+0x8806,
+0x01ff,
+0x4580,
+0xc061,
+0x4a04,
+0x80fe,
+0x4906,
+0x0008,
+0x4b86,
+0x8042,
+0xa912,
+0x83c1,
+0x8313,
+0x4807,
+0x8806,
+0x01ff,
+0x8226,
+0x0047,
+0x4582,
+0xc051,
+0x8336,
+0xfffa,
+0x4807,
+0x4400,
+0x80fb,
+0x4400,
+0x0957,
+0xc049,
+0x4a04,
+0x80fe,
+0x4906,
+0x0008,
+0x4b86,
+0x8001,
+0xaa12,
+0x83a8,
+0x8336,
+0x0001,
+0x4807,
+0x8806,
+0x01ff,
+0x4580,
+0xab06,
+0x0008,
+0x8336,
+0x0007,
+0x4907,
+0x8916,
+0x8000,
+0xcc09,
+0x8336,
+0xfffc,
+0x4907,
+0x8a16,
+0x8000,
+0xc808,
+0x8a16,
+0x4000,
+0xcc05,
+0x4804,
+0x085d,
+0x4904,
+0x0864,
+0xc030,
+0x4806,
+0x01fe,
+0x4580,
+0x4400,
+0x80ff,
+0x4b04,
+0x085d,
+0x8336,
+0x0008,
+0xc074,
+0x8336,
+0x0001,
+0x4807,
+0x8806,
+0x01ff,
+0x8336,
+0xfff9,
+0x4400,
+0x80fd,
+0xb807,
+0x8336,
+0x0008,
+0xc067,
+0x8410,
+0xc8f1,
+0x8410,
+0xc818,
+0x8410,
+0xc822,
+0x8410,
+0xc83e,
+0x8410,
+0xc853,
+0x8410,
+0x4a06,
+0x05b7,
+0xe002,
+0x4804,
+0x085d,
+0x8006,
+0x0008,
+0x4904,
+0x0864,
+0x8116,
+0xffff,
+0x8604,
+0x085f,
+0xd863,
+0x4a06,
+0x05ac,
+0xe002,
+0x4906,
+0xfffc,
+0x8336,
+0x0001,
+0x6807,
+0x8806,
+0x01ff,
+0x4400,
+0x80ee,
+0x4806,
+0x0573,
+0xe000,
+0x4a06,
+0x0000,
+0x4402,
+0x0891,
+0x4a04,
+0x80fe,
+0x4906,
+0x0008,
+0x4b86,
+0x8040,
+0xaa12,
+0x83a8,
+0x4806,
+0x0006,
+0x8703,
+0x6807,
+0x6580,
+0x6807,
+0x6580,
+0x83c6,
+0x0001,
+0x4807,
+0x4580,
+0x4a06,
+0x0000,
+0x4402,
+0x0864,
+0x4806,
+0x00dc,
+0xe000,
+0x6907,
+0x4907,
+0x4806,
+0x01ff,
+0x8910,
+0x4806,
+0x0000,
+0x4b86,
+0x087e,
+0x6580,
+0x6581,
+0x6580,
+0x6580,
+0x6580,
+0x6580,
+0x6580,
+0x6580,
+0x4b86,
+0x087e,
+0xbc0f,
+0x8336,
+0x0001,
+0xc00a,
+0x8336,
+0xfffe,
+0x4807,
+0x8806,
+0x01ff,
+0x4400,
+0x80fa,
+0x8336,
+0x0004,
+0xc000,
+0x4804,
+0x0864,
+0x8006,
+0xffff,
+0xc815,
+0x4400,
+0x0864,
+0x4904,
+0x085f,
+0x4403,
+0x085d,
+0x8431,
+0xd803,
+0x4806,
+0x02a6,
+0xe000,
+0x4804,
+0x085c,
+0x4400,
+0x085d,
+0xc0f8,
+0x4804,
+0x085c,
+0x4400,
+0x085d,
+0xc01f,
+0x4804,
+0x085e,
+0x4400,
+0x0863,
+0x4904,
+0x085f,
+0x4403,
+0x085d,
+0x8431,
+0xd803,
+0x4806,
+0x0118,
+0xe000,
+0x4804,
+0x085c,
+0x4400,
+0x085d,
+0x4806,
+0x0118,
+0xe000,
+0x4804,
+0x085c,
+0x4400,
+0x085d,
+0x4804,
+0x085e,
+0x4400,
+0x0863,
+0x4806,
+0x009a,
+0xe000,
+0x4b06,
+0x0831,
+0x8334,
+0x0868,
+0x4500,
+0x8336,
+0x0003,
+0x4501,
+0x4806,
+0x009a,
+0xe000,
+0x4804,
+0x80fe,
+0x4906,
+0x0008,
+0x4b86,
+0x8001,
+0xa810,
+0x8388,
+0x4806,
+0x01fd,
+0x4580,
+0x4806,
+0x009a,
+0xe000,
+0x4a04,
+0x0867,
+0x4b06,
+0x8040,
+0x8332,
+0x6807,
+0x4906,
+0xffff,
+0x9790,
+0x4a07,
+0x8a26,
+0x0001,
+0xc802,
+0x8fc6,
+0x8000,
+0x4a0f,
+0x8806,
+0x0001,
+0xc803,
+0x4906,
+0xfff8,
+0x9612,
+0x4804,
+0x80fe,
+0x4906,
+0x0008,
+0x4b86,
+0x8001,
+0xa810,
+0x8388,
+0x4582,
+0x4a06,
+0x009a,
+0xe002,
+0x4806,
+0x009a,
+0xe000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x1c00,
+0x0001,
+0x0010,
+0x0002,
+0x0000,
+0x3100,
+0x5100,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x1000,
+0x1000,
+0x0040,
+0x11ff,
+0x0000,
+0x1200,
+0x1200,
+0x0040,
+0x13ff,
+0x0000,
+0x1400,
+0x1400,
+0x0040,
+0x15ff,
+0x0000,
+0x1600,
+0x1600,
+0x0040,
+0x17ff,
+0x0000,
+0x1800,
+0x1800,
+0x0040,
+0x19ff,
+0x0000,
+0x1a00,
+0x1a00,
+0x0040,
+0x1bff,
+0x0000,
+0x1c00,
+0x1c00,
+0x0040,
+0x1dff,
+0x0000,
+0x1e00,
+0x1e00,
+0x0040,
+0x1fff,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0400,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0d00,
+0x0001,
+0x0000,
+0x0002,
+0x0003,
+0x0004,
+0x0005,
+0x0006,
+0x0007,
+0x0008,
+0x0009,
+0x000a,
+0x000b,
+0x000c,
+0x000d,
+0x000e,
+0x000f,
+0x0010,
+0x0011,
+0x0014,
+0x0013,
+0x0015,
+0x0016,
+0x0017,
+0x0018,
+0x0019,
+0x001a,
+0x001b,
+0x001c,
+0x001d,
+0x001f,
+0x0020,
+0x0021,
+0x002a,
+0x002b,
+0x002c,
+0x002a,
+0x002b,
+0x002c,
+0x0022,
+0x0022,
+0x0022,
+0x0022,
+0x0022,
+0x0022,
+0x0022,
+0x0022,
+0x0022,
+0x0022,
+0x0022,
+0x0022,
+0x0022,
+0x0022,
+0x0022,
+0x0022,
+0x0023,
+0x0023,
+0x0023,
+0x0023,
+0x0023,
+0x0023,
+0x0023,
+0x0023,
+0x0023,
+0x0023,
+0x0023,
+0x0023,
+0x0023,
+0x0023,
+0x0023,
+0x0023,
+0x003a,
+0x003a,
+0x003a,
+0x003a,
+0x003a,
+0x003a,
+0x003a,
+0x003a,
+0x003a,
+0x003a,
+0x003a,
+0x003a,
+0x003a,
+0x003a,
+0x003a,
+0x003a,
+0x003b,
+0x003b,
+0x003b,
+0x003b,
+0x003b,
+0x003b,
+0x003b,
+0x003b,
+0x003b,
+0x003b,
+0x003b,
+0x003b,
+0x003b,
+0x003b,
+0x003b,
+0x003b,
+0x0024,
+0x0025,
+0x0022,
+0x0023,
+0x0024,
+0x0022,
+0x0026,
+0x0026,
+0x0026,
+0x0026,
+0x0026,
+0x0026,
+0x0026,
+0x0026,
+0x0026,
+0x0026,
+0x0026,
+0x0026,
+0x0026,
+0x0026,
+0x0026,
+0x0026,
+0x0027,
+0x0027,
+0x0027,
+0x0027,
+0x0027,
+0x0027,
+0x0027,
+0x0027,
+0x0027,
+0x0027,
+0x0027,
+0x0027,
+0x0027,
+0x0027,
+0x0027,
+0x0027,
+0x003c,
+0x003c,
+0x003c,
+0x003c,
+0x003c,
+0x003c,
+0x003c,
+0x003c,
+0x003c,
+0x003c,
+0x003c,
+0x003c,
+0x003c,
+0x003c,
+0x003c,
+0x003c,
+0x003d,
+0x003d,
+0x003d,
+0x003d,
+0x003d,
+0x003d,
+0x003d,
+0x003d,
+0x003d,
+0x003d,
+0x003d,
+0x003d,
+0x003d,
+0x003d,
+0x003d,
+0x003d,
+0x0028,
+0x0029,
+0x0026,
+0x0027,
+0x0028,
+0x0026,
+0x002d,
+0x0030,
+0x0031,
+0x002e,
+0x002f,
+0x0032,
+0x0033,
+0x0035,
+0x0012,
+0x001e,
+0x0037,
+0x0036,
+0x0039,
+0x0038,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x4b06,
+0x8040,
+0x6807,
+0x4907,
+0x4a06,
+0x5100,
+0x4402,
+0x081f,
+0x4a06,
+0x3100,
+0x4402,
+0x081e,
+0x4904,
+0x8041,
+0x4804,
+0x8040,
+0x8006,
+0x0c00,
+0xd001,
+0xc002,
+0x8116,
+0x0001,
+0x4400,
+0x081c,
+0x4401,
+0x081d,
+0x4906,
+0x096f,
+0x4806,
+0x0818,
+0x8501,
+0x4a06,
+0x0001,
+0x8121,
+0x9421,
+0x4400,
+0x081b,
+0x4400,
+0x0818,
+0x4806,
+0x0001,
+0x4400,
+0x081a,
+0x4806,
+0x1c00,
+0x4400,
+0x0819,
+0x4906,
+0x0000,
+0x4401,
+0x0825,
+0x4401,
+0x0824,
+0x4806,
+0x0818,
+0x4401,
+0x0821,
+0x4400,
+0x0820,
+0x4806,
+0x096f,
+0x8006,
+0x0001,
+0x4401,
+0x0823,
+0x4400,
+0x0822,
+0x4401,
+0x0826,
+0x4806,
+0x8000,
+0x4400,
+0x0827,
+0x4806,
+0x0034,
+0x4400,
+0x8042,
+0x4806,
+0x0000,
+0x4400,
+0x80f8,
+0x4806,
+0x0001,
+0x4400,
+0x80f9,
+0x4b06,
+0x0818,
+0x4b86,
+0x0820,
+0xbc07,
+0xb80f,
+0x0400,
+0x4806,
+0x0001,
+0x4400,
+0x80ff,
+0x4806,
+0xffff,
+0x4400,
+0x80f8,
+0x4806,
+0xffff,
+0x4400,
+0x80f9,
+0x4806,
+0x0000,
+0x4400,
+0x0858,
+0x4400,
+0x085d,
+0x4400,
+0x085e,
+0x4400,
+0x085f,
+0x4400,
+0x085c,
+0x4400,
+0x0957,
+0x4400,
+0x0959,
+0x4400,
+0x095a,
+0x4400,
+0x095b,
+0x4400,
+0x095c,
+0x4400,
+0x095d,
+0x4400,
+0x095e,
+0x4400,
+0x095f,
+0x4400,
+0x0960,
+0x4400,
+0x0966,
+0x4400,
+0x0965,
+0x4806,
+0x00d1,
+0x4400,
+0x80e1,
+0x4806,
+0x026a,
+0x4400,
+0x80e2,
+0x4806,
+0x05e7,
+0x4400,
+0x80e3,
+0x4806,
+0x01ad,
+0x4400,
+0x80fc,
+0x4400,
+0x80fe,
+0x0400,
+0x4806,
+0x0000,
+0x4400,
+0x0954,
+0x4400,
+0x0955,
+0x4400,
+0x0956,
+0x4804,
+0x80fe,
+0xaa06,
+0x0008,
+0x4906,
+0x0001,
+0x9401,
+0x4400,
+0x80ff,
+0x4b86,
+0x0959,
+0x83c4,
+0x80fe,
+0x480f,
+0xcc0e,
+0x4b06,
+0x8001,
+0x4806,
+0x0008,
+0xa804,
+0x80fe,
+0x8330,
+0x4807,
+0x8906,
+0x01f0,
+0x8516,
+0x01f0,
+0xc801,
+0x4581,
+0x4906,
+0x01ff,
+0x4401,
+0x80fd,
+0xb90f,
+0x4906,
+0x8042,
+0x8321,
+0x4a07,
+0x8626,
+0x007f,
+0xcccc,
+0x4804,
+0x80e0,
+0xe000,
+0x4806,
+0xffff,
+0x4400,
+0x80f8,
+0x4b06,
+0x0959,
+0x8334,
+0x80fe,
+0x4a06,
+0x0000,
+0x4502,
+0x4a04,
+0x80fe,
+0x4402,
+0x0861,
+0xa926,
+0x0005,
+0x4401,
+0x0868,
+0x4b06,
+0x0832,
+0x8313,
+0x4807,
+0x4400,
+0x0863,
+0xa926,
+0x0008,
+0x4401,
+0x0867,
+0x4b06,
+0x8040,
+0x8313,
+0x6807,
+0x4400,
+0x0865,
+0x4807,
+0x4400,
+0x0866,
+0x8336,
+0x0003,
+0x4807,
+0x8006,
+0xfff9,
+0xcc03,
+0x4a06,
+0x05c5,
+0xe002,
+0x4806,
+0x0000,
+0x4400,
+0x0864,
+0x4b06,
+0x0830,
+0xa926,
+0x0005,
+0x8313,
+0x6807,
+0x4400,
+0x085d,
+0x4400,
+0x085c,
+0x4500,
+0x4b06,
+0x0833,
+0x8313,
+0x4807,
+0x4400,
+0x085f,
+0x4806,
+0x0151,
+0xe000,
+0x4804,
+0x0867,
+0x4b06,
+0x8043,
+0x8330,
+0x4907,
+0xcc32,
+0x4a04,
+0x80fe,
+0x4b06,
+0x0967,
+0x8323,
+0x4806,
+0x011f,
+0x4500,
+0x4b86,
+0x8042,
+0x83c4,
+0x0867,
+0x480f,
+0x8336,
+0x0008,
+0x4500,
+0x4806,
+0x007f,
+0x4580,
+0x4b06,
+0x8001,
+0x8334,
+0x0867,
+0x4806,
+0xffff,
+0x4500,
+0x4804,
+0x0954,
+0xc812,
+0x4806,
+0x0180,
+0x4904,
+0x0955,
+0x8c01,
+0x4500,
+0x8c06,
+0x0080,
+0x4400,
+0x80fc,
+0x4b06,
+0x0834,
+0xaa26,
+0x0005,
+0x8332,
+0x4806,
+0x0000,
+0x4500,
+0x4806,
+0x0197,
+0xe000,
+0x4a04,
+0x80fe,
+0x4b06,
+0x0967,
+0x8323,
+0x4806,
+0x0118,
+0x4500,
+0x4a04,
+0x80fe,
+0x4906,
+0x0008,
+0x4b06,
+0x8001,
+0xaa12,
+0x8323,
+0x4806,
+0x0101,
+0x4500,
+0x4b86,
+0x080f,
+0x4a0f,
+0xd80d,
+0x4806,
+0x0100,
+0x4500,
+0x4b86,
+0x0807,
+0x4a0f,
+0xd806,
+0x4806,
+0x01fa,
+0x4500,
+0x4400,
+0x80ff,
+0xc025,
+0x4804,
+0x80fe,
+0xa806,
+0x0005,
+0x4b06,
+0x0834,
+0x8303,
+0x4904,
+0x0864,
+0x4501,
+0x4b06,
+0x0831,
+0x8303,
+0x4904,
+0x085d,
+0x4501,
+0x4806,
+0x8000,
+0x4400,
+0x80fa,
+0x4a06,
+0x0000,
+0x4402,
+0x0891,
+0x4a04,
+0x80fe,
+0x4b06,
+0x0967,
+0x8323,
+0x4806,
+0x0118,
+0x8c06,
+0x8000,
+0x4500,
+0x4806,
+0x009a,
+0xe000,
+0x4906,
+0x5100,
+0x4806,
+0x0100,
+0x8c10,
+0x4400,
+0x081f,
+0x4a04,
+0x0866,
+0x4402,
+0x081d,
+0x4402,
+0x80d1,
+0x4904,
+0x0865,
+0x4401,
+0x081c,
+0x4401,
+0x80d0,
+0x4804,
+0x0863,
+0x4b06,
+0x8043,
+0x8334,
+0x0867,
+0x4907,
+0x8601,
+0xd803,
+0x4402,
+0x0862,
+0xc006,
+0x8016,
+0x0000,
+0x4a06,
+0x0000,
+0x4402,
+0x0862,
+0x8204,
+0x0864,
+0x4402,
+0x0864,
+0x4a04,
+0x0864,
+0xa806,
+0x0010,
+0x4400,
+0x081b,
+0x4400,
+0x0818,
+0x4400,
+0x80d2,
+0x4806,
+0x0001,
+0x4400,
+0x80d3,
+0x4a06,
+0x0000,
+0x4904,
+0x085c,
+0x4402,
+0x0825,
+0x4401,
+0x0824,
+0x4904,
+0x0891,
+0xc807,
+0x4906,
+0x0000,
+0x4401,
+0x0891,
+0x4904,
+0x085c,
+0xc005,
+0x4904,
+0x0892,
+0xcc02,
+0x4904,
+0x085d,
+0x4402,
+0x0821,
+0x4401,
+0x0820,
+0x4906,
+0x0000,
+0x4401,
+0x0892,
+0x4904,
+0x085f,
+0x4402,
+0x0823,
+0x4401,
+0x0822,
+0x4402,
+0x0826,
+0x4906,
+0x8000,
+0x4401,
+0x0827,
+0x4b86,
+0x0818,
+0xbe0f,
+0x4804,
+0x0862,
+0x4b06,
+0x8043,
+0x8334,
+0x0867,
+0x4500,
+0x4b86,
+0x0820,
+0x4804,
+0x80d4,
+0x4400,
+0x0865,
+0x4804,
+0x80d5,
+0x4400,
+0x0866,
+0xb80f,
+0x4806,
+0x0034,
+0x4b06,
+0x8042,
+0x4904,
+0x0867,
+0x8313,
+0x4500,
+0x4a04,
+0x80fe,
+0x4b06,
+0x0967,
+0x8323,
+0x4906,
+0x0118,
+0x8d16,
+0x4000,
+0x4501,
+0x8336,
+0x0008,
+0x4500,
+0x8336,
+0x0008,
+0x4804,
+0x085d,
+0x4500,
+0x4b06,
+0x8043,
+0x8334,
+0x0867,
+0x4907,
+0x4804,
+0x80fe,
+0x4b06,
+0x0967,
+0x8303,
+0x8336,
+0x0018,
+0x4501,
+0x4904,
+0x0867,
+0x4b06,
+0x8040,
+0x8313,
+0x4804,
+0x0865,
+0x6500,
+0x4804,
+0x0866,
+0x4500,
+0x4804,
+0x80fe,
+0xa806,
+0x0005,
+0x4b06,
+0x0834,
+0x8303,
+0x4904,
+0x0864,
+0x4501,
+0x4b06,
+0x0831,
+0x8303,
+0x4904,
+0x085d,
+0x4501,
+0x4806,
+0x0197,
+0xe000,
+0x4806,
+0x8000,
+0x4400,
+0x80fa,
+0x4a04,
+0x80fe,
+0x4b06,
+0x0967,
+0x8323,
+0x4806,
+0x0118,
+0x8c06,
+0xc000,
+0x4500,
+0x4806,
+0x009a,
+0xe000,
+0x4400,
+0x80ee,
+0xe400,
+0x4a04,
+0x80fe,
+0x4b06,
+0x8001,
+0xa926,
+0x0008,
+0x4401,
+0x0867,
+0x4b06,
+0x8040,
+0x8313,
+0x6807,
+0x4400,
+0x0865,
+0x6807,
+0x4400,
+0x0866,
+0x6807,
+0x6807,
+0x4400,
+0x0862,
+0x4807,
+0x4400,
+0x0860,
+0x4402,
+0x0861,
+0xaa26,
+0x0005,
+0x4402,
+0x0868,
+0x4b06,
+0x0830,
+0x8323,
+0x6807,
+0x4400,
+0x085c,
+0x6807,
+0x4400,
+0x085d,
+0x6807,
+0x4400,
+0x085e,
+0x6807,
+0x4400,
+0x085f,
+0x4807,
+0x4400,
+0x0864,
+0x4400,
+0x0863,
+0x4804,
+0x0864,
+0xcc07,
+0x4804,
+0x085e,
+0x4400,
+0x0863,
+0x4806,
+0x0118,
+0xe000,
+0x4b04,
+0x085d,
+0x4906,
+0xfff5,
+0x8336,
+0x0007,
+0x4807,
+0x9410,
+0x4906,
+0x000a,
+0x8410,
+0xc80c,
+0x4906,
+0x0001,
+0x8410,
+0xc80b,
+0x8410,
+0xc803,
+0x4806,
+0x02c4,
+0xe000,
+0x4806,
+0x047e,
+0xe000,
+0x4806,
+0x02dc,
+0xe000,
+0x4806,
+0x03bc,
+0xe000,
+0x8336,
+0x0008,
+0x4a04,
+0x085d,
+0x4502,
+0x8336,
+0x0008,
+0x4a04,
+0x0864,
+0x4502,
+0x4804,
+0x80fe,
+0x4906,
+0x0008,
+0x4b86,
+0x8001,
+0xa810,
+0x8388,
+0x4806,
+0x01fb,
+0x4580,
+0x4806,
+0x009a,
+0xe000,
+0x4a04,
+0x80fe,
+0x4b06,
+0x0967,
+0x8323,
+0x4806,
+0x02dc,
+0x4500,
+0x4a04,
+0x0864,
+0xcc03,
+0x4806,
+0x0370,
+0xe000,
+0x4a04,
+0x0864,
+0x8026,
+0xffff,
+0xc873,
+0x4b04,
+0x085d,
+0x83b6,
+0x0006,
+0x480f,
+0x8806,
+0x4000,
+0x4400,
+0x088f,
+0x480f,
+0x8806,
+0x8000,
+0x4400,
+0x0954,
+0x83b6,
+0x0007,
+0x480f,
+0x8806,
+0x01ff,
+0x4a04,
+0x80fe,
+0x4906,
+0x0008,
+0x4b86,
+0x8001,
+0xaa12,
+0x83a8,
+0x4580,
+0xab86,
+0x0008,
+0x83c6,
+0x0007,
+0x490f,
+0xd870,
+0x4a04,
+0x80fe,
+0x4b86,
+0x8001,
+0x4906,
+0x0008,
+0xaa12,
+0x83a8,
+0x4806,
+0x01fe,
+0x4580,
+0x4400,
+0x80ff,
+0xbc07,
+0x8336,
+0x0008,
+0x4806,
+0x0001,
+0x4a04,
+0x0956,
+0x9420,
+0x4a04,
+0x0955,
+0x8e02,
+0x4402,
+0x0955,
+0x4a04,
+0x085f,
+0x8523,
+0xd804,
+0x4b04,
+0x085c,
+0x4403,
+0x085d,
+0x8336,
+0xffff,
+0x4807,
+0x8336,
+0x0001,
+0x8806,
+0x0200,
+0xcc08,
+0x4904,
+0x088f,
+0xc805,
+0xb807,
+0x8916,
+0x0000,
+0x4401,
+0x088f,
+0xb807,
+0x8336,
+0x0008,
+0x4806,
+0x0001,
+0x4a04,
+0x0956,
+0x8126,
+0x0001,
+0x4401,
+0x0956,
+0x4904,
+0x0864,
+0x8116,
+0xfffe,
+0x4401,
+0x0864,
+0xc823,
+0x4a04,
+0x085f,
+0x8532,
+0xd805,
+0x4403,
+0x085d,
+0x4806,
+0x02a6,
+0xe000,
+0x4804,
+0x085c,
+0x4400,
+0x085d,
+0x4804,
+0x085d,
+0x4904,
+0x085f,
+0x8006,
+0x0008,
+0x4400,
+0x0892,
+0x8410,
+0xd804,
+0x4806,
+0x0001,
+0x4400,
+0x0891,
+0x4804,
+0x085e,
+0x4906,
+0xffff,
+0x9410,
+0x4400,
+0x0863,
+0xc03e,
+0x4804,
+0x085c,
+0x4400,
+0x085d,
+0x4804,
+0x085e,
+0x4400,
+0x0863,
+0xc035,
+0x83b6,
+0x0006,
+0x480f,
+0xd801,
+0xc010,
+0x4a04,
+0x80fe,
+0x4b86,
+0x8001,
+0x4906,
+0x0008,
+0xaa12,
+0x83a8,
+0x4806,
+0x01fe,
+0x4580,
+0x4400,
+0x80ff,
+0x8336,
+0x0010,
+0xc0b0,
+0x4804,
+0x0868,
+0x4b06,
+0x0834,
+0x8303,
+0x4904,
+0x0864,
+0x4501,
+0x4b06,
+0x0831,
+0x8303,
+0x4904,
+0x085d,
+0x4501,
+0x4a04,
+0x80fe,
+0x4b06,
+0x0967,
+0x8323,
+0x4806,
+0x02dc,
+0x8c06,
+0x8000,
+0x4500,
+0xc00a,
+0x4806,
+0x0010,
+0x4400,
+0x088e,
+0x4806,
+0x0267,
+0xe000,
+0x4806,
+0x0118,
+0xe000,
+0x4806,
+0x009a,
+0xe000,
+0x4a04,
+0x0864,
+0xcc03,
+0x4806,
+0x0440,
+0xe000,
+0x4b04,
+0x085d,
+0x83b6,
+0x0006,
+0x480f,
+0xc869,
+0x4a06,
+0x0000,
+0x4904,
+0x085c,
+0x4402,
+0x0825,
+0x4401,
+0x0824,
+0x4904,
+0x085d,
+0x4402,
+0x0821,
+0x4401,
+0x0820,
+0x4904,
+0x085f,
+0x4402,
+0x0823,
+0x4401,
+0x0822,
+0x4402,
+0x0826,
+0x4906,
+0x8000,
+0x4401,
+0x0827,
+0x4a04,
+0x80fe,
+0x4906,
+0x0008,
+0x4b06,
+0x8001,
+0xaa12,
+0x8323,
+0x4806,
+0x0101,
+0x4906,
+0x8000,
+0x4500,
+0x4b86,
+0x080f,
+0x4a0f,
+0xd859,
+0x4806,
+0x0100,
+0x4906,
+0x4000,
+0x4500,
+0x4b86,
+0x0807,
+0x4a0f,
+0xd850,
+0x4906,
+0x0101,
+0x4401,
+0x80fd,
+0x4400,
+0x80ff,
+0x4806,
+0x01fc,
+0x4500,
+0x4b04,
+0x085d,
+0xbc07,
+0x83b6,
+0x0006,
+0x680f,
+0x490f,
+0x8a16,
+0x01ff,
+0x8916,
+0x0400,
+0xc803,
+0x8006,
+0x0001,
+0xc002,
+0x4806,
+0x0001,
+0x4b86,
+0x8042,
+0x83c4,
+0x0867,
+0x4906,
+0x003e,
+0x8121,
+0x4581,
+0x4904,
+0x0864,
+0x8501,
+0x4401,
+0x0864,
+0xa806,
+0x0008,
+0x8230,
+0x4402,
+0x085d,
+0x4b06,
+0x0820,
+0x4b86,
+0x0808,
+0xb907,
+0x490f,
+0x490f,
+0x490f,
+0xc00a,
+0x4804,
+0x085d,
+0x8006,
+0x0008,
+0x4904,
+0x0864,
+0x8116,
+0xffff,
+0xc806,
+0xc034,
+0x4904,
+0x085f,
+0x8521,
+0xd826,
+0xc014,
+0x4401,
+0x0864,
+0x4904,
+0x085e,
+0x4a06,
+0xffff,
+0x9621,
+0x4402,
+0x0863,
+0x4806,
+0x0118,
+0xe000,
+0x4806,
+0x8000,
+0x4400,
+0x80fa,
+0x4806,
+0x80ff,
+0x4400,
+0x80f9,
+0x4804,
+0x0868,
+0x4b06,
+0x0834,
+0x8303,
+0x4904,
+0x0864,
+0x4501,
+0x4b06,
+0x0831,
+0x8303,
+0x4904,
+0x085d,
+0x4501,
+0x4806,
+0x009a,
+0xe000,
+0x4804,
+0x085c,
+0x4400,
+0x085d,
+0x4a04,
+0x085e,
+0x4904,
+0x0864,
+0xc8d2,
+0xc0e5,
+0x4b06,
+0x0831,
+0x8334,
+0x0868,
+0x4500,
+0x4400,
+0x085d,
+0x8336,
+0x0003,
+0x4501,
+0x4401,
+0x0864,
+0x4806,
+0x02a6,
+0xe000,
+0x4a04,
+0x80fe,
+0x4b04,
+0x085d,
+0x8336,
+0x0006,
+0x4807,
+0x8806,
+0x000f,
+0xc80b,
+0x4906,
+0x0001,
+0x8410,
+0xc81f,
+0x8410,
+0xc82b,
+0x8410,
+0xc839,
+0x8410,
+0xc83f,
+0xc079,
+0x8336,
+0x0001,
+0x4a04,
+0x80fe,
+0x4807,
+0x8806,
+0x01ff,
+0x4400,
+0x80fd,
+0x4b86,
+0x0893,
+0x83c6,
+0x0001,
+0x83c0,
+0x490f,
+0xb807,
+0x4b86,
+0x8042,
+0x4806,
+0x0008,
+0xaa02,
+0x83a8,
+0x4581,
+0xc06f,
+0x4a04,
+0x80fe,
+0x4906,
+0x0008,
+0x4b86,
+0x80f0,
+0x83a8,
+0x8336,
+0x0001,
+0x4807,
+0x8806,
+0x01ff,
+0x4580,
+0xc061,
+0x4a04,
+0x80fe,
+0x4906,
+0x0008,
+0x4b86,
+0x8042,
+0xa912,
+0x83c1,
+0x8313,
+0x4807,
+0x8806,
+0x01ff,
+0x8226,
+0x0047,
+0x4582,
+0xc051,
+0x8336,
+0xfffa,
+0x4807,
+0x4400,
+0x80fb,
+0x4400,
+0x0957,
+0xc049,
+0x4a04,
+0x80fe,
+0x4906,
+0x0008,
+0x4b86,
+0x8001,
+0xaa12,
+0x83a8,
+0x8336,
+0x0001,
+0x4807,
+0x8806,
+0x01ff,
+0x4580,
+0xab06,
+0x0008,
+0x8336,
+0x0007,
+0x4907,
+0x8916,
+0x8000,
+0xcc09,
+0x8336,
+0xfffc,
+0x4907,
+0x8a16,
+0x8000,
+0xc808,
+0x8a16,
+0x4000,
+0xcc05,
+0x4804,
+0x085d,
+0x4904,
+0x0864,
+0xc030,
+0x4806,
+0x01fe,
+0x4580,
+0x4400,
+0x80ff,
+0x4b04,
+0x085d,
+0x8336,
+0x0008,
+0xc074,
+0x8336,
+0x0001,
+0x4807,
+0x8806,
+0x01ff,
+0x8336,
+0xfff9,
+0x4400,
+0x80fd,
+0xb807,
+0x8336,
+0x0008,
+0xc067,
+0x8410,
+0xc8f1,
+0x8410,
+0xc818,
+0x8410,
+0xc822,
+0x8410,
+0xc83e,
+0x8410,
+0xc853,
+0x8410,
+0x4a06,
+0x05b7,
+0xe002,
+0x4804,
+0x085d,
+0x8006,
+0x0008,
+0x4904,
+0x0864,
+0x8116,
+0xffff,
+0x8604,
+0x085f,
+0xd863,
+0x4a06,
+0x05ac,
+0xe002,
+0x4906,
+0xfffc,
+0x8336,
+0x0001,
+0x6807,
+0x8806,
+0x01ff,
+0x4400,
+0x80ee,
+0x4806,
+0x0573,
+0xe000,
+0x4a06,
+0x0000,
+0x4402,
+0x0891,
+0x4a04,
+0x80fe,
+0x4906,
+0x0008,
+0x4b86,
+0x8040,
+0xaa12,
+0x83a8,
+0x4806,
+0x0006,
+0x8703,
+0x6807,
+0x6580,
+0x6807,
+0x6580,
+0x83c6,
+0x0001,
+0x4807,
+0x4580,
+0x4a06,
+0x0000,
+0x4402,
+0x0864,
+0x4806,
+0x00dc,
+0xe000,
+0x6907,
+0x4907,
+0x4806,
+0x01ff,
+0x8910,
+0x4806,
+0x0000,
+0x4b86,
+0x087e,
+0x6580,
+0x6581,
+0x6580,
+0x6580,
+0x6580,
+0x6580,
+0x6580,
+0x6580,
+0x4b86,
+0x087e,
+0xbc0f,
+0x8336,
+0x0001,
+0xc00a,
+0x8336,
+0xfffe,
+0x4807,
+0x8806,
+0x01ff,
+0x4400,
+0x80fa,
+0x8336,
+0x0004,
+0xc000,
+0x4804,
+0x0864,
+0x8006,
+0xffff,
+0xc815,
+0x4400,
+0x0864,
+0x4904,
+0x085f,
+0x4403,
+0x085d,
+0x8431,
+0xd803,
+0x4806,
+0x02a6,
+0xe000,
+0x4804,
+0x085c,
+0x4400,
+0x085d,
+0xc0f8,
+0x4804,
+0x085c,
+0x4400,
+0x085d,
+0xc01f,
+0x4804,
+0x085e,
+0x4400,
+0x0863,
+0x4904,
+0x085f,
+0x4403,
+0x085d,
+0x8431,
+0xd803,
+0x4806,
+0x0118,
+0xe000,
+0x4804,
+0x085c,
+0x4400,
+0x085d,
+0x4806,
+0x0118,
+0xe000,
+0x4804,
+0x085c,
+0x4400,
+0x085d,
+0x4804,
+0x085e,
+0x4400,
+0x0863,
+0x4806,
+0x009a,
+0xe000,
+0x4b06,
+0x0831,
+0x8334,
+0x0868,
+0x4500,
+0x8336,
+0x0003,
+0x4501,
+0x4806,
+0x009a,
+0xe000,
+0x4804,
+0x80fe,
+0x4906,
+0x0008,
+0x4b86,
+0x8001,
+0xa810,
+0x8388,
+0x4806,
+0x01fd,
+0x4580,
+0x4806,
+0x009a,
+0xe000,
+0x4a04,
+0x0867,
+0x4b06,
+0x8040,
+0x8332,
+0x6807,
+0x4906,
+0xffff,
+0x9790,
+0x4a07,
+0x8a26,
+0x0001,
+0xc802,
+0x8fc6,
+0x8000,
+0x4a0f,
+0x8806,
+0x0001,
+0xc803,
+0x4906,
+0xfff8,
+0x9612,
+0x4804,
+0x80fe,
+0x4906,
+0x0008,
+0x4b86,
+0x8001,
+0xa810,
+0x8388,
+0x4582,
+0x4a06,
+0x009a,
+0xe002,
+0x4806,
+0x009a,
+0xe000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x1c00,
+0x0001,
+0x0010,
+0x0002,
+0x0000,
+0x3100,
+0x5100,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x1000,
+0x1000,
+0x0040,
+0x11ff,
+0x0000,
+0x1200,
+0x1200,
+0x0040,
+0x13ff,
+0x0000,
+0x1400,
+0x1400,
+0x0040,
+0x15ff,
+0x0000,
+0x1600,
+0x1600,
+0x0040,
+0x17ff,
+0x0000,
+0x1800,
+0x1800,
+0x0040,
+0x19ff,
+0x0000,
+0x1a00,
+0x1a00,
+0x0040,
+0x1bff,
+0x0000,
+0x1c00,
+0x1c00,
+0x0040,
+0x1dff,
+0x0000,
+0x1e00,
+0x1e00,
+0x0040,
+0x1fff,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0400,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0d00,
+0x0001,
+0x0000,
+0x0002,
+0x0003,
+0x0004,
+0x0005,
+0x0006,
+0x0007,
+0x0008,
+0x0009,
+0x000a,
+0x000b,
+0x000c,
+0x000d,
+0x000e,
+0x000f,
+0x0010,
+0x0011,
+0x0014,
+0x0013,
+0x0015,
+0x0016,
+0x0017,
+0x0018,
+0x0019,
+0x001a,
+0x001b,
+0x001c,
+0x001d,
+0x001f,
+0x0020,
+0x0021,
+0x002a,
+0x002b,
+0x002c,
+0x002a,
+0x002b,
+0x002c,
+0x0022,
+0x0022,
+0x0022,
+0x0022,
+0x0022,
+0x0022,
+0x0022,
+0x0022,
+0x0022,
+0x0022,
+0x0022,
+0x0022,
+0x0022,
+0x0022,
+0x0022,
+0x0022,
+0x0023,
+0x0023,
+0x0023,
+0x0023,
+0x0023,
+0x0023,
+0x0023,
+0x0023,
+0x0023,
+0x0023,
+0x0023,
+0x0023,
+0x0023,
+0x0023,
+0x0023,
+0x0023,
+0x003a,
+0x003a,
+0x003a,
+0x003a,
+0x003a,
+0x003a,
+0x003a,
+0x003a,
+0x003a,
+0x003a,
+0x003a,
+0x003a,
+0x003a,
+0x003a,
+0x003a,
+0x003a,
+0x003b,
+0x003b,
+0x003b,
+0x003b,
+0x003b,
+0x003b,
+0x003b,
+0x003b,
+0x003b,
+0x003b,
+0x003b,
+0x003b,
+0x003b,
+0x003b,
+0x003b,
+0x003b,
+0x0024,
+0x0025,
+0x0022,
+0x0023,
+0x0024,
+0x0022,
+0x0026,
+0x0026,
+0x0026,
+0x0026,
+0x0026,
+0x0026,
+0x0026,
+0x0026,
+0x0026,
+0x0026,
+0x0026,
+0x0026,
+0x0026,
+0x0026,
+0x0026,
+0x0026,
+0x0027,
+0x0027,
+0x0027,
+0x0027,
+0x0027,
+0x0027,
+0x0027,
+0x0027,
+0x0027,
+0x0027,
+0x0027,
+0x0027,
+0x0027,
+0x0027,
+0x0027,
+0x0027,
+0x003c,
+0x003c,
+0x003c,
+0x003c,
+0x003c,
+0x003c,
+0x003c,
+0x003c,
+0x003c,
+0x003c,
+0x003c,
+0x003c,
+0x003c,
+0x003c,
+0x003c,
+0x003c,
+0x003d,
+0x003d,
+0x003d,
+0x003d,
+0x003d,
+0x003d,
+0x003d,
+0x003d,
+0x003d,
+0x003d,
+0x003d,
+0x003d,
+0x003d,
+0x003d,
+0x003d,
+0x003d,
+0x0028,
+0x0029,
+0x0026,
+0x0027,
+0x0028,
+0x0026,
+0x002d,
+0x0030,
+0x0031,
+0x002e,
+0x002f,
+0x0032,
+0x0033,
+0x0035,
+0x0012,
+0x001e,
+0x0037,
+0x0036,
+0x0039,
+0x0038,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+0x0000,
+};
+
+u32 vpdma_firmware_size = sizeof(vpdma_firmware);
+
+/**
+ * Load firmware for VPDMA.
+ */
+int vpdma_load_firmware(u32* desc_buffer)
+{
+	u32* firmware;
+	u32 status;
+	int repeat;
+	int result = 0;
+	int ok;
+
+	/* allocate physical contiguous memory for firmware buffer */
+	firmware = (u32*)desc_buffer;
+	if (!firmware)
+	{
+#ifdef DEBUG_VPSS
+		printf("unable to allocate memory for VPDMA firmware\n");
+#endif
+		return -1;
+	}
+	/* copy firmware to buffer */
+	memcpy(firmware, vpdma_firmware, vpdma_firmware_size);
+	/* Reset VPDMA module */
+	vps_reset_module(VPS_MODULE_VPDMA, 1);
+	udelay(10);
+	vps_reset_module(VPS_MODULE_VPDMA, 0);
+
+	/* load firmware */
+	vpdma_write32(VPDMA_LIST_ADDR, (u32)firmware);
+
+	/* wait till firmware is loaded */
+        for (ok = 0, repeat = 0; repeat < 100 && !ok; repeat++)
+	{
+		status = vpdma_read32(VPDMA_LIST_ATTR);
+		if ((status & 0x80000) == 0x80000)
+		{
+			ok = 1;
+		}
+		else
+		{
+			udelay(10);
+		}
+	}
+
+        if (!ok)
+    	{
+#ifdef DEBUG_VPSS
+    		printf("failed to load VPDMA firmware\n");
+#endif
+    		result = -1;
+    	}
+ 
+	return result;
+}
+
+void vps_reset_module(vps_module_t module, int assert_reset)
+{
+	u32 val = vps_read32(VPS_CLKC_RESET);
+
+	if (assert_reset)
+		val |= (1<<module);
+	else
+		val &= ~(1<<module);
+
+	vps_write32(VPS_CLKC_RESET, val);
+}
+
+u32 dispmgr_create_grpx_conf_descriptor(int grpx_unit, u32* desc_buffer, 
+u32* payload_buffer, u32 xres, u32 yres)
+{
+	u32 size = 0;
+	u32* desc;
+	u32* payload;
+
+	/* set up frame configuration descriptor */
+	desc = desc_buffer;
+	desc[0] = 0x1;   /* frame configuration address */
+	desc[1] = 16;    /* data length */
+	desc[2] = (u32)payload_buffer;  /* payload location */
+	desc[3] = 0
+		| (0xB<<27)     /* packet type */
+		| (0<<26)       /* indirect command */
+		| (1<<24)       /* block type */
+		| ((grpx_unit + 1)<<16)  /* destination GRPX0..GRPX2 */
+		| (1<<0)        /* payload size in 128 bit units */
+		;
+	size += 16;
+	payload = payload_buffer;
+	payload[0] = 0;      /* reserved */
+	payload[1] = 0
+		| (xres<<16)  /* frame width */
+		| (yres<<0)   /* frame height */
+			;
+	payload[2] = 0;      /* reserved */
+	payload[3] = 0
+		| (0<<30)    /* progressive format */
+		| (1<<31)    /* yes soft reset of GRPX unit */
+		;
+
+	return size;
+}
+
+u32 dispmgr_setup_layers(u32* desc_buffer, int stride,int width, int 
+height, u32 paddr)
+{
+	u32 size = 0;
+	u32* desc;
+	int chan;
+	int x = 0;
+	int y = 0;
+
+	u32 layer_ctrl;
+	desc = desc_buffer ;
+	layer_ctrl = 0x0000E400;
+
+	/*
+	 * set up data descriptors for GRPX units
+	 */
+	/* add src_viewport origin to surface start address */
+			
+#ifdef CONFIG_GRPX0
+	layer_ctrl |= 1<<(2);  /* enable GRPXx layer */
+#elif defined CONFIG_GRPX1
+	layer_ctrl |= 1<<(1);  /* enable GRPXx layer */
+#else
+	layer_ctrl |= 1<<(0);  /* enable GRPXx layer */
+#endif
+
+#ifdef CONFIG_GRPX0
+	chan = GRPX0_CHANNEL_NUMBER;
+#elif defined CONFIG_GRPX1
+	chan = GRPX1_CHANNEL_NUMBER;
+#else
+	chan = GRPX2_CHANNEL_NUMBER;
+#endif
+
+	/* set up data transfer descriptor */
+	desc[0] = 0
+		| (DATA_TYPE<<26)    // RGB-888
+		| (0<<25)            // no notification
+		| (0<<24)            // field number
+		| (0<<23)            // 2-dimensional data
+		| (0<<20)            // +1 line skip (even)
+		| (0<<16)            // +1 line skip (odd)
+		| (stride)           // line stride
+		;
+	desc[1] = 0
+		| (width<<16)        // line length in pixels
+		| (height)           // number of rows
+		;
+	desc[2] = paddr;
+	desc[3] = 0
+    		| (0xA<<27)    // packet type
+		| (0<<26)      // 1D mode
+		| (0<<25)      // inbound direction
+		| (chan<<16)   // channel
+		| (0<<9)       // priority
+		| (chan<<0)    // next channel
+		;
+	desc[4] = 0
+		| (width<<16)  // region width
+		| (height)     // region height
+		;
+	desc[5] = 0
+		| (x<<16)      // horizontal start
+		| (y<<0)       // vertical start
+		;
+	desc[6] = 0
+		| (1<<7)       // first region
+		| (1<<8)       // last region
+		;
+	desc[7] = 0; // alpha blending enable
+	desc += 8;
+	size += 32;
+
+	/* Add a reload list descriptor 
+	*/
+	desc[0] = (u32)desc_buffer;
+	desc[1] = (size+4+15)>>4;
+	desc[2] = 0;
+	desc[3] = 0
+		| (0xC << 27)
+		| (0x7 << 0)
+		;
+	desc += 4;
+	size += 16;
+
+	vps_write32(VPS_COMP_HDMI_VOUT1, layer_ctrl);
+
+	return size;
+}
+
+void vpdma_send_list(u32* desc_buffer, int desc_len, int list_no)
+{
+	/* convert descriptor size from byte units to 128-bit units */
+	desc_len = (desc_len+15)>>4;
+
+	/* send list */
+	vpdma_write32(VPDMA_LIST_ADDR,(u32)desc_buffer);
+	vpdma_write32(VPDMA_LIST_ATTR, 0
+			| (list_no<<24)  /* list number */
+			| (0<<16)        /* list type: normal */
+			| (desc_len<<0)  /* list size */
+			);
+}
+
+int dispmgr_wait_for_list_complete(int dispno)
+{
+	u32 status;
+	int repeat;
+	int ok;
+
+        for (ok = 0, repeat = 0; repeat < 100 && !ok; repeat++)
+	{
+		status = vpdma_read32(VPDMA_LIST_ATTR);
+		if ((status & 0x80000) == 0x80000)
+		{
+			ok = 1;
+		}
+		else
+		{
+			udelay(10);
+		}
+	}
+        if(repeat == 100)
+	{
+	    return -1;
+	}
+
+	return 0;
+}
+
+/*
+ * The Graphic Device
+ */
+GraphicDevice ti81xx_device;
+
+void *video_hw_init()
+{
+	u32* desc_buffer;
+	u32* payload_buffer;
+	u32 size;
+	u32 paddr;
+
+	/* VPDMA list number to use */
+	int g_vpdma_list_no = VPDMA_LIST_NUMBER;
+
+	/* initialize the Graphic Device structure */
+
+	/* frame buffer for displaying the image */
+	ti81xx_device.frameAdrs = FRAME_BUFFER_ADDRESS;      
+
+	/* width according to the resolution */
+	ti81xx_device.winSizeX = WIDTH;
+
+	/* height according to the resolution */
+	ti81xx_device.winSizeY = HEIGHT;
+
+	/* support for 24 bit image */
+	ti81xx_device.gdfIndex = GDF_24BIT_888RGB;
+	ti81xx_device.gdfBytesPP = 3;
+
+#ifdef CONFIG_GRPX0
+	u32 grpx_unit = GRPX0;
+#elif defined CONFIG_GRPX1 
+	u32 grpx_unit = GRPX1;
+#else
+	u32 grpx_unit = GRPX2;
+#endif
+	/* memory address for loading vpdma firmware and descriptors */
+	desc_buffer = (u32*) VPDMA_DESC_BUFFER;
+
+	/* set the board for displaying the logo */
+	SET_BOARD();
+		
+	/* clear the frame buffer for with the backgroung color */
+	memset((void *) FRAME_BUFFER_ADDRESS,LOGO_BGCOLOR, FRAME_SIZE);
+	
+	if (vpdma_load_firmware(desc_buffer) == -1)
+	{
+#ifdef DEBUG_VPSS
+		printf("\nERROR vpdma_load_firmware failed");
+#endif
+	}
+
+	paddr = ti81xx_device.frameAdrs;
+
+	/* allocate physical contiguous memory for payload data */
+	payload_buffer = (u32*)((u32) desc_buffer + 0x1000);
+
+	/* Allocate physical memory for MV data */
+	size = dispmgr_create_grpx_conf_descriptor(grpx_unit, desc_buffer, payload_buffer,WIDTH,HEIGHT);
+	vpdma_send_list(desc_buffer, size, g_vpdma_list_no);
+
+       	/* wait for list complete interrupt */
+	if(dispmgr_wait_for_list_complete(1) == -1)
+	{
+#ifdef DEBUG_VPSS
+		printf("\nERROR : wait for list complete FAILED!");
+#endif
+	}
+
+#ifdef CONFIG_GRPX0
+	vpdma_write32(VPDMA_GRPX0_DATA_CSTAT,0x00001C00);
+#elif defined CONFIG_GRPX1
+	vpdma_write32(VPDMA_GRPX1_DATA_CSTAT,0x00001C00);
+#else
+	vpdma_write32(VPDMA_GRPX2_DATA_CSTAT,0x00001C00);
+#endif
+
+	size = dispmgr_setup_layers(desc_buffer, STRIDE, WIDTH, HEIGHT+60, paddr);
+	vpdma_send_list( desc_buffer, size, g_vpdma_list_no);
+
+	while (dispmgr_wait_for_list_complete(1) == -1);
+
+	/* return the Graphic device structure */	
+	return (&ti81xx_device);
+}
+
+void video_set_lut (unsigned int index,	/* color number */
+	       unsigned char r,	/* red */
+	       unsigned char g,	/* green */
+	       unsigned char b	/* blue */
+	       )
+{
+}
diff --git a/drivers/video/ti814x_logo.c b/drivers/video/ti814x_logo.c
new file mode 100644
index 0000000..55527d5
--- /dev/null
+++ b/drivers/video/ti814x_logo.c
@@ -0,0 +1,578 @@
+#include <common.h>
+#include <logo.h>
+
+int ti814x_prcm_init()
+{
+	if (ti814x_prcm_enable_vps_power_and_clock() < 0)
+	{
+		return -1;
+	}
+
+	return 0;
+}
+
+int ti814x_prcm_enable_vps_power_and_clock()
+{
+	int repeat;
+	int ok;
+	u32 val;
+
+	/* SW_WKUP: Start a software forced wake up transition on the domain. */
+	prcm_write32(CM_HDVPSS_CLKSTCTRL, 0x02);
+
+	/* wait for 10 microseconds before checking for power update */
+	udelay(10);
+
+	/* Check the power state after the wakeup transistion */
+	for (ok=0, repeat=0; repeat<5; repeat++)
+	{
+		val = prcm_read32(PM_HDVPSS_PWRSTST);
+		if (val == 0x37)
+		{
+			ok = 1;
+			break;
+		}
+		udelay(10);
+	}
+	if (!ok)
+	{
+		return -1;
+	}
+
+	/* Enable HDVPSS Clocks */
+	prcm_write32(CM_HDVPSS_HDVPSS_CLK_CTRL, 0x02);
+
+	/* Enable HDMI Clocks */
+	prcm_write32(CM_HDVPSS_HDMI_CLKCTRL, 0x02);
+
+	for (ok = 0, repeat = 0; repeat < 5; repeat++)
+	{
+		val = prcm_read32(CM_HDVPSS_CLKSTCTRL);
+		if ((val & 0x100) == 0x100)
+		{
+			ok = 1;
+			break;
+		}
+		udelay(10);
+	}
+	if (!ok)
+	{
+		return -1;
+
+	}
+
+	/* reset HDVPSS and HDMI */
+	prcm_write32(RM_HDVPSS_RSTCTRL, 0x04);
+	udelay(10);
+	prcm_write32(RM_HDVPSS_RSTST, 0x04);
+	udelay(10);
+
+        /* release reset from HDVPSS and HDMI */
+	prcm_write32(RM_HDVPSS_RSTCTRL, 0x00);
+	udelay(10);
+
+        /* wait for SW reset to complete */
+	for (ok = 0, repeat = 0; repeat < 5; repeat++)
+	{
+		val = prcm_read32(RM_HDVPSS_RSTST);
+		if ((val & 0x4) == 0x4)
+		{
+			ok = 1;
+			break;
+		}
+		udelay(10);
+	}
+        if (!ok)
+        {
+    	        return -1;
+        }
+
+	/* put HDVPSS in ON State */
+	val = prcm_read32(PM_HDVPSS_PWRSTCTRL);
+	val |= 0x3;
+	prcm_write32(PM_HDVPSS_PWRSTCTRL, val);
+
+	/* wait 10 microseconds after powering on */
+	udelay(10);
+
+	/* check power status */
+	for (ok = 0, repeat = 0; repeat < 5; repeat++)
+	{
+		val = prcm_read32(PM_HDVPSS_PWRSTST);
+		if (val == 0x37)
+		{
+			ok = 1;
+			break;
+		}
+		udelay(10);
+	}
+        if (!ok)
+        {
+    	        return -1;
+        }
+
+	return 0;
+}
+
+/**
+ * Initialize the PLLs
+ */
+void ti814x_pll_init()
+{
+	ti814x_pll_config_hdvpss();
+}
+
+/**
+ * Configure PLL for HDVPSS unit
+ */
+void ti814x_pll_config_hdvpss()
+{
+	u32 rd_osc_src;
+	rd_osc_src = pll_read32(PLL_VIDEO2_PINMUX);
+	rd_osc_src &= 0xFFFFFFFE;
+	pll_write32(PLL_VIDEO2_PINMUX, rd_osc_src);
+	ti814x_pll_configure(PLL_HDVPSS_BASE, 19, 800, 4, 0x00000801);
+}
+
+/**
+ * Program a PLL unit
+ */
+void ti814x_pll_configure(u32 baseAddr, u32 N, u32 M, u32 M2, u32 clkCtrlValue)
+{
+	u32 m2nval, mn2val, clkctrl, clk_out, ref_clk, clkout_dco = 0;
+	u32 status;
+
+	m2nval = (M2<<16) | N;
+	mn2val =  M;
+	ref_clk     = OSC_FREQ / (N+1);
+	clkout_dco  = ref_clk * M;
+	clk_out     = clkout_dco / M2;
+
+	pll_write32((baseAddr + M2NDIV    ),m2nval);
+	pll_write32((baseAddr + MN2DIV    ),mn2val);
+	pll_write32((baseAddr + TENABLEDIV),0x1);
+	pll_write32((baseAddr + TENABLEDIV),0x0);
+	pll_write32((baseAddr + TENABLE   ),0x1);
+	pll_write32((baseAddr + TENABLE   ),0x0);
+
+	clkctrl = pll_read32(baseAddr + CLKCTRL);
+	clkctrl = (clkctrl & ~(7<<10 | 1<<23)) | clkCtrlValue;
+	pll_write32(baseAddr + CLKCTRL, clkctrl);
+
+	do
+	{
+		status = pll_read32(baseAddr + STATUS);
+	} 
+	while ((status & 0x00000600) != 0x00000600);
+}
+
+/**
+ * Initialize HDVPSS unit
+ */
+void ti814x_vps_init()
+{
+	/* enable clocks on all units */
+	vps_write32(VPS_CLKC_ENABLE, 0x01031fff);
+	vps_write32(VPS_CLKC_VENC_CLK_SELECT, 0x9000D);
+	udelay(10);
+
+	/* enable all video encoders */
+	vps_write32(VPS_CLKC_VENC_ENABLE, 0xD);
+
+	/* enable comp units */
+	vps_write32(VPS_COMP_STATUS, 0
+			| (1<<0)   // HDMI enable
+			);
+
+	/* set background color */
+	vps_write32(VPS_COMP_BGCOLOR, LOGO_BGCOLOR);
+}
+
+int ti814x_set_mode(int dispno,int xres, int yres)
+{
+#ifdef CONFIG_480p
+	/*modeline "720x480" 27.000 720 736 798 858 480 489 495 525 -hsync -vsync*/
+	if (ti814x_pll_config_hdmi(27000000) == -1)
+	{
+		return -1;
+	}
+	ti814x_hdmi_enable(27000000);
+        ti814x_vps_configure_venc(0x6000, 720, 736, 798, 858, 480, 489, 495, 525, 0, 1, 1);
+	xres = 720;
+	yres = 480;
+#else		
+	/* ModeLine "1920x1080" 148.50 1920 2008 2052 2200 1080 1084 1088 1125 +HSync +VSync */
+	if (ti814x_pll_config_hdmi(148500000) == -1)
+	{
+		return -1;
+	}
+	ti814x_hdmi_enable(148500000);
+	ti814x_vps_configure_venc(0x6000, 1920, 2008, 2052, 2200, 1080, 1084, 1088, 1125, 0, 0, 0);
+	xres = 1920;
+	yres = 1080;
+#endif
+	ti814x_pll_hdmi_setwrapper_clk();
+
+	return 0;
+}
+
+/**
+ * Configure PLL for HDMI
+ */
+int ti814x_pll_config_hdmi(u32 freq)
+{
+	u32 rd_osc_src;
+	pll_config_t config;
+
+	rd_osc_src = pll_read32(PLL_OSC_SRC_CTRL);
+	pll_write32(PLL_OSC_SRC_CTRL, (rd_osc_src & 0xfffbffff) | 0x0);
+
+	rd_osc_src = pll_read32(PLL_VIDEO2_PINMUX);
+	rd_osc_src &= 0xFFFFFFFE;
+	pll_write32(PLL_VIDEO2_PINMUX, rd_osc_src);
+	if (ti814x_pll_get_dividers(freq, 1, &config) == -1)
+	{
+		return -1;
+	}
+
+	ti814x_pll_configure(PLL_VIDEO2_BASE, config.n, config.m, config.m2, config.clk_ctrl);
+
+	return 0;
+}
+
+/**
+ * Enable HDMI output.
+ */
+void ti814x_hdmi_enable(int freq)
+{
+	u32 temp, temp1;
+
+	/* wrapper soft reset */
+	temp = hdmi_read32(0x0010) ;
+	temp1 = ((temp & 0xFFFFFFFE)| 0x1 );
+	hdmi_write32(0x0300, temp1);
+	temp = 0;
+	udelay(10);
+
+	/* configure HDMI PHY */
+	/* 48 Mhz Clock input to HDMI ie SDIO clock output from PRCM */
+	prcm_write32(0x15B0, 0x2);
+
+	/* Power on the phy from wrapper */
+	hdmi_write32(0x0040, 0x8);
+
+	while((hdmi_read32(0x0040) & 0x00000003) != 2);
+
+	hdmi_write32(0x0040, 0x4A);
+	while((hdmi_read32(0x0040) & 0x000000FF ) != 0x5A);
+
+	hdmi_write32(0x0040, 0x8A);
+	while((hdmi_read32(0x0040) & 0xFF) != 0xAA);
+
+	/* Dummy read to PHY base to complete the SCP reset process HDMI_PHY_U_BAS */
+	temp = hdmi_read32(0x0300);
+
+	temp = hdmi_read32(0x0300);
+
+	if(freq > 50000000)
+	temp1 = ((temp & 0x3FFFFFFF) | (0x1 << 30));//0x40000000);
+	else
+	temp1 = ((temp & 0x3FFFFFFF) | (0x0 << 30));//0x40000000);
+	hdmi_write32(0x0300, temp1);
+
+	temp = hdmi_read32(0x030C) ;
+	temp1 = ((temp & 0x000FFFFF) | 0x85400000);
+	hdmi_write32(0x030C, temp1);
+
+	hdmi_write32(0x0304, 0xF0000000);
+
+	udelay(10);
+
+	/* cec clock divider config */
+	temp = hdmi_read32(0x0070) ;
+	temp1 = temp | 0x00000218;
+	hdmi_write32(0x0070, temp1);
+
+	/* wrapper debounce config */
+	temp = hdmi_read32(0x0044) ;
+	temp1 = temp | 0x00001414;
+	hdmi_write32(0x0044, temp1);
+
+	/* packing mode config */
+	temp = hdmi_read32(0x0050) ;
+	temp1 = temp | 0x105;
+	hdmi_write32(0x0050, temp1);
+
+	/* disable audio */
+	hdmi_write32(0x0080, 0x0);
+
+	/* release HDMI IP CORE reset and release power down of core */
+	hdmi_write32(0x0414, 0x1);
+	hdmi_write32(0x0424, 0x1);
+
+	/* video action  config of hdmi */
+	hdmi_write32(0x0524, 0x0);
+
+	/* config input data bus width */
+	hdmi_write32(0x0420, 0x7);
+
+	/* configure AVI INFOFRAME */
+	hdmi_write32(0x0528, 0x0);  // VID_MODE CONFIG
+	hdmi_write32(0x04CC, 0x1);  // DATA ENABLE CNTRL
+	hdmi_write32(0x0420, 0x37); // ENABLE VSYNC AND HSYNC
+	hdmi_write32(0x04F8, 0x0);  // iadjust config to enable vsync
+	hdmi_write32(0x0520, 0x10); // csc is bt709
+	hdmi_write32(0x09BC, 0x21); // enable hdmi
+
+	hdmi_write32(0x0608, 0x20); // tmds_ctrl
+	hdmi_write32(0x0904, 0x0);  // disable n/cts of actrl
+	hdmi_write32(0x0950, 0x0);  // disable audio
+	hdmi_write32(0x0414, 0x0);  // keep audio  operation in reset state
+
+	/* configure AVI INFOFRAME */
+	hdmi_write32(0x0A00, 0x82);
+	hdmi_write32(0x0A04, 0x2);
+	hdmi_write32(0x0A08, 0xD);
+	hdmi_write32(0x0A10, 0x1);
+	hdmi_write32(0x0A14, 0xA0);
+	hdmi_write32(0x0A1C, 0x8F);
+
+	hdmi_write32(0x0538 , 0x3);  // DISABLE DEEP COLOR MODE IN DC PACKET
+	hdmi_write32(0x09C0 , 0x10);
+	hdmi_write32(0x09F8 , 0x3);  // ENABLE AND REPEAT AVI INFOFRAM TRANSMISSON
+	hdmi_write32(0x09FC , 0xF);  // ENABLE AND REPEAT GENEERAL PACKET TRANSMISSION
+}
+
+/* Change pin mux */
+void ti814x_pll_hdmi_setwrapper_clk()
+{
+        u32 rd_osc_src;
+        rd_osc_src = pll_read32(PLL_VIDEO2_PINMUX);
+        rd_osc_src |= 0x1;
+        pll_write32(PLL_VIDEO2_PINMUX, rd_osc_src);
+}
+
+int ti814x_pll_get_dividers(u32 req_out_clk, int hdmi, pll_config_t* config)
+{
+	int32_t ret = -1;
+	int32_t n, m, m2;
+	float ref_clk, dco_clk, clk_out;
+	float best_delta;
+
+	config->n = 0;
+	config->m = 0;
+	config->m2 = 0;
+	config->clk_ctrl = 0;
+	best_delta = 1E20;
+
+	if(hdmi)
+	{
+		config->n = 19;//n;
+		config->m = 1485;//m;
+		config->m2 = 10;//m2;
+		config->clk_ctrl = 0x200a1001;
+        	if(req_out_clk == 74250000 )
+		{
+                	config->n = 19;//n;
+			config->m = 742;//m;
+			config->m2 = 10;//m2;
+			config->clk_ctrl = 0x20020801;
+		}
+    		else if(req_out_clk == 65000000 )
+    		{
+    			config->n = 19;//n;
+    			config->m = 650;//m;
+    			config->m2 = 10;//m2;
+	    		config->clk_ctrl = 0x20020801;
+    		}
+	    	else if(req_out_clk == 54000000 )
+   		{
+			config->n = 19;//n;
+	    		config->m = 540;//m;
+    			config->m2 = 10;//m2;
+	    		config->clk_ctrl = 0x20020801;
+	   	}
+    		else if(req_out_clk == 27000000 )
+	    	{
+		    	config->n = 19;//n;
+	    		config->m = 540;//m;
+		    	config->m2 = 2;//m2;
+    			config->clk_ctrl = 0x200A0801;//0x20020801;
+    		}
+	    	else if(req_out_clk == 33000000 )
+    		{
+	    		config->n = 19;//n;
+	    		config->m = 660;//m;
+    			config->m2 = 2;//m2;
+	    		config->clk_ctrl = 0x200A0801;//0x20020801;
+	    	}
+
+    		ref_clk = 20E6f / (config->n + 1);
+	    	dco_clk = ref_clk * config->m;
+    		clk_out = dco_clk / config->m2;
+    		ret = 0;
+	}
+	else
+	{
+		for (n = 19; n <= 19 && ret != 0; n++)
+		{
+			ref_clk = 20E6f / (n + 1);
+			if (ref_clk < 2.5E6)
+			{
+				int32_t m_min;
+				int32_t m_max;
+
+				if (hdmi)
+				{
+					m_min = 1000.0E6f / ref_clk;
+					m_max = 2000.0E6f / ref_clk;
+				}	
+				else
+				{
+					m_min =  500.0E6f / ref_clk;
+					m_max = 1000.0E6f / ref_clk;
+				}	
+
+				for (m = m_min; m < m_max && ret != 0; m++)
+				{
+					dco_clk = ref_clk * m;
+					for (m2 = 10; m2 <= 20; m2++)
+					{
+						float delta;
+						clk_out = dco_clk / m2;
+						delta = clk_out-req_out_clk;
+						if (delta < 0)
+						{
+							delta = -delta;
+						}
+
+						if (delta < best_delta)
+						{
+							config->n = n;
+							config->m = m;
+							config->m2 = m2;
+							if (hdmi)
+							{
+								config->clk_ctrl = 0x200a1001;
+							}
+							else
+							{
+								config->clk_ctrl = 0x00000801;
+							}
+
+							best_delta = delta;
+
+							if (delta == 0.0)
+							{
+								ret = 0;
+								break;
+							}
+						}
+					}
+				}
+			}
+		}
+	}
+	return ret;
+}
+
+/**
+ * Configure VENC unit
+  */
+void ti814x_vps_configure_venc(u32 cfg_reg_base, int hdisp, int hsyncstart, int hsyncend, int htotal, int vdisp, int vsyncstart, int vsyncend, int vtotal, int enable_invert, int hs_invert, int vs_invert)
+{
+
+  	int av_start_h = htotal-hsyncstart;
+	int av_start_v = vtotal-vsyncstart;
+	int hs_width = hsyncend-hsyncstart;
+	int vs_width = vsyncend-vsyncstart;
+
+	 /* CFG10: clamp, lines (total num lines), pixels (total num pixels/line) */
+
+	vps_write32(cfg_reg_base + 0x28, 0x84000000 | (vtotal<<12) | (htotal));  // 84h=132d for 1080i
+
+	 /* CFG12: hs_width, act_pix, h_blank-1 */
+
+  	vps_write32(cfg_reg_base + 0x30, (hs_width<<24) | (hdisp<<12) | (av_start_h-1));
+
+ 	 /* CFG15: vout_hs_wd, vout_avdhw, vout_avst_h (same as in 0x6030?) */
+
+  	vps_write32(cfg_reg_base + 0x3c, (hs_width<<24) | (hdisp<<12) | (av_start_h));
+
+  	/* CFG16: bp_pk_l (back porch peak), vout_avst_v1 (active video start field 1), vout_hs_st (hsync start) */
+
+  	vps_write32(cfg_reg_base + 0x40, (av_start_v<<12));
+
+ 	 /* CFG17: bp_pk_h (back porch peak), vout_avst_vw (num active lines), vout_avst_v1 (active video start field 2) */
+
+  	vps_write32(cfg_reg_base + 0x44, (vtotal<<12));
+
+  	/* CFG18: vout_vs_wd1, vout_vs_st1 (vsync start), vout_avd_vw2 (vs width field 2) */
+
+  	vps_write32(cfg_reg_base + 0x48, (vs_width<<24));
+
+  	/* CFG21: osd_avd_hw (number of pixels per line), osd_avst_h */
+
+  	vps_write32(cfg_reg_base + 0x54, (hs_width<<24) | (hdisp<<12) | (av_start_h-8));
+
+  	/* CFG22: osd_avst_v1 (first active line), osd_hs_st (HS pos) */
+
+  	vps_write32(cfg_reg_base + 0x58, (av_start_v<<12));
+
+  	/* CFG23: osd_avd_vw1 (number of active lines), osd_avst_v2 (first active line in 2nd field) */
+
+  	vps_write32(cfg_reg_base + 0x5c, (vdisp<<12));
+
+  	/* CFG24: osd_vs_wd1 (vsync width), osd_vs_st1 (vsync start), osd_avd_vw2 */
+
+  	vps_write32(cfg_reg_base + 0x60, (vs_width<<24));
+
+  	/* CFG25: osd_vs_wd2, osd_fid_st1, osd_vs_st2 */
+
+  	vps_write32(cfg_reg_base + 0x64, 0x00000000);
+
+  	vps_write32(cfg_reg_base + 0x00,
+
+    	(enable_invert<<25)
+
+    	| (hs_invert<<24)
+
+    	| (vs_invert<<23)
+
+    	| (3<<16) // video out format: 10 bit, separate syncs
+
+    	| (1<<13) // bypass gamma correction
+
+    	| (1<<5)  // bypass gamma correction
+
+    	| (1<<4)  // bypass 2x upscale
+
+    	| (1<<0)  // 480p format 
+
+    	);
+
+	vps_write32(cfg_reg_base + 0x00, vps_read32(cfg_reg_base+0x00) | 0x40000000); /* start encoder */
+}
+
+int ti814x_set_board()
+{
+	if(ti814x_prcm_init() == -1)
+        {
+#ifdef DEBUG_VPSS
+		printf("ERROR: ti814x_prcm_init failed\n");
+#endif
+        }
+
+	ti814x_pll_init();
+
+	ti814x_vps_init();
+
+	if (ti814x_set_mode(1, WIDTH, HEIGHT) == -1)
+	{
+#ifdef DEBUG_VPSS
+		printf("ERROR: ti814x_set_mode failed\n");
+#endif
+	}
+	
+	return 0;
+}
diff --git a/drivers/video/ti816x_logo.c b/drivers/video/ti816x_logo.c
new file mode 100644
index 0000000..808cf29
--- /dev/null
+++ b/drivers/video/ti816x_logo.c
@@ -0,0 +1,390 @@
+#include <common.h>
+#include <logo.h>
+
+void ti816x_HdVpssClkEnable()
+{
+	uint delay;
+#ifdef DEBUG_VPSS
+	printf("\t\nPRCM for HDVPSS is in Progress","Output",1,1,1);
+#endif
+	WR_MEM_32(CM_HDDSS_CLKSTCTRL, 2); /*Enable Power Domain Transition for HDVPSS */
+
+	WR_MEM_32(CM_ACTIVE_HDDSS_CLKCTRL, 0); /*Enable HDVPSS Clocks*/
+	delay = 1000;
+	while(delay-- > 0);
+	WR_MEM_32(CM_ACTIVE_HDDSS_CLKCTRL, 2); /*Enable HDVPSS Clocks*/
+
+	/*Check clocks are active*/
+	while(((RD_MEM_32(CM_HDDSS_CLKSTCTRL) & 0xFF00) >> 8) != 0xFF) ;
+
+	/* Check to see module is functional */
+	while(((RD_MEM_32(CM_ACTIVE_HDDSS_CLKCTRL) & 0x70000) >> 16) != 0) ;
+#ifdef DEBUG_VPSS
+	printf("\t\nPRCM for HDVPSS is Done Successfully","Output",1,1,1);
+#endif
+}
+
+void ti816x_HdmiClkEnable()
+{
+#ifdef DEBUG_VPSS
+	printf("\t\nPRCM for HDMI is in Progress","Output",1,1,1);
+#endif
+	WR_MEM_32(CM_HDMI_CLKSTCTRL,2); /*Enable Power Domain Transition for HDMI */
+	WR_MEM_32(CM_ACTIVE_HDMI_CLKCTRL,2); /*Enable HDMI Clocks*/
+
+	/*Check clocks are active*/
+	while(((RD_MEM_32(CM_HDMI_CLKSTCTRL) & 0x300) >> 8) != 0x3) ;
+
+	/* Check to see module is functional */
+	while(((RD_MEM_32(CM_ACTIVE_HDMI_CLKCTRL) & 0x70000) >> 16) != 0) ;
+#ifdef DEBUG_VPSS
+	printf("\t\nPRCM for HDMI is Done Successfully","Output",1,1,1);
+#endif
+}
+
+void ti816x_HdVpss_VencD297_VencA297()
+{
+#ifdef DEBUG_VPSS
+	printf("\t\nVideo PLL: VencD->297 VencA->297 Please Wait.....","Output",1,1,1);
+#endif
+	/*SYS_CLKOUT selection*/
+	WR_MEM_32(CM_CLKOUT_CTRL, 0xA2);  /* /5 divider is selected*/
+	ti816x_VideoPLL(0x6E, 0x2, 0xB, 0x0, 0x5, 0xA, 0x0, 0x2, 0xA, 0x0, 0x2, 0x3, 0x3);
+#ifdef DEBUG_VPSS
+	printf("\t\nVideo PLL Configuration is Done.....","Output",1,1,1);
+#endif
+}
+
+void ti816x_VideoPLL(uint VIDEO_N, uint VIDEO_P, uint  VIDEO_INTFREQ1, uint 
+VIDEO_FRACFREQ1, uint VIDEO_MDIV1, uint  VIDEO_INTFREQ2, uint VIDEO_FRACFREQ2, 
+uint VIDEO_MDIV2, uint  VIDEO_INTFREQ3, uint VIDEO_FRACFREQ3, uint VIDEO_MDIV3, 
+uint B1, unsigned C2)
+{
+	uint video_pll_ctrl=0;
+
+	/*Put the Video PLL in Bypass Mode*/
+	video_pll_ctrl = RD_MEM_32(VIDEOPLL_CTRL);
+	video_pll_ctrl &=0xFFFFFFFB;
+	video_pll_ctrl |=4;
+	WR_MEM_32(VIDEOPLL_CTRL, video_pll_ctrl);
+
+	/*Bring Video PLL out of Power Down Mode*/
+	video_pll_ctrl = RD_MEM_32(VIDEOPLL_CTRL);
+	video_pll_ctrl &=0xFFFFFFF7;
+	video_pll_ctrl |=8;
+	WR_MEM_32(VIDEOPLL_CTRL, video_pll_ctrl);
+
+	/*Program the Video PLL Multiplier and Pre-dividr value*/
+	video_pll_ctrl = RD_MEM_32(VIDEOPLL_CTRL);
+	video_pll_ctrl &=0xFF;
+	video_pll_ctrl |=(VIDEO_N<<16) | (VIDEO_P<<8);
+	WR_MEM_32(VIDEOPLL_CTRL, video_pll_ctrl);
+
+	/*Bring the Video PLL Individual output clocks out of Power Down Mode
+	  1->Power Down
+	  0->Normal Mode i.e., out of Power Down Mode
+	 */
+	WR_MEM_32(VIDEOPLL_PWD, 0x0);
+
+	/*Program the Video PLL to generate SYSCLK11 (RF Modulator), SYSCLK17 (SD_VENC), and STC1 source clocks*/
+	WR_MEM_32(VIDEOPLL_FREQ1, (1<<31) | (1<<28) | (VIDEO_INTFREQ1<<24) | VIDEO_FRACFREQ1);
+
+	/*Program Video PLL SYSCLK11 Post divider register*/
+	WR_MEM_32(VIDEOPLL_DIV1, (1<<8) | VIDEO_MDIV1);
+
+	/*Program the PLL to generate SYSCLK13 (HD_VENC_D clock) and STC0/STC1 source clocks */
+	WR_MEM_32(VIDEOPLL_FREQ2, (1<<31) | (1<<28) | (VIDEO_INTFREQ2<<24) | VIDEO_FRACFREQ2);
+	WR_MEM_32(VIDEOPLL_DIV2,  (1<<8) | VIDEO_MDIV2);
+
+	/*Program the PLL to generate SYSCLK13 and STC0/STC1 source clocks */
+	WR_MEM_32(VIDEOPLL_FREQ3, (1<<31) | (1<<28) | (VIDEO_INTFREQ3<<24) | VIDEO_FRACFREQ3);
+	WR_MEM_32(VIDEOPLL_DIV3,  (1<<8) | VIDEO_MDIV3);
+
+	WR_MEM_32(CM_SYSCLK13_CLKSEL, C2);
+	WR_MEM_32(CM_SYSCLK15_CLKSEL, B1);
+
+	/*Wait for PLL to Lock*/
+	while( (RD_MEM_32(VIDEOPLL_CTRL) & 0x80) != 0x80 );
+
+	/*Put the Main PLL in Normal(PLL) Mode*/
+	video_pll_ctrl = RD_MEM_32(VIDEOPLL_CTRL);
+	video_pll_ctrl &=0xFFFFFFFB;
+	WR_MEM_32(VIDEOPLL_CTRL, video_pll_ctrl);
+}
+
+void ti816x_SetDvo2PinMux()
+{
+	/* enable clocks on all units */
+	WR_MEM_32(0x48100100, 0x01031FFF);
+
+	WR_MEM_32(0x48100114, 0xC010E);
+
+	/* enable all video encoders */
+	WR_MEM_32(0x48100118, 0xF);
+
+	WR_MEM_32(0x48140814, 2);
+	WR_MEM_32(0x48140818, 2);
+	WR_MEM_32(0x4814081c, 2);
+	WR_MEM_32(0x48140820, 2);
+	WR_MEM_32(0x48140824, 2);
+	WR_MEM_32(0x48140828, 1);
+	WR_MEM_32(0x4814082c, 1);
+	WR_MEM_32(0x48140830, 1);
+	WR_MEM_32(0x48140834, 1);
+	WR_MEM_32(0x48140838, 1);
+	WR_MEM_32(0x4814083c, 2);
+	WR_MEM_32(0x48140840, 2);
+	WR_MEM_32(0x48140844, 2);
+	WR_MEM_32(0x48140848, 2);
+	WR_MEM_32(0x4814084c, 2);
+	WR_MEM_32(0x48140850, 2);
+	WR_MEM_32(0x48140854, 1);
+	WR_MEM_32(0x48140858, 1);
+	WR_MEM_32(0x4814085c, 1);
+	WR_MEM_32(0x48140860, 1);
+	WR_MEM_32(0x48140864, 1);
+	WR_MEM_32(0x48140868, 1);
+	WR_MEM_32(0x4814086c, 1);
+	WR_MEM_32(0x48140870, 1);
+	WR_MEM_32(0x48140874, 1);
+	WR_MEM_32(0x48140878, 2);
+	WR_MEM_32(0x4814087c, 1);
+	WR_MEM_32(0x48140880, 1);
+	WR_MEM_32(0x48140884, 1);
+	WR_MEM_32(0x48140888, 1);
+	WR_MEM_32(0x4814088c, 1);
+	WR_MEM_32(0x48140890, 1);
+	WR_MEM_32(0x48140894, 1);
+	WR_MEM_32(0x48140898, 1);
+	WR_MEM_32(0x4814089c, 1);
+	WR_MEM_32(0x481408b4, 2);
+	WR_MEM_32(0x481408b8, 2);
+	WR_MEM_32(0x481408bc, 2);
+	WR_MEM_32(0x481408c0, 2);
+	WR_MEM_32(0x481408c4, 2);
+	WR_MEM_32(0x481409d4, 0);
+	WR_MEM_32(0x481409d8, 0);
+	WR_MEM_32(0x481409dc, 0);
+	WR_MEM_32(0x481409e0, 0);
+	WR_MEM_32(0x481409e4, 0);
+	WR_MEM_32(0x481409e8, 0);
+	WR_MEM_32(0x481409ec, 0);
+	WR_MEM_32(0x481409f0, 0);
+#ifdef DEBUG_VPSS
+	printf("\t\nPinmux Configuration is Done.....","Output",1,1,1);
+#endif
+}
+
+void ti816x_hdmi_enable()
+{
+	u32 temp, temp1;
+	volatile ulong reset_time_out;
+	
+	temp = RD_MEM_32(0x46C00008);
+	temp |= 0x0001;
+	WR_MEM_32(0x46c00008, temp);
+
+	reset_time_out = 0x000FFFFF;
+
+	while (((RD_MEM_32(0x46C00008)) & 0x1) == 0x1) 
+	{
+		reset_time_out--;
+		if (reset_time_out == 0x0) 
+		{
+			printf("Could not reset wrapper ");
+		}
+	}
+
+	/* phy settings */
+	temp = RD_MEM_32(0x48122008);
+	if ((temp & 0x00000001) != 0x00000001)
+	{
+		temp |= 0x00000001;
+	}
+	WR_MEM_32(0x48122008, temp);
+	
+	temp = RD_MEM_32(0x48122008);
+	temp &= (~((0x00000006) | (0x00000018) | (0x00000040)));
+	temp |= (0x00000000 << 0x00000001);   /* 8-bit channel */
+	temp |= (0x00000001 << 0x00000003);
+	WR_MEM_32(0x48122008, temp);
+
+	temp = RD_MEM_32(0x4812200C);
+	temp &= ~0x01;
+	temp |= 0x004;
+	WR_MEM_32(0x4812200C, temp);
+	
+	/* disable 10bit encode in the PHY */
+	WR_MEM_32(0x48122020, 0xE0);
+	
+	temp = RD_MEM_32(0x48122004);
+	temp |= (0x10 | 0x20);
+	WR_MEM_32(0x48122004, temp);
+
+	/* wrapper settings */
+	/* wrapper debounce config */
+	temp = RD_MEM_32(0x46C00044) ;
+	temp1 = temp | 0x00001414;
+	WR_MEM_32(0x46C00044, temp1);
+
+	/* cec clock divider config */
+	temp = RD_MEM_32(0x46C00070) ;
+	temp1 = temp | 0x00000218;
+	WR_MEM_32(0x46C00070, temp1);
+	
+	temp = RD_MEM_32(0x46C00050);
+	temp &= (~(0x700));
+	temp |= ((0x00000001 << 0x00000008) & 0x00000700);
+	temp &= (~(0x03));   /* in slave mode */
+	WR_MEM_32(0x46C00050, temp);
+	
+	/* audio wrapper disable */
+	temp = RD_MEM_32(0x46C00088);
+	temp &= (~(0x80000000));
+	WR_MEM_32(0x46C00088, temp);
+	WR_MEM_32(0x46C00080, 0x0);
+
+	/* Bring the CORE out of reset,
+        to allow access to DDC / EDID */
+	temp = RD_MEM_32(0x46C00414);
+	temp &= (~(0x00000001));
+	WR_MEM_32(0x46C00414, temp);
+	
+	/* Important, when in power down mode. Interrupts are not triggered, which
+        means HPD / DDC / CEC / HDCP interrupts are not detected */
+	temp = RD_MEM_32(0x46C00420);
+	temp &= (~(0x00000001));	/* Interrupts in power down mode */
+	WR_MEM_32(0x46C00420, temp);
+
+	/* core settings */
+	temp = RD_MEM_32(0x46C009F0);
+        temp &= (~(0x00000008));
+	WR_MEM_32(0x46C009F0, temp);
+	
+	temp = RD_MEM_32(0x46C00524);
+        temp &= (~(0x000000C0));
+        temp |= ((0x0 << 0x00000006) & 0x000000C0);   /* 8-bits channel width */
+	WR_MEM_32(0x46C00524, temp);
+        
+	temp = RD_MEM_32(0x46C00420);
+        temp &= (~(0x00000004 | 0x00000002));
+        temp |= 0x00000002;
+        temp |= 0x00000004;
+	WR_MEM_32(0x46C00420, temp);
+
+	WR_MEM_32(0x46C004CC, 0x00000001);  // DATA ENABLE CNTRL
+	
+	temp = RD_MEM_32(0x46C00420);     // ENABLE VSYNC AND HSYNC
+        temp |= 0x00000020;
+        temp |= 0x00000010;
+	WR_MEM_32(0x46C00420, temp);
+
+	hdmi_write32(0x0528, 0x0);  // VID_MODE CONFIG
+	hdmi_write32(0x04F8, 0x0);  // iadjust config to enable vsync
+	hdmi_write32(0x0520, 0x10); // csc is bt709
+	hdmi_write32(0x09BC, 0x21); // enable hdmi
+
+	hdmi_write32(0x0608, 0x20); // tmds_ctrl
+	hdmi_write32(0x0904, 0x0);  // disable n/cts of actrl
+	hdmi_write32(0x0950, 0x0);  // disable audio
+	hdmi_write32(0x0414, 0x0);  // keep audio  operation in reset state
+}
+
+void ti816x_configureHdVenc720P60(int useEmbeddedSync)
+{
+	volatile uint *vencHd_D_Base = NULL;
+
+	vencHd_D_Base = (volatile uint *)0x48106000;
+
+	/**vencHd_D_Base = 0x40023043;  - Prob embedded syncs */    
+	/**vencHd_D_Base = 0x4003A013;  - Color space conversion done */ 
+	if (useEmbeddedSync != 0x0)
+	{
+		*vencHd_D_Base = 0x4002A033; 
+	}
+	else
+	{
+			*vencHd_D_Base = 0x40032033;    
+	}
+
+	vencHd_D_Base++;
+	*vencHd_D_Base = 0x1FD01E24;
+	vencHd_D_Base++;
+	*vencHd_D_Base = 0x02DC020C;
+	vencHd_D_Base++;
+	*vencHd_D_Base = 0x00DA004A;
+	vencHd_D_Base++;
+	*vencHd_D_Base = 0x020C1E6C;
+	vencHd_D_Base++;
+	*vencHd_D_Base = 0x02001F88;
+	vencHd_D_Base++;
+	*vencHd_D_Base = 0x00200000;
+	vencHd_D_Base++;
+	*vencHd_D_Base = 0x1B6C0C77;
+	vencHd_D_Base++;
+	*vencHd_D_Base = 0x1C0C0C30;
+	vencHd_D_Base++;
+	*vencHd_D_Base = 0x1C0C0C30;
+	vencHd_D_Base++;
+	*vencHd_D_Base = 0x842EE672;
+	vencHd_D_Base++;
+	*vencHd_D_Base = 0x3F000018;
+	vencHd_D_Base++;
+	*vencHd_D_Base = 0x50500103;
+	vencHd_D_Base++;
+	*vencHd_D_Base = 0x000002E8;
+	vencHd_D_Base++;
+	*vencHd_D_Base = 0x000C39E7;
+	vencHd_D_Base++;
+	*vencHd_D_Base = 0x50500172;
+	vencHd_D_Base++;
+	*vencHd_D_Base = 0x0001A64B;
+	vencHd_D_Base++;
+	*vencHd_D_Base = 0x002D0000;
+	vencHd_D_Base++;
+	*vencHd_D_Base = 0x05000000;
+	vencHd_D_Base++;
+	*vencHd_D_Base = 0x00003000;
+	vencHd_D_Base++;
+	*vencHd_D_Base = 0x00000000;
+	vencHd_D_Base++;
+	*vencHd_D_Base = 0x5050016A;
+	vencHd_D_Base++;
+	*vencHd_D_Base = 0x0001A64B;
+	vencHd_D_Base++;
+	*vencHd_D_Base = 0x002D0000;
+	vencHd_D_Base++;
+	*vencHd_D_Base = 0x05000000;
+	vencHd_D_Base++;
+	*vencHd_D_Base = 0x00003000;
+	vencHd_D_Base++;
+	*vencHd_D_Base = 0x00000000;
+	vencHd_D_Base++;
+	*vencHd_D_Base = 0x00000000;
+}
+
+void ti816x_vps_init()
+{
+	/* enable comp units */
+	vps_write32(VPS_COMP_STATUS, 0
+			| (1<<0)   /* HDMI enable */
+			);
+
+	/* set background color */
+	vps_write32(VPS_COMP_BGCOLOR, LOGO_BGCOLOR);
+}
+
+int ti816x_set_board()
+{
+	/* enable vps clock */
+	ti816x_HdVpssClkEnable();
+	/* enable hdmi clock */
+	ti816x_HdmiClkEnable();
+	ti816x_HdVpss_VencD297_VencA297();
+	ti816x_SetDvo2PinMux();
+	ti816x_configureHdVenc720P60(0u);
+	/* set the comp for hdmi */
+	ti816x_vps_init();
+	ti816x_hdmi_enable();
+	return 0;
+}
-- 
1.7.1

