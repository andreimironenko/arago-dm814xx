From 10f5010ef41b1e0dda260a6fe1c0bc465b73493c Mon Sep 17 00:00:00 2001
From: Amarinder Bindra <a-bindra@ti.com>
Date: Tue, 21 Feb 2012 15:37:34 +0530
Subject: [PATCH] ti814x ti816x: added udelays and removed some infinite while loops when setting the registers on board


Signed-off-by: Amarinder Bindra <a-bindra@ti.com>
---
 drivers/video/ti814x_logo.c |   25 ++++++++++++++++++++-----
 drivers/video/ti816x_logo.c |   41 +++++++++++++++++++++++++++++++++++------
 2 files changed, 55 insertions(+), 11 deletions(-)

diff --git a/drivers/video/ti814x_logo.c b/drivers/video/ti814x_logo.c
index e673543..acf7796 100644
--- a/drivers/video/ti814x_logo.c
+++ b/drivers/video/ti814x_logo.c
@@ -219,6 +219,7 @@ int ti814x_pll_config_hdmi(u32 freq)
 void ti814x_hdmi_enable(int freq)
 {
 	u32 temp, temp1;
+	int i;
 
 	/* wrapper soft reset */
 	temp = hdmi_read32(0x0010) ;
@@ -233,15 +234,29 @@ void ti814x_hdmi_enable(int freq)
 
 	/* Power on the phy from wrapper */
 	hdmi_write32(0x0040, 0x8);
-
-	while((hdmi_read32(0x0040) & 0x00000003) != 2);
+	for (i = 0;i < 1000; i++) { 
+		if ((hdmi_read32(0x0040) & 0x00000003) == 2) 
+			break;
+		else 
+			udelay(10);
+	}
 
 	hdmi_write32(0x0040, 0x4A);
-	while((hdmi_read32(0x0040) & 0x000000FF ) != 0x5A);
+	for (i = 0;i < 1000; i++) { 
+		if ((hdmi_read32(0x0040) & 0x000000FF ) != 0x5A)
+			break;
+		else 
+			udelay(10);
+	}
 
 	hdmi_write32(0x0040, 0x8A);
-	while((hdmi_read32(0x0040) & 0xFF) != 0xAA);
-
+	for (i = 0;i < 1000; i++) { 
+		if ((hdmi_read32(0x0040) & 0xFF) != 0xAA)
+			break;
+		else 
+			udelay(10);
+	}
+	
 	/* Dummy read to PHY base to complete the scp reset process */
 	temp = hdmi_read32(0x0300);
 
diff --git a/drivers/video/ti816x_logo.c b/drivers/video/ti816x_logo.c
index 24df5ee..33a7148 100644
--- a/drivers/video/ti816x_logo.c
+++ b/drivers/video/ti816x_logo.c
@@ -4,6 +4,7 @@
 void ti816x_HdVpssClkEnable()
 {
 	uint delay;
+	int i;
 
 	WR_MEM_32(CM_HDDSS_CLKSTCTRL, 2); /*Enable Power Domain Transition for HDVPSS */
 
@@ -13,22 +14,44 @@ void ti816x_HdVpssClkEnable()
 	WR_MEM_32(CM_ACTIVE_HDDSS_CLKCTRL, 2); /*Enable HDVPSS Clocks*/
 
 	/*Check clocks are active*/
-	while(((RD_MEM_32(CM_HDDSS_CLKSTCTRL) & 0xFF00) >> 8) != 0xFF) ;
+	for (i = 0;i < 1000; i++) { 
+		if (((RD_MEM_32(CM_HDDSS_CLKSTCTRL) & 0xFF00) >> 8) != 0xFF)
+			break;
+		else 
+			udelay(10);
+	}
 
 	/* Check to see module is functional */
-	while(((RD_MEM_32(CM_ACTIVE_HDDSS_CLKCTRL) & 0x70000) >> 16) != 0) ;
+	for (i = 0;i < 1000; i++) { 
+		if (((RD_MEM_32(CM_ACTIVE_HDDSS_CLKCTRL) & 0x70000) >> 16) != 0)
+			break;
+		else 
+			udelay(10);
+	}
 }
 
 void ti816x_HdmiClkEnable()
 {
+	int i;
+	
 	WR_MEM_32(CM_HDMI_CLKSTCTRL, 2); /*Enable Power Domain Transition for HDMI */
 	WR_MEM_32(CM_ACTIVE_HDMI_CLKCTRL, 2); /*Enable HDMI Clocks*/
 
 	/*Check clocks are active*/
-	while(((RD_MEM_32(CM_HDMI_CLKSTCTRL) & 0x300) >> 8) != 0x3) ;
+	for (i = 0;i < 1000; i++) { 
+		if (((RD_MEM_32(CM_HDMI_CLKSTCTRL) & 0x300) >> 8) != 0x3)
+			break;
+		else 
+			udelay(10);
+	}
 
 	/* Check to see module is functional */
-	while(((RD_MEM_32(CM_ACTIVE_HDMI_CLKCTRL) & 0x70000) >> 16) != 0) ;
+	for (i = 0;i < 1000; i++) { 
+		if (((RD_MEM_32(CM_ACTIVE_HDMI_CLKCTRL) & 0x70000) >> 16) != 0)
+			break;
+		else 
+			udelay(10);
+	}
 }
 
 void ti816x_HdVpss_VencD297_VencA297()
@@ -44,6 +67,7 @@ uint VIDEO_MDIV2, uint  VIDEO_INTFREQ3, uint VIDEO_FRACFREQ3, uint VIDEO_MDIV3,
 uint B1, unsigned C2)
 {
 	uint video_pll_ctrl = 0;
+	int i;
 
 	/*Put the Video PLL in Bypass Mode*/
 	video_pll_ctrl = RD_MEM_32(VIDEOPLL_CTRL);
@@ -87,8 +111,13 @@ uint B1, unsigned C2)
 	WR_MEM_32(CM_SYSCLK15_CLKSEL, B1);
 
 	/*Wait for PLL to Lock*/
-	while( (RD_MEM_32(VIDEOPLL_CTRL) & 0x80) != 0x80 );
-
+	for (i = 0;i < 1000; i++) { 
+		if ((RD_MEM_32(VIDEOPLL_CTRL) & 0x80) != 0x80 )
+			break;
+		else 
+			udelay(10);
+	}
+	
 	/*Put the Main PLL in Normal(PLL) Mode*/
 	video_pll_ctrl = RD_MEM_32(VIDEOPLL_CTRL);
 	video_pll_ctrl &= 0xFFFFFFFB;
-- 
1.7.1

